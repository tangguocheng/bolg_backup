{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/google22b1faa3ba994fdd.html","path":"google22b1faa3ba994fdd.html","modified":0,"renderable":0},{"_id":"source/day/index.html","path":"day/index.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/index.html","path":"freeRTOS/index.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/readme.html","path":"freeRTOS/readme.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/style.css","path":"freeRTOS/gitbook/style.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/简介/freeRTOS介绍.html","path":"freeRTOS/简介/freeRTOS介绍.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/简介/快速开始指南.md","path":"freeRTOS/简介/快速开始指南.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/简介/编码规则和风格.html","path":"freeRTOS/简介/编码规则和风格.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/简介/freeRTOS介绍.md","path":"freeRTOS/简介/freeRTOS介绍.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/简介/编码规则和风格.md","path":"freeRTOS/简介/编码规则和风格.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/简介/快速开始指南.html","path":"freeRTOS/简介/快速开始指南.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/简介/许可.html","path":"freeRTOS/简介/许可.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/简介/许可.md","path":"freeRTOS/简介/许可.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/readme.html","path":"freeRTOS/入门/readme.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/readme.md","path":"freeRTOS/入门/readme.md","modified":0,"renderable":0},{"_id":"themes/private/source/img/school.png","path":"img/school.png","modified":0,"renderable":1},{"_id":"themes/private/source/img/footer_lodyas.png","path":"img/footer_lodyas.png","modified":0,"renderable":1},{"_id":"themes/private/source/lrc/dujiajiyi.lrc","path":"lrc/dujiajiyi.lrc","modified":0,"renderable":1},{"_id":"themes/private/source/lrc/suoxing.lrc","path":"lrc/suoxing.lrc","modified":0,"renderable":1},{"_id":"source/freeRTOS/gitbook/gitbook.js","path":"freeRTOS/gitbook/gitbook.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/theme.js","path":"freeRTOS/gitbook/theme.js","modified":0,"renderable":0},{"_id":"themes/private/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/private/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/private/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/private/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/private/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/private/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/private/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/private/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/private/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/private/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/private/source/js/jquery.leoweather.min.js","path":"js/jquery.leoweather.min.js","modified":0,"renderable":1},{"_id":"themes/private/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/private/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/private/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/private/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/private/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/private/source/js/stickUp.min.js","path":"js/stickUp.min.js","modified":0,"renderable":1},{"_id":"themes/private/source/img/girl.jpg","path":"img/girl.jpg","modified":0,"renderable":1},{"_id":"source/day/ertongjie/2016/index.html","path":"day/ertongjie/2016/index.html","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/digital-7_mono.ttf","path":"day/qixi/2016/digital-7_mono.ttf","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/index.html","path":"day/qixi/2016/index.html","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/debug.log","path":"day/zhongqiu/2016/debug.log","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/index.html","path":"day/zhongqiu/2016/index.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-duoshuo/duoshuo.js","path":"freeRTOS/gitbook/gitbook-plugin-duoshuo/duoshuo.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-ga/plugin.js","path":"freeRTOS/gitbook/gitbook-plugin-ga/plugin.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-fontsettings/website.css","path":"freeRTOS/gitbook/gitbook-plugin-fontsettings/website.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-lunr/lunr.min.js","path":"freeRTOS/gitbook/gitbook-plugin-lunr/lunr.min.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-lunr/search-lunr.js","path":"freeRTOS/gitbook/gitbook-plugin-lunr/search-lunr.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-fontsettings/fontsettings.js","path":"freeRTOS/gitbook/gitbook-plugin-fontsettings/fontsettings.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-funky.css","path":"freeRTOS/gitbook/gitbook-plugin-prismx/prism-funky.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-dark.css","path":"freeRTOS/gitbook/gitbook-plugin-prismx/prism-dark.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-okaidia.css","path":"freeRTOS/gitbook/gitbook-plugin-prismx/prism-okaidia.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-solarizedlight.css","path":"freeRTOS/gitbook/gitbook-plugin-prismx/prism-solarizedlight.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-coy.css","path":"freeRTOS/gitbook/gitbook-plugin-prismx/prism-coy.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-sharing/buttons.js","path":"freeRTOS/gitbook/gitbook-plugin-sharing/buttons.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-tomorrow.css","path":"freeRTOS/gitbook/gitbook-plugin-prismx/prism-tomorrow.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-twilight.css","path":"freeRTOS/gitbook/gitbook-plugin-prismx/prism-twilight.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism.css","path":"freeRTOS/gitbook/gitbook-plugin-prismx/prism.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-theme-comscore/test.css","path":"freeRTOS/gitbook/gitbook-plugin-theme-comscore/test.css","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/images/favicon.ico","path":"freeRTOS/gitbook/images/favicon.ico","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/images/apple-touch-icon-precomposed-152.png","path":"freeRTOS/gitbook/images/apple-touch-icon-precomposed-152.png","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-theme-comscore/test.js","path":"freeRTOS/gitbook/gitbook-plugin-theme-comscore/test.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/事件组/事件组.html","path":"freeRTOS/入门/事件组/事件组.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/任务和协程/readme.html","path":"freeRTOS/入门/任务和协程/readme.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/事件组/事件组.md","path":"freeRTOS/入门/事件组/事件组.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/任务和协程/readme.md","path":"freeRTOS/入门/任务和协程/readme.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/任务和协程/任务.html","path":"freeRTOS/入门/任务和协程/任务.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/软件定时器/软件定时器.html","path":"freeRTOS/入门/软件定时器/软件定时器.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/软件定时器/软件定时器.md","path":"freeRTOS/入门/软件定时器/软件定时器.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/任务和协程/任务.md","path":"freeRTOS/入门/任务和协程/任务.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/任务和协程/协程.md","path":"freeRTOS/入门/任务和协程/协程.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/任务和协程/协程.html","path":"freeRTOS/入门/任务和协程/协程.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/源代码组织结构/源代码组织结构.html","path":"freeRTOS/进阶/源代码组织结构/源代码组织结构.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/readme.html","path":"freeRTOS/入门/通信机制/readme.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/readme.md","path":"freeRTOS/入门/通信机制/readme.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/源代码组织结构/源代码组织结构.md","path":"freeRTOS/进阶/源代码组织结构/源代码组织结构.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/二值信号量.html","path":"freeRTOS/入门/通信机制/二值信号量.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/互斥量.html","path":"freeRTOS/入门/通信机制/互斥量.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/二值信号量.md","path":"freeRTOS/入门/通信机制/二值信号量.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/任务通知.html","path":"freeRTOS/入门/通信机制/任务通知.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/互斥量.md","path":"freeRTOS/入门/通信机制/互斥量.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/计数信号量.html","path":"freeRTOS/入门/通信机制/计数信号量.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/任务通知.md","path":"freeRTOS/入门/通信机制/任务通知.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/递归互斥量.html","path":"freeRTOS/入门/通信机制/递归互斥量.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/计数信号量.md","path":"freeRTOS/入门/通信机制/计数信号量.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/递归互斥量.md","path":"freeRTOS/入门/通信机制/递归互斥量.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/队列.html","path":"freeRTOS/入门/通信机制/队列.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/入门/通信机制/队列.md","path":"freeRTOS/入门/通信机制/队列.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/中断延迟.html","path":"freeRTOS/进阶/高级/中断延迟.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/中断延迟.md","path":"freeRTOS/进阶/高级/中断延迟.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/低功耗支持.html","path":"freeRTOS/进阶/高级/低功耗支持.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/内存管理.html","path":"freeRTOS/进阶/高级/内存管理.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/低功耗支持.md","path":"freeRTOS/进阶/高级/低功耗支持.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/内存保护.md","path":"freeRTOS/进阶/高级/内存保护.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/在windows上模拟.md","path":"freeRTOS/进阶/高级/在windows上模拟.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/内存管理.md","path":"freeRTOS/进阶/高级/内存管理.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/栈溢出检测.md","path":"freeRTOS/进阶/高级/栈溢出检测.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/移植指南.md","path":"freeRTOS/进阶/高级/移植指南.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/栈溢出检测.html","path":"freeRTOS/进阶/高级/栈溢出检测.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/移植指南.html","path":"freeRTOS/进阶/高级/移植指南.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/线程本地存储.md","path":"freeRTOS/进阶/高级/线程本地存储.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/线程本地存储.html","path":"freeRTOS/进阶/高级/线程本地存储.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/跟踪特性.html","path":"freeRTOS/进阶/高级/跟踪特性.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/运行时间统计.html","path":"freeRTOS/进阶/高级/运行时间统计.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/运行时间统计.md","path":"freeRTOS/进阶/高级/运行时间统计.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/跟踪特性.md","path":"freeRTOS/进阶/高级/跟踪特性.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/配置文件.md","path":"freeRTOS/进阶/高级/配置文件.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/钩子函数.html","path":"freeRTOS/进阶/高级/钩子函数.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/钩子函数.md","path":"freeRTOS/进阶/高级/钩子函数.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/队列集合.html","path":"freeRTOS/进阶/高级/队列集合.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/队列集合.md","path":"freeRTOS/进阶/高级/队列集合.md","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/静态分配与动态分配.html","path":"freeRTOS/进阶/高级/静态分配与动态分配.html","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/静态分配与动态分配.md","path":"freeRTOS/进阶/高级/静态分配与动态分配.md","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/love.ico","path":"day/qixi/2016/love.ico","modified":0,"renderable":0},{"_id":"source/freeRTOS/进阶/高级/配置文件.html","path":"freeRTOS/进阶/高级/配置文件.html","modified":0,"renderable":0},{"_id":"themes/private/source/img/body_bg.jpg","path":"img/body_bg.jpg","modified":0,"renderable":1},{"_id":"source/day/ertongjie/2016/css/style.css","path":"day/ertongjie/2016/css/style.css","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/css/default.css","path":"day/qixi/2016/css/default.css","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/css/default_dev.css","path":"day/qixi/2016/css/default_dev.css","modified":0,"renderable":0},{"_id":"source/day/ertongjie/2016/css/css.css","path":"day/ertongjie/2016/css/css.css","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/js/functions.js","path":"day/qixi/2016/js/functions.js","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/js/garden_dev.js","path":"day/qixi/2016/js/garden_dev.js","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/js/functions_dev.js","path":"day/qixi/2016/js/functions_dev.js","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/js/garden.js","path":"day/qixi/2016/js/garden.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/alert/sweetalert.min.js","path":"day/zhongqiu/2016/alert/sweetalert.min.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/css/myStyle.css","path":"day/zhongqiu/2016/css/myStyle.css","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/alert/sweetalert.css","path":"day/zhongqiu/2016/alert/sweetalert.css","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/img/3.jpg","path":"day/zhongqiu/2016/img/3.jpg","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/img/jin.ico","path":"day/zhongqiu/2016/img/jin.ico","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/img/tgc.ico","path":"day/zhongqiu/2016/img/tgc.ico","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/js/backgroud.js","path":"day/zhongqiu/2016/js/backgroud.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/js/myJs.js","path":"day/zhongqiu/2016/js/myJs.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/toast/toastr.min.css","path":"day/zhongqiu/2016/toast/toastr.min.css","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/toast/toastr.css","path":"day/zhongqiu/2016/toast/toastr.css","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/toast/toastr.js.map","path":"day/zhongqiu/2016/toast/toastr.js.map","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/toast/toastr.min.js","path":"day/zhongqiu/2016/toast/toastr.min.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/vegas.min.css","path":"day/zhongqiu/2016/vegas/vegas.min.css","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/vegas.min.js","path":"day/zhongqiu/2016/vegas/vegas.min.js","modified":0,"renderable":0},{"_id":"source/day/ertongjie/2016/js/jquery.min.js","path":"day/ertongjie/2016/js/jquery.min.js","modified":0,"renderable":0},{"_id":"source/day/qixi/2016/js/jquery.js","path":"day/qixi/2016/js/jquery.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/alert/sweetalert-dev.js","path":"day/zhongqiu/2016/alert/sweetalert-dev.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/img/us.ico","path":"day/zhongqiu/2016/img/us.ico","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/jquery.min.js","path":"day/zhongqiu/2016/vegas/jquery.min.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/FontAwesome.otf","path":"freeRTOS/gitbook/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.eot","path":"freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.woff","path":"freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.woff2","path":"freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/img/2.jpg","path":"day/zhongqiu/2016/img/2.jpg","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/css/lightbox.min.css","path":"day/zhongqiu/2016/lightbox/css/lightbox.min.css","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/css/lightbox.css","path":"day/zhongqiu/2016/lightbox/css/lightbox.css","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/images/close.png","path":"day/zhongqiu/2016/lightbox/images/close.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/images/loading.gif","path":"day/zhongqiu/2016/lightbox/images/loading.gif","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/images/next.png","path":"day/zhongqiu/2016/lightbox/images/next.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/images/prev.png","path":"day/zhongqiu/2016/lightbox/images/prev.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox.js","path":"day/zhongqiu/2016/lightbox/js/lightbox.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox.min.js","path":"day/zhongqiu/2016/lightbox/js/lightbox.min.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox.min.map","path":"day/zhongqiu/2016/lightbox/js/lightbox.min.map","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/overlays/01.png","path":"day/zhongqiu/2016/vegas/overlays/01.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/overlays/02.png","path":"day/zhongqiu/2016/vegas/overlays/02.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/overlays/03.png","path":"day/zhongqiu/2016/vegas/overlays/03.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/overlays/05.png","path":"day/zhongqiu/2016/vegas/overlays/05.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/overlays/04.png","path":"day/zhongqiu/2016/vegas/overlays/04.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/overlays/06.png","path":"day/zhongqiu/2016/vegas/overlays/06.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/overlays/07.png","path":"day/zhongqiu/2016/vegas/overlays/07.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/overlays/09.png","path":"day/zhongqiu/2016/vegas/overlays/09.png","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/vegas/overlays/08.png","path":"day/zhongqiu/2016/vegas/overlays/08.png","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.ttf","path":"freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/img/1.jpg","path":"day/zhongqiu/2016/img/1.jpg","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.min.js","path":"day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.min.js","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.min.map","path":"day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.min.map","modified":0,"renderable":0},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.svg","path":"freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":0},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.js","path":"day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.js","modified":0,"renderable":0},{"_id":"source/freeRTOS/search_index.json","path":"freeRTOS/search_index.json","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"aeefb982a599ad43807701ed441df9b069296a36","modified":1471405258472},{"_id":"source/CNAME","hash":"1a4255ab82f863ea5bab0e626c5c2ea39139c430","modified":1487648318902},{"_id":"source/favicon.ico","hash":"3a437badbfe168bd177499dc03a3b5db06d99d74","modified":1471405258562},{"_id":"source/google22b1faa3ba994fdd.html","hash":"00ce6923fa978a9bbc9ace6ee0936b6a9dec567a","modified":1473343304362},{"_id":"themes/private/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1471415547884},{"_id":"themes/private/README.md","hash":"4e0710d0d90183fe9a7c0b3864a095fe6ecd1047","modified":1474967109235},{"_id":"themes/private/LICENSE","hash":"b7ea1dbb2fed3410d78bc7c125e1d80927b56981","modified":1471415547884},{"_id":"themes/private/package.json","hash":"04ca87ea475f37841d3610fe5806feb8022416c3","modified":1471415547912},{"_id":"themes/private/_config.yml","hash":"6f6a39b2ac1a90d072c232f1d27276b4164cb552","modified":1480590261326},{"_id":"source/about/index.md","hash":"da5a3c44fb54749fdd2315a4fd80cb1bf13dc851","modified":1481542223063},{"_id":"source/_posts/2017flag.md","hash":"8dbf53d1a7861a6aaac83e65a5c3280576944090","modified":1484013331630},{"_id":"source/_posts/ARM-Addressing-Mode.md","hash":"04ccc0a41067df83c62f03ab647e029d1ea7caed","modified":1476252547396},{"_id":"source/_posts/ASCII.md","hash":"47437fbc0ef080f1b058037b1f4ef703368a8825","modified":1470030205175},{"_id":"source/_posts/CSharp.md","hash":"e7ee6d4e12685f82e3192b64b762d136d130ca09","modified":1470125353067},{"_id":"source/_posts/CSharpKeyWords.md","hash":"66e904988ca50090d5e4e6386fd6f5b3a47899a3","modified":1472436451704},{"_id":"source/_posts/IIC.md","hash":"1386efdf99e7714daa1607fcb8ed08b60e803fcf","modified":1473821102031},{"_id":"source/_posts/Keil&C.md","hash":"f71f07ff3a17880a135a5fe027e161c375544a96","modified":1470191365744},{"_id":"source/_posts/MBusAndDTL645.md","hash":"84fd9210d77f9695be19a2c453e57b9dffa73ee0","modified":1470210877489},{"_id":"source/_posts/SPI.md","hash":"b1db42f3e63b814c082f50d6f42de5fb15c7bb43","modified":1473830214062},{"_id":"source/_posts/STM32-NOTE.md","hash":"2ef89bdde9d821cff50a966aac3dcc539221a470","modified":1481251017880},{"_id":"source/_posts/SMT32_I2C.md","hash":"de3d5debce85ddd7b72170d037e28ac15b889c48","modified":1489478436000},{"_id":"source/_posts/STM8-CLOCK.md","hash":"d013f003ed91986f10659414fa7ac117142bf865","modified":1471594029489},{"_id":"source/_posts/STM8-GPIO.md","hash":"851b9c27f1709549e4353da448c8b4611a9cccac","modified":1470382516391},{"_id":"source/_posts/STM8-Memory.md","hash":"0e4af47dfed96c2395f092363205282246c14877","modified":1470645381251},{"_id":"source/_posts/STM8-REST.md","hash":"b9c87ebc4d64938587b1a4d01c310a3ff2bee680","modified":1470645513102},{"_id":"source/_posts/STM8-Summarize.md","hash":"e9bbda9f564d814e7a3bbb77e351c761fd1d1ded","modified":1470643527463},{"_id":"source/_posts/TTL-CMOS.md","hash":"22a834b710106a09bcd7817b859b53849cf889c7","modified":1470652723747},{"_id":"source/_posts/bootloader-Caution.md","hash":"7e24a61da0c6f3c0eab8bb916c252d5832830ab2","modified":1473822325490},{"_id":"source/_posts/UART.md","hash":"b4cc05ee3db3526548188183ea2fb8153d148cc7","modified":1471335495647},{"_id":"source/_posts/freeRTOS-CN.md","hash":"7a24548247a3205fc6e3233f1733c81fc2a6bf29","modified":1491439699000},{"_id":"source/_posts/keyLongOrShort.md","hash":"768ec74cb24ee73d16718e0a9e63a8ef87876a98","modified":1474189797758},{"_id":"source/_posts/howToNameYourCode.md","hash":"a51e3e36a654c93c8ae0e6af72f4f9affa93e394","modified":1473822414362},{"_id":"source/_posts/simple-bootloader-for51.md","hash":"c811f2aa33f51a16a1175038c5542d9b8f372d72","modified":1470030205146},{"_id":"source/_posts/startEmbeded.md","hash":"2879b04f2dacaa3c8e0f0a510c7ac2e901d9d57f","modified":1475135978549},{"_id":"source/categories/index.md","hash":"987de1a4603e5096ad566421b7149edcf0c34916","modified":1480474324132},{"_id":"source/_posts/updateAssistant.md","hash":"896bd60319a1f2338eab310762a4b2170a42c25a","modified":1473822470866},{"_id":"source/day/index.html","hash":"09260f89fc031b8f3c9b26ebbdd653cd42eceaa5","modified":1473413640484},{"_id":"source/freeRTOS/.gitignore","hash":"df9a9e20441592188a747a72c029d4f6b202b531","modified":1474189636422},{"_id":"source/freeRTOS/index.html","hash":"dc16ac71b380bfc24d39acac1dd9d979cd995fc2","modified":1474189636854},{"_id":"source/freeRTOS/readme.html","hash":"6a44bf0a87a443f20665243b82f6a354b377ad65","modified":1474189636424},{"_id":"themes/private/.git/COMMIT_EDITMSG","hash":"ba8549b556a02ad80429f21137fce773d50e437b","modified":1474967125208},{"_id":"themes/private/.git/config","hash":"7e49284e53174d4b551cecc983dd2e9ed715f8f5","modified":1474967133542},{"_id":"themes/private/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1474966925530},{"_id":"themes/private/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1474966925425},{"_id":"themes/private/.git/index","hash":"251fbbf40dec35543ec4d49cbc1b701bfc4c7d0c","modified":1474967125199},{"_id":"source/holiday/index.md","hash":"ea80ff9a9931193fd38fe3e7344691d8e239e460","modified":1484012865068},{"_id":"source/tags/index.md","hash":"e251f321f831b8615ed3e733fd10dc9f49bd8480","modified":1480474278213},{"_id":"themes/private/layout/archive.jade","hash":"90cdd8d0736165b97db6d1327f17c21829fe29dd","modified":1473256787555},{"_id":"themes/private/layout/base-without-sidebar.jade","hash":"baa6072d381a54f2436365846649799a4a277803","modified":1471415547908},{"_id":"themes/private/layout/page.jade","hash":"1e98aa785073dc1bbfe70f2863bc19fe287483b9","modified":1474171811087},{"_id":"themes/private/layout/base.jade","hash":"85acd3917387ac9616a110f75eae069216478126","modified":1475130170084},{"_id":"themes/private/layout/single-column.jade","hash":"4be14ac93c154216e174fe0c4c05608c26f59c42","modified":1471415547911},{"_id":"themes/private/layout/index.jade","hash":"ea1bfa408cc94976cc083ed295e58e12a3c3aa5f","modified":1484013434000},{"_id":"themes/private/layout/post.jade","hash":"e0c3780346c6740c6e4054c8139bb47bf38c3e38","modified":1473838680064},{"_id":"themes/private/layout/timeline.jade","hash":"ee1e8e4e8fdf61c6d19f1f7fe31ab50ab1465a8d","modified":1471415547911},{"_id":"themes/private/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1471415547894},{"_id":"themes/private/languages/en.yml","hash":"6c5fc2cec7e44306d97bc7902e9765389d21c363","modified":1471415547894},{"_id":"themes/private/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1471415547894},{"_id":"themes/private/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1471415547894},{"_id":"themes/private/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1471415547894},{"_id":"themes/private/languages/zh-CN.yml","hash":"85b7fa7cca4f0821928f59f2c9d31f36d2993551","modified":1474278967044},{"_id":"themes/private/languages/zh-TW.yml","hash":"46659764e31c7866af436d98d4fabb9da122037a","modified":1471415547894},{"_id":"source/freeRTOS/gitbook/style.css","hash":"a264bb67a9ee9b27c72c6da23166ed51337fad70","modified":1474189636366},{"_id":"source/freeRTOS/简介/freeRTOS介绍.html","hash":"8f4e5a60f9b4e5f472c2481694489f3019443f92","modified":1474189637328},{"_id":"source/freeRTOS/简介/快速开始指南.md","hash":"7355581e91004b032353f1f4b79a188220719d20","modified":1474189636443},{"_id":"source/freeRTOS/简介/编码规则和风格.html","hash":"f1685b057b7c10d7af85b2ad6de9a65172e3674c","modified":1474189637676},{"_id":"source/freeRTOS/简介/freeRTOS介绍.md","hash":"ee85c99e1264e920869214a9cccaadcd65c6d64e","modified":1474189636442},{"_id":"source/freeRTOS/简介/编码规则和风格.md","hash":"cf7c81d4a3aee5d11911238a90488a07f286363a","modified":1474189636445},{"_id":"source/freeRTOS/简介/快速开始指南.html","hash":"0b81f598d70d0f3e2a021c8c50e742e0d93de334","modified":1474189638057},{"_id":"source/freeRTOS/简介/许可.html","hash":"c30e4498fd23069970115a614d29bc0e8b1c8229","modified":1474189637835},{"_id":"source/freeRTOS/简介/许可.md","hash":"fe926bc509502d229902c5a2548492f7de390078","modified":1474189636453},{"_id":"source/freeRTOS/入门/readme.html","hash":"ae82104dd26a345ff45cfe1797fd4fc3d108309a","modified":1474189638186},{"_id":"source/freeRTOS/入门/readme.md","hash":"fb4b35ff571c8c9689944d8ec557afe32bf11380","modified":1474189636425},{"_id":"themes/private/.git/logs/HEAD","hash":"cb80f6226cc4b27a8b1776e652204325c5eddbb4","modified":1474967125228},{"_id":"themes/private/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1474966925521},{"_id":"themes/private/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1474966925434},{"_id":"themes/private/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1474966925462},{"_id":"themes/private/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1474966925470},{"_id":"themes/private/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1474966925478},{"_id":"themes/private/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1474966925486},{"_id":"themes/private/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1474966925451},{"_id":"themes/private/layout/_widget/links.jade","hash":"2a1dd6a0e2befd073e3347347994d8dcd2047879","modified":1471415547905},{"_id":"themes/private/layout/_widget/category.jade","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1471415547905},{"_id":"themes/private/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1474966925494},{"_id":"themes/private/layout/_widget/recent_comments.jade","hash":"0b9e78e7f20bc69690e05f2e0c956bded9058a84","modified":1471415547906},{"_id":"themes/private/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1474966925502},{"_id":"themes/private/layout/_widget/recent_posts.jade","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1471415547907},{"_id":"themes/private/layout/_widget/tag.jade","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1471415547907},{"_id":"themes/private/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1474966925510},{"_id":"themes/private/layout/_partial/footer.jade","hash":"d37142a676878429da36d3d2b446630610bc574a","modified":1472634229281},{"_id":"themes/private/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1471415547894},{"_id":"themes/private/layout/_widget/search.jade","hash":"c5301ca7f2ec24d790fd7f35f69f8fd8acbdb725","modified":1471415547907},{"_id":"themes/private/layout/_partial/after_footer.jade","hash":"e3b993317b6a6f0824f53ddbeb62ac4c8d8584c5","modified":1475130155669},{"_id":"themes/private/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1471415547894},{"_id":"themes/private/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1471415547894},{"_id":"themes/private/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1475133409609},{"_id":"themes/private/layout/_partial/comments.jade","hash":"b3a0b0ce0642f2bfe9df94b075c0c2a083871e1b","modified":1471415547894},{"_id":"themes/private/layout/_partial/helpers.jade","hash":"a0f3e3c721d0bec0369fe7aacfb4c0595ed823f6","modified":1473817904023},{"_id":"themes/private/layout/_partial/totop.jade","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1471415547904},{"_id":"themes/private/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1471415547904},{"_id":"themes/private/source/img/school.png","hash":"8f26268f7e1f46bb06831e8821d05972aaf1a910","modified":1411048404000},{"_id":"themes/private/source/img/footer_lodyas.png","hash":"621df6061bb265361c3873522ea305c6b5ccaeaf","modified":1413204226000},{"_id":"themes/private/source/lrc/dujiajiyi.lrc","hash":"c6c398fbbaab48e644f25101b0fb1d5078efe69a","modified":1474965217675},{"_id":"themes/private/source/lrc/suoxing.lrc","hash":"302c66a5f8771a422e870839e462610086eb00ba","modified":1474964387413},{"_id":"source/freeRTOS/gitbook/gitbook.js","hash":"66c9fd0ac34c33b232c06278bd6e0d6bbb36892a","modified":1474189636370},{"_id":"source/freeRTOS/gitbook/theme.js","hash":"b62787a79b30c925df2292d8cf08497f48e1eb68","modified":1474189636364},{"_id":"themes/private/source/css/jquery.fancybox.css","hash":"d2dc2f6142dfeb2ea5cac80acaa2593938a84ca2","modified":1471595248403},{"_id":"themes/private/source/css/style.scss","hash":"eadba67f36b9d84eb57f38b13d11d9f4b50fcfc1","modified":1481251129539},{"_id":"themes/private/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471415547914},{"_id":"themes/private/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471415547914},{"_id":"themes/private/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471415547914},{"_id":"themes/private/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471415547914},{"_id":"themes/private/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471415547914},{"_id":"themes/private/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471415547914},{"_id":"themes/private/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1471415547914},{"_id":"themes/private/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1471415547914},{"_id":"themes/private/source/js/jquery.leoweather.min.js","hash":"6521e719290afe568601380326a2c0ad2f384709","modified":1474618346216},{"_id":"themes/private/source/js/jquery.pjax.js","hash":"6ac5b70b35043f7ec1e1ca35ce3020d39c27858f","modified":1475047314813},{"_id":"themes/private/source/js/search.js","hash":"9cf2337fe9af34055782880ac27b93713d74581f","modified":1471415547914},{"_id":"themes/private/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1471415547914},{"_id":"themes/private/source/js/share.js","hash":"bb6880e2e8e187b576daf326476f09b0907fbe14","modified":1471415547914},{"_id":"themes/private/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1471415547914},{"_id":"themes/private/source/js/stickUp.min.js","hash":"cc2fb038703a1f0604f1b91b0d47606356ca595b","modified":1475128253673},{"_id":"themes/private/source/img/girl.jpg","hash":"92743ba769bb7a7de8e93a418ed36c89e60bc639","modified":1474611756794},{"_id":"source/day/ertongjie/2016/index.html","hash":"cb522ea68bd21dfedf608ed5ddbd86cfd2fe397f","modified":1471413489953},{"_id":"source/day/qixi/2016/digital-7_mono.ttf","hash":"ea0659563eb80ed2a2ae70fade25fff131be22a4","modified":1471405258492},{"_id":"source/day/qixi/2016/index.html","hash":"79313fb33148997f82f7ae489620a61e91af391e","modified":1471405258502},{"_id":"source/day/zhongqiu/2016/debug.log","hash":"d5e6ea15b92ffe54fb06708d000e7ede97d48d38","modified":1473651324297},{"_id":"source/day/zhongqiu/2016/index.html","hash":"92dc2582ab23b2ce3277a3502038b81b94001e05","modified":1473780080106},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-duoshuo/duoshuo.js","hash":"6ed1587278d017b2f62839f02e7027c59caa2778","modified":1474189636405},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-ga/plugin.js","hash":"5a98c9804c4dd842ee21ee67a108482384da0680","modified":1474189636402},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-fontsettings/website.css","hash":"179fd22c67503ad740aba521b1ef423a9a0f7fed","modified":1474189636390},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-lunr/lunr.min.js","hash":"29ac71f4c9649224e5d7275104fa03dcc7a2cd27","modified":1474189636398},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-lunr/search-lunr.js","hash":"b3147a1cf729034d159cfde66e09c24c31dc718f","modified":1474189636397},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-fontsettings/fontsettings.js","hash":"d685a2bcf6cbbade1fc43e7036bdc68551ffd379","modified":1474189636391},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-funky.css","hash":"600a878360cf22814b1a792851595a0c5e89f5b3","modified":1474189636417},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-dark.css","hash":"871e0b745477c5b4acd87518270f046a840ce950","modified":1474189636418},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-okaidia.css","hash":"ff437e9ea20a1bedb0ed18ab05e5ee7f40f452e1","modified":1474189636417},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-solarizedlight.css","hash":"8f0490f389a7e49bc3706a80911804fdf1b1b8c3","modified":1474189636415},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-coy.css","hash":"d5503843ed66d1462731f8aa8693ee110d87f9ba","modified":1474189636420},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-sharing/buttons.js","hash":"8b4eb87cc47127f0eb0c247ab83f44aa0da7426d","modified":1474189636394},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-tomorrow.css","hash":"2eb468e82b669045d37cb6b503af97dabc0a9eb2","modified":1474189636414},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism-twilight.css","hash":"aa76085d0e6c8bdf0c36624a175a77f46b55c49d","modified":1474189636413},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-prismx/prism.css","hash":"bed3a85b4fb53bc89e65e42ec62b9ce3e907fc80","modified":1474189636410},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-theme-comscore/test.css","hash":"dd9c8e7dea32b49538fdf17f7ace5b00c0f4040a","modified":1474189636387},{"_id":"source/freeRTOS/gitbook/images/favicon.ico","hash":"2598b5cea7576b2c97db3f2906c378212412fb04","modified":1474189636368},{"_id":"source/freeRTOS/gitbook/images/apple-touch-icon-precomposed-152.png","hash":"5246e4190b7379427ada71483a0c6acde505e5ed","modified":1474189636369},{"_id":"source/freeRTOS/gitbook/gitbook-plugin-theme-comscore/test.js","hash":"556f85ecfa434e67fe6f4bf16f1e2e274069d6ec","modified":1474189636386},{"_id":"source/freeRTOS/入门/事件组/事件组.html","hash":"978067c28c4909f0fa6458144434e44542f4425f","modified":1474189640150},{"_id":"source/freeRTOS/入门/任务和协程/readme.html","hash":"ce22f8e3df7dc16cef3378928bb0d60da139859a","modified":1474189638366},{"_id":"source/freeRTOS/入门/事件组/事件组.md","hash":"f0850e027678d2a749aed619ba6240d6c30d68dc","modified":1474189636426},{"_id":"source/freeRTOS/入门/任务和协程/readme.md","hash":"6c1d664f896cbe1d18509c25610835cdc431261c","modified":1474189636427},{"_id":"source/freeRTOS/入门/任务和协程/任务.html","hash":"f7528fa0de737ce34f47a5cdc6570cd3f51de95a","modified":1474189638605},{"_id":"source/freeRTOS/入门/软件定时器/软件定时器.html","hash":"b61048d4ca6110bd2fb118d887b7cf85306c6875","modified":1474189640327},{"_id":"source/freeRTOS/入门/软件定时器/软件定时器.md","hash":"f1f2269bd170fa784da56f5ebd7c186a307f9925","modified":1474189636432},{"_id":"source/freeRTOS/入门/任务和协程/任务.md","hash":"c7009d11499b09049fc9b18f62742ef31e4e4fee","modified":1474189636429},{"_id":"source/freeRTOS/入门/任务和协程/协程.md","hash":"c1721e57083d45b665ea7f5f87e6813b16f3ef76","modified":1474189636430},{"_id":"source/freeRTOS/入门/任务和协程/协程.html","hash":"09cb998d2d481f315640596d34369beb8b5ee0d6","modified":1474189638876},{"_id":"source/freeRTOS/进阶/源代码组织结构/源代码组织结构.html","hash":"77085ba68b32f1237326bd4d8982f31955ea8c31","modified":1474189640521},{"_id":"source/freeRTOS/入门/通信机制/readme.html","hash":"968a22060e72c8c017465077c7697fa940d3b207","modified":1474189638999},{"_id":"source/freeRTOS/入门/通信机制/readme.md","hash":"97d8e81d4abacc393a31a54a221e4c79d90f8e45","modified":1474189636433},{"_id":"source/freeRTOS/进阶/源代码组织结构/源代码组织结构.md","hash":"b0ece248b8b80a5cf2213190a39de97b2b68b712","modified":1474189636454},{"_id":"source/freeRTOS/入门/通信机制/二值信号量.html","hash":"a2c2debb749fc1c28ff9c79dec46369bb9d74c38","modified":1474189639304},{"_id":"source/freeRTOS/入门/通信机制/互斥量.html","hash":"a635c6d689b88d86e972ead9533633107d4c22d0","modified":1474189639556},{"_id":"source/freeRTOS/入门/通信机制/二值信号量.md","hash":"228634d4475cae6695d895b93111c633a56d511c","modified":1474189636434},{"_id":"source/freeRTOS/入门/通信机制/任务通知.html","hash":"c966d812c5509002d6f686c43a75b1be60d0ab5f","modified":1474189639960},{"_id":"source/freeRTOS/入门/通信机制/互斥量.md","hash":"5e8e1ca35f7dc1a3a481a3dc28fb6bdd6b45ffdf","modified":1474189636436},{"_id":"source/freeRTOS/入门/通信机制/计数信号量.html","hash":"5a07b0d95bb1edc2a4c3aed0e9cf06f0c363cbb8","modified":1474189639431},{"_id":"source/freeRTOS/入门/通信机制/任务通知.md","hash":"9458762566b1a21f0f2d06350b6a077dea42b79c","modified":1474189636437},{"_id":"source/freeRTOS/入门/通信机制/递归互斥量.html","hash":"e68e06c0f0ee6b939db17cd5d7888c9fdc088e02","modified":1474189639673},{"_id":"source/freeRTOS/入门/通信机制/计数信号量.md","hash":"6f4fb1a552290f9bf4c811e866316e989a194343","modified":1474189636438},{"_id":"source/freeRTOS/入门/通信机制/递归互斥量.md","hash":"98aa2b75d5d3717cdb8dc648fefb8c2d06b56ba7","modified":1474189636440},{"_id":"source/freeRTOS/入门/通信机制/队列.html","hash":"6132bb38693007ff241ed77e9702b6a57053c5aa","modified":1474189639161},{"_id":"source/freeRTOS/入门/通信机制/队列.md","hash":"14ed20e68a43728e4e9fe048817ec1f8b8b8b65b","modified":1474189636441},{"_id":"source/freeRTOS/进阶/高级/中断延迟.html","hash":"0ddb5215d426ab950d1f9c9c7743a0e8cc88ac54","modified":1474189642114},{"_id":"source/freeRTOS/进阶/高级/中断延迟.md","hash":"ef073afd2bac255a0433931ee0661ff342a3c88c","modified":1474189636456},{"_id":"source/freeRTOS/进阶/高级/低功耗支持.html","hash":"097eb24f2630b085349e70e421a612aed3d76e49","modified":1474189641622},{"_id":"source/freeRTOS/进阶/高级/内存管理.html","hash":"ba15f72a61e73d3579be436e4c1b37e829b4cc42","modified":1474189642609},{"_id":"source/freeRTOS/进阶/高级/低功耗支持.md","hash":"01405fed7407e424480c21748ae763d6cdc23484","modified":1474189636458},{"_id":"source/freeRTOS/进阶/高级/内存保护.md","hash":"47c02e131012bcc75e53dc91a4ca265ea47a728f","modified":1474189636459},{"_id":"source/freeRTOS/进阶/高级/在windows上模拟.md","hash":"0aa202792f67e8f4c807c8e70c658d70bb264d2d","modified":1474189636461},{"_id":"source/freeRTOS/进阶/高级/内存管理.md","hash":"ca05c9cfec3f659f9d4faa41526e7938f97bb628","modified":1474189636460},{"_id":"source/freeRTOS/进阶/高级/栈溢出检测.md","hash":"dd987179b598bd62d72e7c7138d1fb9f1e77f0e9","modified":1474189636464},{"_id":"source/freeRTOS/进阶/高级/移植指南.md","hash":"23166a9cf4677d4213b8b8ff5fd8f902662e7081","modified":1474189636466},{"_id":"source/freeRTOS/进阶/高级/栈溢出检测.html","hash":"d6633d5c5bfd5c6e85aa6a337cfbfc18d45c40de","modified":1474189642752},{"_id":"source/freeRTOS/进阶/高级/移植指南.html","hash":"cc87cfa315fd8ae835d690c8382e5cce3735f99e","modified":1474189643262},{"_id":"source/freeRTOS/进阶/高级/线程本地存储.md","hash":"770122e95f239e99812f075e6d390aba0133fb1c","modified":1474189636467},{"_id":"source/freeRTOS/进阶/高级/线程本地存储.html","hash":"07a963dadebb4176f924cc1b58e561dd782d13e4","modified":1474189643032},{"_id":"source/freeRTOS/进阶/高级/跟踪特性.html","hash":"ccff9580ad45aba3bd4b288ebda2402c3a7c2f46","modified":1474189641422},{"_id":"source/freeRTOS/进阶/高级/运行时间统计.html","hash":"9c6c71aae7ffb5e9303a5a514894ad5571bad2cb","modified":1474189641773},{"_id":"source/freeRTOS/进阶/高级/运行时间统计.md","hash":"d28521bee3a2fd78546a6d1a2b5c90b9cd64c610","modified":1474189636469},{"_id":"source/freeRTOS/进阶/高级/跟踪特性.md","hash":"c681ed59944d85617894b017d84d5e7c180c9816","modified":1474189636468},{"_id":"source/freeRTOS/进阶/高级/配置文件.md","hash":"02dc0f190937d731ab8088e7474155bd1b50e591","modified":1474189636471},{"_id":"source/freeRTOS/进阶/高级/钩子函数.html","hash":"fcc5cefa61b65eece0f1308f027ac1b0fa963222","modified":1474189642899},{"_id":"source/freeRTOS/进阶/高级/钩子函数.md","hash":"b08dd1eed9de9a106179fe59fb92054f1200dfe3","modified":1474189636475},{"_id":"source/freeRTOS/进阶/高级/队列集合.html","hash":"1ea08da46e3201e21315447508e50ccf6204e772","modified":1474189641957},{"_id":"source/freeRTOS/进阶/高级/队列集合.md","hash":"a114e952357eb0c8ddca282af811f961ae260b64","modified":1474189636476},{"_id":"source/freeRTOS/进阶/高级/静态分配与动态分配.html","hash":"23f3326f217374e20264c85488f7960db0823b9d","modified":1474189642312},{"_id":"source/freeRTOS/进阶/高级/静态分配与动态分配.md","hash":"9235398903e77f57a87e6a7be3c48fb72bd2a550","modified":1474189636480},{"_id":"themes/private/.git/objects/0b/aa26edfc33346681061d5ef4af60f4af5f85df","hash":"fa032c18b9a81d4ac52eb2a951376512fb7128d9","modified":1474966945389},{"_id":"themes/private/.git/objects/06/e45d6dc2f98696f4f6127d9c0937972ffb87ec","hash":"2d99c320847f084edaa15005f9cdcd220bd28adf","modified":1474966945289},{"_id":"themes/private/.git/objects/05/ae9765efba7a166381a57749ad6d7ac0e2c67d","hash":"b011ffbe2405a25b5902f9666424ec222df8fc75","modified":1474966945325},{"_id":"themes/private/.git/objects/20/5806ab36a6ee92cbef64937b21b5e8ed2412e6","hash":"53f5992710cbffc26b8235d23b8daba53726c89a","modified":1474966945319},{"_id":"themes/private/.git/objects/12/3ee76783802b7c46dc6302625ab1ad362a4626","hash":"aabcdd912fa5fc12eadccd9c16ec2d459b58ac29","modified":1474966945401},{"_id":"themes/private/.git/objects/1f/4b86298e2ce7df0c35184068146fa03b061c08","hash":"89c33138d0a36ec9c4123ea96017e0052f672762","modified":1474966952143},{"_id":"themes/private/.git/objects/14/9bc2daafccaf175996775b23872f553f0ef8a0","hash":"9396aad1daef77069244e6219b2246f2d497d9e9","modified":1474966945314},{"_id":"themes/private/.git/objects/09/a225fcb3cd3d7030d4f9d636e1e453ffae88a5","hash":"e521e6e8f60bcb79cc4f9f029dc21837eb8eb05b","modified":1474966945649},{"_id":"themes/private/.git/objects/2a/f940427b3d6ddc0bd87acfadc2ac4d72786b29","hash":"1d88ee59a8400c1faf7256c8f66fdb1d60572b47","modified":1474967125212},{"_id":"themes/private/.git/objects/19/3ddfee8cb0d90a61db250107e4d793c11329bc","hash":"e33fdc2986c1e54e8176c175fb4f0af9da54ea2f","modified":1474966945501},{"_id":"themes/private/.git/objects/0d/0bdede17552e9664b44c2d7007383051198ffd","hash":"2cf7ed6716c5864f3e0303ebbff5a4b528b136a4","modified":1474966945625},{"_id":"themes/private/.git/objects/2a/e6ef0509cb93f8793879737168ba4f9f3df45a","hash":"9041601bb14b815bed94c0974ec246f671973c9b","modified":1474966945395},{"_id":"themes/private/.git/objects/28/d8aa463113ae90da5f041ded808f04649e2c59","hash":"aa24a860060f80ddc86fbd58961719838b3ebd60","modified":1474966945307},{"_id":"themes/private/.git/objects/38/78815479d60d68b5b1796274c2436295163d76","hash":"b5558606748bbb2dcd64ee522ef9af072438ca72","modified":1474966945442},{"_id":"themes/private/.git/objects/35/35a346a69eb6bedf2f589d3685852ee41e8f8c","hash":"b897008016b0929e51594c543ab952a8f33e1f1c","modified":1474966945603},{"_id":"themes/private/.git/objects/34/669299ec7b1d5acdc0ccce106b4c6d6b38faa2","hash":"eabf3a8a153a71d6c1874f50466c11d8be034fb5","modified":1474966945436},{"_id":"themes/private/.git/objects/34/d59c1345b0cb63f21c4190297796352cb7a020","hash":"3600924bdb4a998b2d7dddf7ff8fe28020c1a673","modified":1474966945383},{"_id":"themes/private/.git/objects/35/d42e808f0a8017b8d52a06be2f8fec0b466a66","hash":"78537d1ed6c5d74a9db86a7c127b3d0fccb15b2f","modified":1474966945527},{"_id":"themes/private/.git/objects/31/98c4bc5e2022cc69b9017616592445727aa169","hash":"6554dced461e8bf2161088da373552d49cc81fe1","modified":1474966945467},{"_id":"themes/private/.git/objects/42/08c92f7374f653f5090d30e583630538099962","hash":"e07b725b9ad5199ccfcd5d9c33a28c737fadb1fe","modified":1474966952075},{"_id":"themes/private/.git/objects/47/38ed60e6de3ae66a682ee6e99b40af8332da22","hash":"2c18c84732b485bb0ec6ebb9ef7d4bcda3f4ac05","modified":1474966945370},{"_id":"themes/private/.git/objects/43/d5afe36fce01b6565550bf7ba460a8e9ec04aa","hash":"bdb3c1e7ded3a6420678c88f703aed32dc90bf3e","modified":1474966945364},{"_id":"themes/private/.git/objects/4b/825dc642cb6eb9a060e54bf8d69288fbee4904","hash":"f9acaead3e977c3d0fb7ad604631d5d838950772","modified":1474966928355},{"_id":"themes/private/.git/objects/58/bf8c865ce0e350fccf75ad49ae8896a177ed59","hash":"61d45a4ea4353504805cccb2361600a7fb66f638","modified":1474967125196},{"_id":"themes/private/.git/objects/54/901eff5c9c94f3ca3b11acd80048a1dcf9adc5","hash":"0d4bb751a83c465a70c97d1c9a5e9a417ccc8c2d","modified":1474966945425},{"_id":"themes/private/.git/objects/55/d4757ddf995bcaebd43b1067cbb651ff8344f5","hash":"4de629b9a5d38837cca0e7d790210c8a033f1ba8","modified":1474966952122},{"_id":"themes/private/.git/objects/88/baa25fbee54db62cf05201c42d463096c14d44","hash":"265dd32b2c9a9c4c5772eef13bb901e9c1ee0e8b","modified":1474966945455},{"_id":"themes/private/.git/objects/69/b0f88510726f4d88eea5524c6064dafa162978","hash":"a4b53c3ed27d0e224be5e33536941d23ae31b0b1","modified":1474967122060},{"_id":"themes/private/.git/objects/7d/ef5e71eeadc93e11b8adf55de3d541a58062df","hash":"ca087364626a82c17c1d02eb4050f17707f244d1","modified":1474966945631},{"_id":"themes/private/.git/objects/87/6cd4a9123c09a6873fb3a9a091b75b3c14f228","hash":"95f93fbfd20dba57edd1081e8f4e503703165700","modified":1474966945331},{"_id":"themes/private/.git/objects/4e/1ea9d7bdf12d208aea008bcfd77b61b9773676","hash":"4008f233fb759e19b748693555a3be40901a2a55","modified":1474966945643},{"_id":"themes/private/.git/objects/76/51cb8b49d2656282d1e9e2e637676278f057d4","hash":"c9cf5e559a1f749a23a10a48da5e8cdd76411c9c","modified":1474966952092},{"_id":"themes/private/.git/objects/8b/1d392408147834387766c9212cffbf549fb0d4","hash":"143c192d43ecfe831e7e1c311a00c56d470b2845","modified":1474966945568},{"_id":"themes/private/.git/objects/60/c11c64730cddc77b25fcf188352a0d50cdd273","hash":"acbdf9fd005936fab428f29cae4ba078e641c8a9","modified":1474966945461},{"_id":"themes/private/.git/objects/92/05aeb09fffa6b571b4c6beee30b18400829c03","hash":"7108489bba664f36612804a465c2910a6efe85a8","modified":1474966945541},{"_id":"themes/private/.git/objects/61/fb1c657c85d1923c1e4da8a7537981bc0df5d4","hash":"85eb8681f12e70fc06ae697c4330c7001ed5504f","modified":1474966945411},{"_id":"themes/private/.git/objects/61/70aa51cc410867063a5ed3b5886bff246038c8","hash":"d4d72d143a97047a8952a3f1177ba8fbf3363c1b","modified":1474966952081},{"_id":"themes/private/.git/objects/98/f5c5349b929dec959f2d5e8985466ac9c8a6d0","hash":"60fe576cdef56e0871c71606d143ac7ce02ed9b6","modified":1474966945431},{"_id":"themes/private/.git/objects/96/fd57fdcf3dccd947247bb1454337b6e5d41ddd","hash":"854c6b9136e0373d9d2ca08fb75c50ee91cfe857","modified":1474966945597},{"_id":"themes/private/.git/objects/a3/24d1de5920f8e5d486ea7f9674e2e83a008986","hash":"6e352f32cee76c31c2a021db6389d25137e85c95","modified":1474966952068},{"_id":"themes/private/.git/objects/93/ca5c054d617545817b72e1871adaae42f9de7f","hash":"536638f5621dc8d7e97a13e723b4c7d1009689fc","modified":1474966945295},{"_id":"themes/private/.git/objects/a4/26111e66b09c1bd23b2c1cfe6ac5b117bbef14","hash":"5dac65041fbced721e803bd9c6b9abac78f80c92","modified":1474966952087},{"_id":"themes/private/.git/objects/bc/325cbd43c4955c20f7f9c5a2bd46500f0b62ad","hash":"551c9c947804604904a3cc69442f227181456207","modified":1474966952110},{"_id":"themes/private/.git/objects/af/a66d9a34cf6e4b776a7a79046691834cdccc88","hash":"fde3d60dbf898bd8e5dc8cb2acf027ae83ce4424","modified":1474966945637},{"_id":"themes/private/.git/objects/a0/3a40c097ee728709f65d4ea7397903a389d484","hash":"260ab091942f1d6279b3933b22db30b5efcc9d50","modified":1474966945534},{"_id":"themes/private/.git/objects/61/3ffaf04cdbf61732e8767cc54274d38c461201","hash":"035acab8b17556e9d570b3cb5c44ae5fb45b2f59","modified":1474966945302},{"_id":"themes/private/.git/objects/c7/9362420f31a808a5ff247577c55e3603c328cb","hash":"2403d0afcbab018106c66eac56a74d41eb5444c4","modified":1474966952116},{"_id":"themes/private/.git/objects/a4/391396a9d6b6d7ff3b781f16904732fea40bdd","hash":"20fc3d5b4c6f0f72a178e61d15a8589bf475678d","modified":1474966945548},{"_id":"themes/private/.git/objects/b4/2b12d0579a08e29ae9135d1c646205a417bbc9","hash":"cae373fb444785050364e163ef22445f4e0c7105","modified":1474966945337},{"_id":"themes/private/.git/objects/c3/716fdae6b53b7b1df2ef778a23459e531dcfd2","hash":"34df60f59afbe144a38ca02460500e165e2cd10e","modified":1474966952098},{"_id":"themes/private/.git/objects/b8/1357d0b83e8eaac950f8a5c84e50199f288197","hash":"d2482896b8c157a43e2b007ff1fd1e99a246437b","modified":1474966945488},{"_id":"themes/private/.git/objects/cb/4d631bab39eacfae332944548e3e75e3bd2fad","hash":"4c8cec0d24b9e717fab610118817910c2e1c5523","modified":1474966945479},{"_id":"themes/private/.git/objects/cd/9354a8468dcaad1612a9accbf8ba43e73ceff8","hash":"7ef0d04ded3705846b21afc0eb3d4cb642740616","modified":1474966945418},{"_id":"themes/private/.git/objects/c4/423d4e0a006b46e8871ecf6750c6efedfdd201","hash":"f35c2e85d7fa406de9dfcef94c31dfadd77395ce","modified":1474966945508},{"_id":"themes/private/.git/objects/dd/44371e8a46709647e61d895e0b3b6be8afa447","hash":"c7d781b94a59da740f20d8f8e139ec5d5509c972","modified":1474966945448},{"_id":"themes/private/.git/objects/c9/6f7b54613d0d832a63b4f4062b6ad92cc1a99a","hash":"7f57fd5b5f88ac9502592a3af106c29871f52e6e","modified":1474966945344},{"_id":"themes/private/.git/objects/ba/9f12c08eed716de418b40d91e9dce12fc04013","hash":"abe0e71cc7341b697a25ccd9a78b4d54a682c8da","modified":1474966945522},{"_id":"themes/private/.git/objects/cc/fc20c05d04c784e01b46b82a6fbc40a6ef7fa9","hash":"7ee455e7a4c3a6a7a5d8ba737b1768f26d2908eb","modified":1474966945514},{"_id":"themes/private/.git/objects/db/dde44fdd4951e2d55397c93a63898a0f5241e5","hash":"c8f8702f385f3709e8721fb56f2e9cd66a56518d","modified":1474966945377},{"_id":"themes/private/.git/objects/ec/232b46a92d50959136a866f72c1353983d4d8e","hash":"028a911cfabd746278a376aa4c6e1d0ed4a7633f","modified":1474966952128},{"_id":"themes/private/.git/objects/d0/e4779f4bed43fe339f0cf1eb045d8cb9430c87","hash":"89fdecf64fedf2cca040f73464d56ef834945733","modified":1474966945560},{"_id":"themes/private/.git/objects/e8/d4ae2157aa98ba211050db2e1cc93519654340","hash":"cff47214224a0f0d262c9e3a3f018923b4c258c3","modified":1474966945611},{"_id":"themes/private/.git/objects/ef/eef3c900a55e4cf219328061d52a774ba279f9","hash":"58d30453eb503a7b17f3672c93f199641c5dcb99","modified":1474966952104},{"_id":"themes/private/.git/objects/f3/53159659910c2ae7148762d986a43ab584310d","hash":"6271f4fa77c40ecacb85bd032fbc7ebb37fb789a","modified":1474966945351},{"_id":"themes/private/.git/objects/ee/cb74b16dd3a5cb65b17dafefad46adb617031a","hash":"373ae6c5a193266c7e926718258e12b8311f0f1e","modified":1474966945473},{"_id":"themes/private/.git/objects/ed/eda019eb24816bf7342bc380f50045560fd846","hash":"05e16d026eb06ed10a0c93cc7b131d3503fb168f","modified":1474966945406},{"_id":"themes/private/.git/objects/ec/71eea3454d62f013ee075eaa09d71ac363f109","hash":"6ab165be484c7f8b5d011d4327c1edf24aa945f7","modified":1474966945588},{"_id":"themes/private/.git/objects/e7/87be31bf201af33b5c33be1cd42ecb5cda8566","hash":"1477cdb9a65ca7adaed4de0968423765f3d080c4","modified":1474966945619},{"_id":"themes/private/.git/refs/heads/master","hash":"2044a28379f8212ce0293769b31a24dc9ba7392c","modified":1474967125221},{"_id":"themes/private/.git/objects/ed/81467f0f280dc2d3e421edf50321e56edbc66a","hash":"e636ad82f4e1194657b2cdc8fe2559f36bb283b8","modified":1474966945357},{"_id":"themes/private/.git/objects/f6/f1a896f2a60cb86b553ba8294b71e7fe84aeaa","hash":"4a932406171f2a2d16f462b4f731f26d3f34b1ef","modified":1474966945495},{"_id":"themes/private/.git/objects/fd/8d5ca566d47a77d9562168617bb2f6482bf9be","hash":"93d5b016ddd99f514ae6e718357d83f14e22077a","modified":1474966945554},{"_id":"source/day/qixi/2016/love.ico","hash":"bfe831b13caca314b419b6665d18d5903278558b","modified":1471405258502},{"_id":"source/freeRTOS/进阶/高级/配置文件.html","hash":"50faee4c3190f2d9d833630f38fa70153cef6561","modified":1474189641238},{"_id":"themes/private/.git/objects/4a/5bb623d9212a4726f3eebfeeaeff49f6aaf1ae","hash":"cb932f82036a982a2da2b5247f9c6a22e1bff002","modified":1474966945582},{"_id":"themes/private/source/img/body_bg.jpg","hash":"7a00024fe2b3cbaf78d21941a231d01495e2bcec","modified":1476253675525},{"_id":"source/day/ertongjie/2016/css/style.css","hash":"fcb0d82388b60933e937c8834f30a389a75df9a4","modified":1471405258502},{"_id":"source/day/qixi/2016/css/default.css","hash":"28cee4a08f2feb5c17d5e5489159fd2c7014f43a","modified":1471405258492},{"_id":"source/day/qixi/2016/css/default_dev.css","hash":"d2d3b600cfed6ad281fb0b70aae269486256fba9","modified":1471405258492},{"_id":"source/day/ertongjie/2016/css/css.css","hash":"a7566bf2c8d32466dcec61174531ee442be259bc","modified":1471405258502},{"_id":"source/day/qixi/2016/js/functions.js","hash":"c26e2f95efd182c4725d88c6d4259e8bf3def511","modified":1471405258502},{"_id":"source/day/qixi/2016/js/garden_dev.js","hash":"2f58af3d20e2b953a1efd52c2166b97a51bd7124","modified":1471405258502},{"_id":"source/day/qixi/2016/js/functions_dev.js","hash":"080692642c5a0ec8003c962fa6503a8c7c0d82f1","modified":1471405258502},{"_id":"source/day/qixi/2016/js/garden.js","hash":"61bd975ce15a4428a17ce384fae72cd433f93075","modified":1471405258502},{"_id":"source/day/zhongqiu/2016/alert/sweetalert.min.js","hash":"b43ebfa7e6701b0064ee38b4b219bda278404a8f","modified":1473691130791},{"_id":"source/day/zhongqiu/2016/css/myStyle.css","hash":"84fbbb9f0e1996af0900cb10c0eaeebfb7efed9c","modified":1473744027874},{"_id":"source/day/zhongqiu/2016/alert/sweetalert.css","hash":"ceaedef36025201a31576bfa89f2be470387ae88","modified":1473690662815},{"_id":"source/day/zhongqiu/2016/img/3.jpg","hash":"cc1405e52f6d482e3903df0fa623f277738bbaa2","modified":1473406973480},{"_id":"source/day/zhongqiu/2016/img/jin.ico","hash":"775f6c4f2f6dc3eee0a5a93514110a2305611769","modified":1473594419050},{"_id":"source/day/zhongqiu/2016/img/tgc.ico","hash":"40afcb86c14b74cbe9e9ba4c0ad143e6a221eb8c","modified":1473595759486},{"_id":"source/day/zhongqiu/2016/js/backgroud.js","hash":"4d3c68d0113b8c02a8f541e7ba7e6878580a10f7","modified":1473782380628},{"_id":"source/day/zhongqiu/2016/js/myJs.js","hash":"4275bccbca8ec2801fad9f9ed305f5161b6486c2","modified":1473778571961},{"_id":"source/day/zhongqiu/2016/toast/toastr.min.css","hash":"816bbea7885a8805a4e55273654a766401ccb5b0","modified":1473659732057},{"_id":"source/day/zhongqiu/2016/toast/toastr.css","hash":"678649ea4e920e7125e927770feb019b7b126adc","modified":1473647449828},{"_id":"source/day/zhongqiu/2016/toast/toastr.js.map","hash":"8676f6051f8fc1df84bd69ecc2671e3ef9b35400","modified":1473647449830},{"_id":"source/day/zhongqiu/2016/toast/toastr.min.js","hash":"24c89fbd4756c877e43a0a6d38d20df906c36335","modified":1473664875423},{"_id":"source/day/zhongqiu/2016/vegas/vegas.min.css","hash":"5810e20875386f98565b69de5ca8ee1d0a6d1feb","modified":1473411644607},{"_id":"source/day/zhongqiu/2016/vegas/vegas.min.js","hash":"f3a641966688c073e78ee2d28deea855ebe45848","modified":1473406403686},{"_id":"themes/private/.git/logs/refs/heads/master","hash":"cb80f6226cc4b27a8b1776e652204325c5eddbb4","modified":1474967125225},{"_id":"themes/private/.git/refs/remotes/origin/master","hash":"2044a28379f8212ce0293769b31a24dc9ba7392c","modified":1474967133549},{"_id":"source/day/ertongjie/2016/js/jquery.min.js","hash":"e6082a7b52db82604ac446d2e6a32cb5af263781","modified":1471405258552},{"_id":"source/day/qixi/2016/js/jquery.js","hash":"6ab320a0421a75731233a3f6ec4f4f906b903dac","modified":1471405258502},{"_id":"source/day/zhongqiu/2016/alert/sweetalert-dev.js","hash":"f655706bb096584220c12aacde74ec197f1cd63c","modified":1473687266447},{"_id":"source/day/zhongqiu/2016/img/us.ico","hash":"e8bee712e640d66be57a2f6fb49c44c93d426933","modified":1473596015359},{"_id":"source/day/zhongqiu/2016/vegas/jquery.min.js","hash":"c72c1735b4d903d90dd51225ebefb8c74ebbc51f","modified":1473408880108},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1474189636382},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1474189636379},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1474189636373},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1474189636372},{"_id":"source/day/zhongqiu/2016/img/2.jpg","hash":"f879afa90f5ab2aba59657ef164a0885e69720b6","modified":1473406960654},{"_id":"source/day/zhongqiu/2016/lightbox/css/lightbox.min.css","hash":"80113ae1656a9e37e2db0eac20d97d111b179db9","modified":1450012830000},{"_id":"source/day/zhongqiu/2016/lightbox/css/lightbox.css","hash":"d6efbba2e2322636029d688f5c08793cd702ead1","modified":1473733920992},{"_id":"source/day/zhongqiu/2016/lightbox/images/close.png","hash":"3ca48361cfe0e41163023d03c26296f375bb3eac","modified":1450012830000},{"_id":"source/day/zhongqiu/2016/lightbox/images/loading.gif","hash":"cf720b50cf8dde0e1a84ce1c6a77788bfc5882d5","modified":1450012830000},{"_id":"source/day/zhongqiu/2016/lightbox/images/next.png","hash":"777e92c050f600b4519299c3d786b8f2f459fea4","modified":1450012830000},{"_id":"source/day/zhongqiu/2016/lightbox/images/prev.png","hash":"6640a3432f7ba7aea6129cdf7a5d3eabd47c295c","modified":1450012830000},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox.js","hash":"58ef87e17f6ec2e39acd7487d4852670ca12b784","modified":1450012830000},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox.min.js","hash":"12a3fd559dfede768d2cca5014634d55f343493f","modified":1450012830000},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox.min.map","hash":"5f699bf12c01525aa6f9238d94a7fb33d880313b","modified":1450012830000},{"_id":"source/day/zhongqiu/2016/vegas/overlays/01.png","hash":"7c046ea4b1669da4eb81acccd7fc58b00201543d","modified":1473406403691},{"_id":"source/day/zhongqiu/2016/vegas/overlays/02.png","hash":"9775bb2755b51c9eb03a3057eaf3914dc3149a6b","modified":1473406403696},{"_id":"source/day/zhongqiu/2016/vegas/overlays/03.png","hash":"c284f2c9ece402ccc1301b4301252476864235c0","modified":1473406403700},{"_id":"source/day/zhongqiu/2016/vegas/overlays/05.png","hash":"8d9fe47653c2615fd4a1e861e882e2efdb0f34a0","modified":1473406403718},{"_id":"source/day/zhongqiu/2016/vegas/overlays/04.png","hash":"2816672fcbef8e08b431d600f26b119e2122eaa6","modified":1473406403709},{"_id":"source/day/zhongqiu/2016/vegas/overlays/06.png","hash":"9d566536e859c18075d00e7f8cd6c490d310c089","modified":1473406403721},{"_id":"source/day/zhongqiu/2016/vegas/overlays/07.png","hash":"078e49f4fa97e117da76cbef2b492e8cf92d0d45","modified":1473406403724},{"_id":"source/day/zhongqiu/2016/vegas/overlays/09.png","hash":"4d1c1ec2c710745ddcc43fdd0ae41d3095398a77","modified":1473406403731},{"_id":"source/day/zhongqiu/2016/vegas/overlays/08.png","hash":"b3916a95cb81602b7bd41eaefa92eb3a8fd39b70","modified":1473406403727},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1474189636375},{"_id":"themes/private/.git/logs/refs/remotes/origin/master","hash":"c9c4cb0323bdb5cabcd701e03bdf7b88f66fa3b5","modified":1474967133553},{"_id":"source/day/zhongqiu/2016/img/1.jpg","hash":"d2f5f425014d24f993b118ab77a04b6a03e8a48a","modified":1473406941729},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.min.js","hash":"2dc67c67e5deeeea7e78199f752c77b8a9f33bfa","modified":1450012830000},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.min.map","hash":"54ee3abbef420bde28f0e39ea83e40c9a15110ad","modified":1450012830000},{"_id":"source/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1474189636377},{"_id":"source/day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.js","hash":"4fe5da488fce9dac11c007b48bb21aae97a3e24f","modified":1450012830000},{"_id":"source/freeRTOS/search_index.json","hash":"0817f25f8b5694c5ff12cf88b57559e041c3b5a1","modified":1474189643332},{"_id":"public/atom.xml","hash":"9e3a126847d5d912c76de697a120cc53ba2f89a1","modified":1491440658780},{"_id":"public/search.xml","hash":"89451681e219c56eccaed3d729158b7d022b1440","modified":1489556127823},{"_id":"public/content.json","hash":"853993b10d1693da8e242b81863bde194e76ed9a","modified":1491440658990},{"_id":"public/sitemap.xml","hash":"f1ecb379a482304115f0e030ac8abf4dfdeca550","modified":1491440658980},{"_id":"public/404.html","hash":"707de353f230cc5ae66e5d832ca34bbc08b03d9f","modified":1489556127841},{"_id":"public/about/index.html","hash":"9182f13945015e348ad8cd3651da16a6ec28d115","modified":1489556127841},{"_id":"public/categories/index.html","hash":"2bd26e7e71ddb8d3e9a8a591086e0a795bd06320","modified":1489556127841},{"_id":"public/holiday/index.html","hash":"65336a550b715418987e86d346388ecc59187f9d","modified":1489556127841},{"_id":"public/tags/index.html","hash":"e863dae7d6374a14f3be6a89b81d1f21d98c939b","modified":1489556127841},{"_id":"public/2017/01/10/2017flag/index.html","hash":"658ffb5e261a9d6ffd540d5191d37859772f245a","modified":1489556127841},{"_id":"public/2016/11/28/STM32-NOTE/index.html","hash":"9d627ae54fc8ec626763ae955e911374d4475579","modified":1489556127841},{"_id":"public/2016/10/12/ARM-Addressing-Mode/index.html","hash":"c09ba45e10477553db84ed88fa62a125098b7a30","modified":1489556127841},{"_id":"public/2016/09/23/startEmbeded/index.html","hash":"529e97248d4f0264e05c5a4cf88b8e205cd4ecac","modified":1489556127842},{"_id":"public/2016/09/19/keyLongOrShort/index.html","hash":"1c836e9551af403a1b896413d53d077ecd0cda9b","modified":1489556127842},{"_id":"public/2016/08/29/freeRTOS-CN/index.html","hash":"c7b039df1d21b57b423afe9d5b3ee5c735ec5a52","modified":1491440659003},{"_id":"public/2016/08/22/CSharpKeyWords/index.html","hash":"16d21c7f249c95adb04df14cb217d06ff37cd4b4","modified":1489556127842},{"_id":"public/2016/08/08/STM8-REST/index.html","hash":"351add8f813b3d82f438b85d795839516d3a26db","modified":1489556127842},{"_id":"public/2016/08/08/STM8-Memory/index.html","hash":"9b636596b0b4d739a17d3c6db3743363884b75f6","modified":1489556127842},{"_id":"public/2016/08/05/STM8-CLOCK/index.html","hash":"3dbd7f4766ce4188cb683ea8c63f6f3a362968c5","modified":1489556127842},{"_id":"public/2016/08/05/UART/index.html","hash":"c0b9e0dc1c7da992a207942c108466b14f435f4f","modified":1489556127842},{"_id":"public/2016/08/04/STM8-GPIO/index.html","hash":"ad5a3869844300dfcd8f09a06cc1468df3e27338","modified":1489556127842},{"_id":"public/2016/08/04/STM8-Summarize/index.html","hash":"8403908c249cd1c52cb509761dc6f922f3f0c93d","modified":1489556127842},{"_id":"public/2016/08/03/MBusAndDTL645/index.html","hash":"c774c4d746ec33a9eb7547febb6401ef8b5d2282","modified":1489556127842},{"_id":"public/2016/08/03/SPI/index.html","hash":"7327ec70f0054f5056a24877cd9a7db1cec8047e","modified":1489556127842},{"_id":"public/2016/07/28/howToNameYourCode/index.html","hash":"5a52a1e72e6f82bf443d3985f71753744d7b7b2e","modified":1489556127842},{"_id":"public/2016/07/27/updateAssistant/index.html","hash":"ef96fb510883ac0830ef8d1fa33004c1e28e69ec","modified":1489556127842},{"_id":"public/2016/07/21/ASCII/index.html","hash":"6d5cc73433afa17f5f3393e82efebb65bccdba72","modified":1489556127842},{"_id":"public/2016/07/19/CSharp/index.html","hash":"b1ec563d1d2bff1fa95b3d011d2c65981ed73281","modified":1489556127842},{"_id":"public/2016/07/14/Keil&C/index.html","hash":"50c5364acd79b615be3ba90935dc6ac06e6aa185","modified":1489556127842},{"_id":"public/2016/07/14/bootloader-Caution/index.html","hash":"e16006f5a1f8f158c18d0cf6666b420be6666749","modified":1489556127842},{"_id":"public/2016/07/06/simple-bootloader-for51/index.html","hash":"3cc39bf457981c063fab99c8b494a4cdb0e8ee22","modified":1489556127842},{"_id":"public/archives/index.html","hash":"29f848d42cac757d5d288334c4a63aa3ccda34d1","modified":1489556127842},{"_id":"public/archives/2016/index.html","hash":"59d99ef3a553acab3175aef4d5f31602145a029a","modified":1489556127842},{"_id":"public/archives/2016/07/index.html","hash":"4b426db16d94d755f91e1fc960067a1bfecce719","modified":1489556127842},{"_id":"public/archives/2016/08/index.html","hash":"238a3ac534a09ae12155287b5de896daf4810545","modified":1489556127842},{"_id":"public/archives/2016/09/index.html","hash":"e0464baedf551b42128d3eea19105aa88d3ef58e","modified":1489556127842},{"_id":"public/archives/2016/10/index.html","hash":"b7245267260c505504b898a1cbb0d8e578c930d3","modified":1489556127842},{"_id":"public/archives/2016/11/index.html","hash":"d5b604077f4f5c88bae0a6c254272d9141fe7ee8","modified":1489556127842},{"_id":"public/archives/2017/index.html","hash":"88979c84cc5c50361acf4d91c11d1a35c061ce9c","modified":1489556127842},{"_id":"public/index.html","hash":"b83f4d8a5928ebdb530a27277cdbc923a26c4d98","modified":1489556127843},{"_id":"public/archives/2017/01/index.html","hash":"33b2cc64f37ed660bda4f1ce3975f0dc26f510e9","modified":1489556127843},{"_id":"public/archives/2017/03/index.html","hash":"57e79f8aea67dfa55e57a461597db9cad60749e6","modified":1489556127843},{"_id":"public/categories/2017/index.html","hash":"695bc5a168017338515fb1fb11a16225d2dbe4bd","modified":1489556127843},{"_id":"public/categories/others/index.html","hash":"47a7a5d962d69fe083206ed04fe84c58d21328ba","modified":1489556127843},{"_id":"public/categories/C/index.html","hash":"91bd1c93fa997261fe6029dd13a15d350482a6f3","modified":1489556127843},{"_id":"public/categories/总线协议/index.html","hash":"1a9de3cafdede9ad6f9c0d50920cfbc08f1dddbf","modified":1489556127843},{"_id":"public/categories/STM8/index.html","hash":"321b4609c2e1e35368579069513848c602d50668","modified":1489556127843},{"_id":"public/categories/bootloader/index.html","hash":"cfda82e906f3d5bc7c999eeabae624d1a92802cc","modified":1489556127843},{"_id":"public/categories/单片机/index.html","hash":"cd0bc451966619cb14312668206093928b47ab93","modified":1489556127843},{"_id":"public/tags/2017/index.html","hash":"695bc5a168017338515fb1fb11a16225d2dbe4bd","modified":1489556127843},{"_id":"public/tags/ASCII/index.html","hash":"8c2bbe992f94275950e00e4a2f46caf5db9418d2","modified":1489556127843},{"_id":"public/tags/ARM/index.html","hash":"33219d7482fe7783f6bb7f26ee66c9b38874784f","modified":1489556127843},{"_id":"public/tags/C-学习笔记/index.html","hash":"3a0248374efaee43cc3b1eb0d30e17b3eee3d80b","modified":1489556127843},{"_id":"public/tags/总线协议/index.html","hash":"5ab1d13972a3d4984528dfbdef8b793949064042","modified":1489556127843},{"_id":"public/tags/MBus-DL-T645-2007-电能表通信协议/index.html","hash":"251b5a3abc5c38f51fd7980bca432be69d528f0f","modified":1489556127843},{"_id":"public/tags/keil-C/index.html","hash":"4b15645133b1b0ebdb65583fc985e6361ed280b1","modified":1489556127843},{"_id":"public/tags/STM32/index.html","hash":"58fe743bea756a0616e70c7cb42a5841f1ea4414","modified":1489556127843},{"_id":"public/tags/STM8/index.html","hash":"321b4609c2e1e35368579069513848c602d50668","modified":1489556127843},{"_id":"public/tags/数字电路/index.html","hash":"eba3669d91397687aa4d8d190dfa6e3dd1390352","modified":1489556127843},{"_id":"public/tags/嵌入式-单片机/index.html","hash":"eea895b44e08f8bf35c988c54beb214045d8744a","modified":1489556127843},{"_id":"public/tags/按键识别/index.html","hash":"4a1b558b23cc3f81581d0112852ad07a282772de","modified":1489556127843},{"_id":"public/tags/freeRTOS-中文文档/index.html","hash":"c1c6f1766982ba620cc67603daf64908fcc5b9bc","modified":1489556127843},{"_id":"public/tags/UART/index.html","hash":"7f142407eb57455b45a387233203b035a05a522a","modified":1489556127843},{"_id":"public/tags/C-软件/index.html","hash":"3014987ffba3f369bfb84316333643963a5140e5","modified":1489556127843},{"_id":"public/tags/C-上位机-串口/index.html","hash":"f33e8d9404aaf77f4f5f6c2e2f5848535b97fb5a","modified":1489556127843},{"_id":"public/2017/03/14/SMT32_I2C/index.html","hash":"08eafc9daa60a370127e9c461b84629a83d8b66f","modified":1489556127843},{"_id":"public/2016/08/09/TTL-CMOS/index.html","hash":"958e7fa379197a3b8ea294ed826ebc3b225bfd7a","modified":1489556127843},{"_id":"public/2016/08/09/IIC/index.html","hash":"16b19a9c0a956d8291a0e755c89caa52f4476f1e","modified":1489556127843},{"_id":"public/CNAME","hash":"1a4255ab82f863ea5bab0e626c5c2ea39139c430","modified":1489556127844},{"_id":"public/favicon.ico","hash":"3a437badbfe168bd177499dc03a3b5db06d99d74","modified":1489556127844},{"_id":"public/google22b1faa3ba994fdd.html","hash":"00ce6923fa978a9bbc9ace6ee0936b6a9dec567a","modified":1489556127844},{"_id":"public/day/index.html","hash":"09260f89fc031b8f3c9b26ebbdd653cd42eceaa5","modified":1489556127844},{"_id":"public/freeRTOS/readme.html","hash":"6a44bf0a87a443f20665243b82f6a354b377ad65","modified":1489556127844},{"_id":"public/freeRTOS/gitbook/style.css","hash":"a264bb67a9ee9b27c72c6da23166ed51337fad70","modified":1489556127844},{"_id":"public/freeRTOS/index.html","hash":"dc16ac71b380bfc24d39acac1dd9d979cd995fc2","modified":1489556127844},{"_id":"public/freeRTOS/简介/freeRTOS介绍.html","hash":"8f4e5a60f9b4e5f472c2481694489f3019443f92","modified":1489556127844},{"_id":"public/freeRTOS/简介/快速开始指南.md","hash":"7355581e91004b032353f1f4b79a188220719d20","modified":1489556127844},{"_id":"public/freeRTOS/简介/编码规则和风格.html","hash":"f1685b057b7c10d7af85b2ad6de9a65172e3674c","modified":1489556127844},{"_id":"public/freeRTOS/简介/freeRTOS介绍.md","hash":"ee85c99e1264e920869214a9cccaadcd65c6d64e","modified":1489556127844},{"_id":"public/freeRTOS/简介/编码规则和风格.md","hash":"cf7c81d4a3aee5d11911238a90488a07f286363a","modified":1489556127844},{"_id":"public/freeRTOS/入门/readme.html","hash":"ae82104dd26a345ff45cfe1797fd4fc3d108309a","modified":1489556127844},{"_id":"public/freeRTOS/入门/readme.md","hash":"fb4b35ff571c8c9689944d8ec557afe32bf11380","modified":1489556127844},{"_id":"public/img/school.png","hash":"8f26268f7e1f46bb06831e8821d05972aaf1a910","modified":1489556127845},{"_id":"public/freeRTOS/简介/快速开始指南.html","hash":"0b81f598d70d0f3e2a021c8c50e742e0d93de334","modified":1489556127845},{"_id":"public/img/footer_lodyas.png","hash":"621df6061bb265361c3873522ea305c6b5ccaeaf","modified":1489556127845},{"_id":"public/freeRTOS/简介/许可.md","hash":"fe926bc509502d229902c5a2548492f7de390078","modified":1489556127845},{"_id":"public/lrc/suoxing.lrc","hash":"302c66a5f8771a422e870839e462610086eb00ba","modified":1489556127845},{"_id":"public/freeRTOS/简介/许可.html","hash":"c30e4498fd23069970115a614d29bc0e8b1c8229","modified":1489556127845},{"_id":"public/lrc/dujiajiyi.lrc","hash":"c6c398fbbaab48e644f25101b0fb1d5078efe69a","modified":1489556127845},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489556127845},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489556127845},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489556127845},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489556127845},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489556127845},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489556127845},{"_id":"public/day/ertongjie/2016/index.html","hash":"cb522ea68bd21dfedf608ed5ddbd86cfd2fe397f","modified":1489556127845},{"_id":"public/day/qixi/2016/digital-7_mono.ttf","hash":"ea0659563eb80ed2a2ae70fade25fff131be22a4","modified":1489556127845},{"_id":"public/day/zhongqiu/2016/index.html","hash":"92dc2582ab23b2ce3277a3502038b81b94001e05","modified":1489556127845},{"_id":"public/day/qixi/2016/index.html","hash":"79313fb33148997f82f7ae489620a61e91af391e","modified":1489556127845},{"_id":"public/day/zhongqiu/2016/debug.log","hash":"d5e6ea15b92ffe54fb06708d000e7ede97d48d38","modified":1489556127845},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-duoshuo/duoshuo.js","hash":"6ed1587278d017b2f62839f02e7027c59caa2778","modified":1489556127845},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-ga/plugin.js","hash":"5a98c9804c4dd842ee21ee67a108482384da0680","modified":1489556127845},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-fontsettings/website.css","hash":"179fd22c67503ad740aba521b1ef423a9a0f7fed","modified":1489556127845},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-lunr/lunr.min.js","hash":"29ac71f4c9649224e5d7275104fa03dcc7a2cd27","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-lunr/search-lunr.js","hash":"b3147a1cf729034d159cfde66e09c24c31dc718f","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-prismx/prism-funky.css","hash":"600a878360cf22814b1a792851595a0c5e89f5b3","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-fontsettings/fontsettings.js","hash":"d685a2bcf6cbbade1fc43e7036bdc68551ffd379","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-prismx/prism-solarizedlight.css","hash":"8f0490f389a7e49bc3706a80911804fdf1b1b8c3","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-prismx/prism-okaidia.css","hash":"ff437e9ea20a1bedb0ed18ab05e5ee7f40f452e1","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-prismx/prism-coy.css","hash":"d5503843ed66d1462731f8aa8693ee110d87f9ba","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-prismx/prism-dark.css","hash":"871e0b745477c5b4acd87518270f046a840ce950","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-sharing/buttons.js","hash":"8b4eb87cc47127f0eb0c247ab83f44aa0da7426d","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/images/favicon.ico","hash":"2598b5cea7576b2c97db3f2906c378212412fb04","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-prismx/prism-tomorrow.css","hash":"2eb468e82b669045d37cb6b503af97dabc0a9eb2","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-prismx/prism.css","hash":"bed3a85b4fb53bc89e65e42ec62b9ce3e907fc80","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/images/apple-touch-icon-precomposed-152.png","hash":"5246e4190b7379427ada71483a0c6acde505e5ed","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-theme-comscore/test.css","hash":"dd9c8e7dea32b49538fdf17f7ace5b00c0f4040a","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-prismx/prism-twilight.css","hash":"aa76085d0e6c8bdf0c36624a175a77f46b55c49d","modified":1489556127846},{"_id":"public/freeRTOS/入门/任务和协程/readme.html","hash":"ce22f8e3df7dc16cef3378928bb0d60da139859a","modified":1489556127846},{"_id":"public/freeRTOS/gitbook/gitbook-plugin-theme-comscore/test.js","hash":"556f85ecfa434e67fe6f4bf16f1e2e274069d6ec","modified":1489556127846},{"_id":"public/freeRTOS/入门/事件组/事件组.html","hash":"978067c28c4909f0fa6458144434e44542f4425f","modified":1489556127846},{"_id":"public/freeRTOS/入门/事件组/事件组.md","hash":"f0850e027678d2a749aed619ba6240d6c30d68dc","modified":1489556127846},{"_id":"public/freeRTOS/入门/任务和协程/readme.md","hash":"6c1d664f896cbe1d18509c25610835cdc431261c","modified":1489556127846},{"_id":"public/freeRTOS/入门/任务和协程/任务.html","hash":"f7528fa0de737ce34f47a5cdc6570cd3f51de95a","modified":1489556127847},{"_id":"public/freeRTOS/入门/软件定时器/软件定时器.html","hash":"b61048d4ca6110bd2fb118d887b7cf85306c6875","modified":1489556127847},{"_id":"public/freeRTOS/入门/任务和协程/任务.md","hash":"c7009d11499b09049fc9b18f62742ef31e4e4fee","modified":1489556127847},{"_id":"public/freeRTOS/入门/软件定时器/软件定时器.md","hash":"f1f2269bd170fa784da56f5ebd7c186a307f9925","modified":1489556127847},{"_id":"public/freeRTOS/入门/任务和协程/协程.md","hash":"c1721e57083d45b665ea7f5f87e6813b16f3ef76","modified":1489556127847},{"_id":"public/freeRTOS/入门/任务和协程/协程.html","hash":"09cb998d2d481f315640596d34369beb8b5ee0d6","modified":1489556127847},{"_id":"public/freeRTOS/进阶/源代码组织结构/源代码组织结构.html","hash":"77085ba68b32f1237326bd4d8982f31955ea8c31","modified":1489556127847},{"_id":"public/freeRTOS/入门/通信机制/readme.md","hash":"97d8e81d4abacc393a31a54a221e4c79d90f8e45","modified":1489556127847},{"_id":"public/freeRTOS/进阶/源代码组织结构/源代码组织结构.md","hash":"b0ece248b8b80a5cf2213190a39de97b2b68b712","modified":1489556127847},{"_id":"public/freeRTOS/入门/通信机制/二值信号量.html","hash":"a2c2debb749fc1c28ff9c79dec46369bb9d74c38","modified":1489556127847},{"_id":"public/freeRTOS/入门/通信机制/互斥量.html","hash":"a635c6d689b88d86e972ead9533633107d4c22d0","modified":1489556127848},{"_id":"public/freeRTOS/入门/通信机制/二值信号量.md","hash":"228634d4475cae6695d895b93111c633a56d511c","modified":1489556127848},{"_id":"public/freeRTOS/入门/通信机制/互斥量.md","hash":"5e8e1ca35f7dc1a3a481a3dc28fb6bdd6b45ffdf","modified":1489556127848},{"_id":"public/freeRTOS/入门/通信机制/任务通知.html","hash":"c966d812c5509002d6f686c43a75b1be60d0ab5f","modified":1489556127849},{"_id":"public/freeRTOS/入门/通信机制/计数信号量.html","hash":"5a07b0d95bb1edc2a4c3aed0e9cf06f0c363cbb8","modified":1489556127849},{"_id":"public/freeRTOS/入门/通信机制/任务通知.md","hash":"9458762566b1a21f0f2d06350b6a077dea42b79c","modified":1489556127849},{"_id":"public/freeRTOS/入门/通信机制/计数信号量.md","hash":"6f4fb1a552290f9bf4c811e866316e989a194343","modified":1489556127849},{"_id":"public/freeRTOS/入门/通信机制/递归互斥量.md","hash":"98aa2b75d5d3717cdb8dc648fefb8c2d06b56ba7","modified":1489556127849},{"_id":"public/freeRTOS/入门/通信机制/递归互斥量.html","hash":"e68e06c0f0ee6b939db17cd5d7888c9fdc088e02","modified":1489556127849},{"_id":"public/freeRTOS/入门/通信机制/队列.md","hash":"14ed20e68a43728e4e9fe048817ec1f8b8b8b65b","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/中断延迟.html","hash":"0ddb5215d426ab950d1f9c9c7743a0e8cc88ac54","modified":1489556127849},{"_id":"public/freeRTOS/入门/通信机制/队列.html","hash":"6132bb38693007ff241ed77e9702b6a57053c5aa","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/中断延迟.md","hash":"ef073afd2bac255a0433931ee0661ff342a3c88c","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/低功耗支持.md","hash":"01405fed7407e424480c21748ae763d6cdc23484","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/低功耗支持.html","hash":"097eb24f2630b085349e70e421a612aed3d76e49","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/内存保护.md","hash":"47c02e131012bcc75e53dc91a4ca265ea47a728f","modified":1489556127849},{"_id":"public/freeRTOS/入门/通信机制/readme.html","hash":"968a22060e72c8c017465077c7697fa940d3b207","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/栈溢出检测.md","hash":"dd987179b598bd62d72e7c7138d1fb9f1e77f0e9","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/内存管理.md","hash":"ca05c9cfec3f659f9d4faa41526e7938f97bb628","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/内存管理.html","hash":"ba15f72a61e73d3579be436e4c1b37e829b4cc42","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/在windows上模拟.md","hash":"0aa202792f67e8f4c807c8e70c658d70bb264d2d","modified":1489556127849},{"_id":"public/freeRTOS/进阶/高级/移植指南.md","hash":"23166a9cf4677d4213b8b8ff5fd8f902662e7081","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/栈溢出检测.html","hash":"d6633d5c5bfd5c6e85aa6a337cfbfc18d45c40de","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/移植指南.html","hash":"cc87cfa315fd8ae835d690c8382e5cce3735f99e","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/线程本地存储.md","hash":"770122e95f239e99812f075e6d390aba0133fb1c","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/线程本地存储.html","hash":"07a963dadebb4176f924cc1b58e561dd782d13e4","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/跟踪特性.html","hash":"ccff9580ad45aba3bd4b288ebda2402c3a7c2f46","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/运行时间统计.html","hash":"9c6c71aae7ffb5e9303a5a514894ad5571bad2cb","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/运行时间统计.md","hash":"d28521bee3a2fd78546a6d1a2b5c90b9cd64c610","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/跟踪特性.md","hash":"c681ed59944d85617894b017d84d5e7c180c9816","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/配置文件.md","hash":"02dc0f190937d731ab8088e7474155bd1b50e591","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/钩子函数.html","hash":"fcc5cefa61b65eece0f1308f027ac1b0fa963222","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/队列集合.html","hash":"1ea08da46e3201e21315447508e50ccf6204e772","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/队列集合.md","hash":"a114e952357eb0c8ddca282af811f961ae260b64","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/钩子函数.md","hash":"b08dd1eed9de9a106179fe59fb92054f1200dfe3","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/静态分配与动态分配.html","hash":"23f3326f217374e20264c85488f7960db0823b9d","modified":1489556127850},{"_id":"public/freeRTOS/进阶/高级/静态分配与动态分配.md","hash":"9235398903e77f57a87e6a7be3c48fb72bd2a550","modified":1489556127850},{"_id":"public/day/ertongjie/2016/css/style.css","hash":"fcb0d82388b60933e937c8834f30a389a75df9a4","modified":1489556127850},{"_id":"public/day/qixi/2016/css/default.css","hash":"28cee4a08f2feb5c17d5e5489159fd2c7014f43a","modified":1489556127850},{"_id":"public/day/qixi/2016/css/default_dev.css","hash":"d2d3b600cfed6ad281fb0b70aae269486256fba9","modified":1489556127851},{"_id":"public/day/ertongjie/2016/css/css.css","hash":"a7566bf2c8d32466dcec61174531ee442be259bc","modified":1489556127851},{"_id":"public/day/qixi/2016/js/functions.js","hash":"c26e2f95efd182c4725d88c6d4259e8bf3def511","modified":1489556127851},{"_id":"public/day/qixi/2016/js/garden_dev.js","hash":"2f58af3d20e2b953a1efd52c2166b97a51bd7124","modified":1489556127851},{"_id":"public/day/qixi/2016/js/functions_dev.js","hash":"080692642c5a0ec8003c962fa6503a8c7c0d82f1","modified":1489556127851},{"_id":"public/day/qixi/2016/js/garden.js","hash":"61bd975ce15a4428a17ce384fae72cd433f93075","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/css/myStyle.css","hash":"84fbbb9f0e1996af0900cb10c0eaeebfb7efed9c","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/alert/sweetalert.css","hash":"ceaedef36025201a31576bfa89f2be470387ae88","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/img/3.jpg","hash":"cc1405e52f6d482e3903df0fa623f277738bbaa2","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/alert/sweetalert.min.js","hash":"b43ebfa7e6701b0064ee38b4b219bda278404a8f","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/img/jin.ico","hash":"775f6c4f2f6dc3eee0a5a93514110a2305611769","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/img/tgc.ico","hash":"40afcb86c14b74cbe9e9ba4c0ad143e6a221eb8c","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/js/backgroud.js","hash":"4d3c68d0113b8c02a8f541e7ba7e6878580a10f7","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/toast/toastr.min.css","hash":"816bbea7885a8805a4e55273654a766401ccb5b0","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/js/myJs.js","hash":"4275bccbca8ec2801fad9f9ed305f5161b6486c2","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/toast/toastr.css","hash":"678649ea4e920e7125e927770feb019b7b126adc","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/toast/toastr.min.js","hash":"24c89fbd4756c877e43a0a6d38d20df906c36335","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/toast/toastr.js.map","hash":"8676f6051f8fc1df84bd69ecc2671e3ef9b35400","modified":1489556127851},{"_id":"public/day/zhongqiu/2016/vegas/vegas.min.css","hash":"5810e20875386f98565b69de5ca8ee1d0a6d1feb","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/vegas/vegas.min.js","hash":"f3a641966688c073e78ee2d28deea855ebe45848","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/lightbox/css/lightbox.min.css","hash":"80113ae1656a9e37e2db0eac20d97d111b179db9","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/lightbox/css/lightbox.css","hash":"d6efbba2e2322636029d688f5c08793cd702ead1","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/lightbox/images/close.png","hash":"3ca48361cfe0e41163023d03c26296f375bb3eac","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/lightbox/images/next.png","hash":"777e92c050f600b4519299c3d786b8f2f459fea4","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/lightbox/images/loading.gif","hash":"cf720b50cf8dde0e1a84ce1c6a77788bfc5882d5","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/lightbox/images/prev.png","hash":"6640a3432f7ba7aea6129cdf7a5d3eabd47c295c","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/lightbox/js/lightbox.js","hash":"58ef87e17f6ec2e39acd7487d4852670ca12b784","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/lightbox/js/lightbox.min.js","hash":"12a3fd559dfede768d2cca5014634d55f343493f","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/vegas/overlays/01.png","hash":"7c046ea4b1669da4eb81acccd7fc58b00201543d","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/lightbox/js/lightbox.min.map","hash":"5f699bf12c01525aa6f9238d94a7fb33d880313b","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/vegas/overlays/02.png","hash":"9775bb2755b51c9eb03a3057eaf3914dc3149a6b","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/vegas/overlays/03.png","hash":"c284f2c9ece402ccc1301b4301252476864235c0","modified":1489556127852},{"_id":"public/day/zhongqiu/2016/vegas/overlays/05.png","hash":"8d9fe47653c2615fd4a1e861e882e2efdb0f34a0","modified":1489556127888},{"_id":"public/day/zhongqiu/2016/vegas/overlays/04.png","hash":"2816672fcbef8e08b431d600f26b119e2122eaa6","modified":1489556127888},{"_id":"public/day/zhongqiu/2016/vegas/overlays/06.png","hash":"9d566536e859c18075d00e7f8cd6c490d310c089","modified":1489556127890},{"_id":"public/freeRTOS/gitbook/gitbook.js","hash":"66c9fd0ac34c33b232c06278bd6e0d6bbb36892a","modified":1489556127890},{"_id":"public/freeRTOS/gitbook/theme.js","hash":"b62787a79b30c925df2292d8cf08497f48e1eb68","modified":1489556127890},{"_id":"public/img/girl.jpg","hash":"92743ba769bb7a7de8e93a418ed36c89e60bc639","modified":1489556127890},{"_id":"public/day/qixi/2016/love.ico","hash":"bfe831b13caca314b419b6665d18d5903278558b","modified":1489556127890},{"_id":"public/freeRTOS/进阶/高级/配置文件.html","hash":"50faee4c3190f2d9d833630f38fa70153cef6561","modified":1489556127891},{"_id":"public/day/qixi/2016/js/jquery.js","hash":"6ab320a0421a75731233a3f6ec4f4f906b903dac","modified":1489556127891},{"_id":"public/day/zhongqiu/2016/alert/sweetalert-dev.js","hash":"f655706bb096584220c12aacde74ec197f1cd63c","modified":1489556127891},{"_id":"public/day/zhongqiu/2016/img/us.ico","hash":"e8bee712e640d66be57a2f6fb49c44c93d426933","modified":1489556127891},{"_id":"public/day/ertongjie/2016/js/jquery.min.js","hash":"e6082a7b52db82604ac446d2e6a32cb5af263781","modified":1489556127891},{"_id":"public/day/zhongqiu/2016/vegas/jquery.min.js","hash":"c72c1735b4d903d90dd51225ebefb8c74ebbc51f","modified":1489556127891},{"_id":"public/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1489556127891},{"_id":"public/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1489556127891},{"_id":"public/freeRTOS/gitbook/fonts/fontawesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1489556127891},{"_id":"public/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1489556127891},{"_id":"public/day/zhongqiu/2016/vegas/overlays/07.png","hash":"078e49f4fa97e117da76cbef2b492e8cf92d0d45","modified":1489556127891},{"_id":"public/day/zhongqiu/2016/vegas/overlays/08.png","hash":"b3916a95cb81602b7bd41eaefa92eb3a8fd39b70","modified":1489556127891},{"_id":"public/day/zhongqiu/2016/vegas/overlays/09.png","hash":"4d1c1ec2c710745ddcc43fdd0ae41d3095398a77","modified":1489556127891},{"_id":"public/assets/js/APlayer.min.js","hash":"4b3ef75b6ac8ca1052d0c964f133348c89289715","modified":1489556127892},{"_id":"public/css/jquery.fancybox.css","hash":"9363d21938e1cb84421896a113eb488a02f896a9","modified":1489556127903},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1489556127903},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1489556127903},{"_id":"public/js/jquery.leoweather.min.js","hash":"2029f15d5917d0f2d10c223f67ce13c6463a87f5","modified":1489556127903},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1489556127903},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1489556127904},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1489556127904},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1489556127904},{"_id":"public/js/stickUp.min.js","hash":"cc2fb038703a1f0604f1b91b0d47606356ca595b","modified":1489556127904},{"_id":"public/css/style.css","hash":"28c3021bdfb2a1f4a5434836b47b38328961d5c7","modified":1489556127904},{"_id":"public/js/jquery.pjax.js","hash":"f00ed14ba44980f4f2a4b60ac0a3970fb49b3d01","modified":1489556127904},{"_id":"public/day/zhongqiu/2016/img/2.jpg","hash":"f879afa90f5ab2aba59657ef164a0885e69720b6","modified":1489556127904},{"_id":"public/day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.min.js","hash":"2dc67c67e5deeeea7e78199f752c77b8a9f33bfa","modified":1489556127904},{"_id":"public/img/body_bg.jpg","hash":"7a00024fe2b3cbaf78d21941a231d01495e2bcec","modified":1489556127917},{"_id":"public/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1489556127917},{"_id":"public/day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.min.map","hash":"54ee3abbef420bde28f0e39ea83e40c9a15110ad","modified":1489556127917},{"_id":"public/day/zhongqiu/2016/img/1.jpg","hash":"d2f5f425014d24f993b118ab77a04b6a03e8a48a","modified":1489556127922},{"_id":"public/day/zhongqiu/2016/lightbox/js/lightbox-plus-jquery.js","hash":"4fe5da488fce9dac11c007b48bb21aae97a3e24f","modified":1489556127933},{"_id":"public/freeRTOS/gitbook/fonts/fontawesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1489556127958},{"_id":"public/freeRTOS/search_index.json","hash":"0817f25f8b5694c5ff12cf88b57559e041c3b5a1","modified":1489556128037},{"_id":"public/css/style.scss","hash":"eadba67f36b9d84eb57f38b13d11d9f4b50fcfc1","modified":1491440659004}],"Category":[{"name":"2017","_id":"cj0aj9ana000670g56bngqms5"},{"name":"others","_id":"cj0aj9ang000b70g5ar51z7hm"},{"name":"C#","_id":"cj0aj9anm000h70g5g5jl0djb"},{"name":"总线协议","_id":"cj0aj9ans000n70g5snksd52z"},{"name":"C","_id":"cj0aj9ao3000y70g5tvh28fbw"},{"name":"STM8","_id":"cj0aj9aoe001b70g5vv9jx3tq"},{"name":"bootloader","_id":"cj0aj9ap1002570g5m7m3l2m3"},{"name":"单片机","_id":"cj0aj9ap5002a70g50rpk306x"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404</title>\n\t<meta name=\"description\" content=\"404\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.xn--4gqa63c686ta68iba.ren/\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>\n\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404</title>\n\t<meta name=\"description\" content=\"404\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.xn--4gqa63c686ta68iba.ren/\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>\n\n","date":"2016-11-30T01:45:06.385Z","updated":"2016-08-17T03:40:58.472Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj0aj9alm000070g50ta3s12s","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404</title>\n\t<meta name=\"description\" content=\"404\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t<meta name=\"robots\" content=\"all\">\n\t<meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://www.xn--4gqa63c686ta68iba.ren/\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>\n\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404</title>\n\t<meta name=\"description\" content=\"404\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://www.xn--4gqa63c686ta68iba.ren/\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>\n\n"},{"title":"关于本站","date":"2016-08-17T13:42:24.000Z","_content":"这个站点的创立初衷是送给我那温柔大方、美丽动人的女朋友的儿童节礼物。[改版之前的首页](http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html)\n\n<center><img class=\"nofancybox\" src=\"http://o9kzgz0kz.bkt.clouddn.com/img1929722711.jpeg\"></center>\n\n同时自己也有一个写博客记录以及激励自己的想法，因此将站点改成了个人博客。博客使用** Hexo + GitHub Pages ** 搭建，网站样式修改自主题** maupassant **，在此感谢原作者的开源奉献。\n\n作者本人从事单片机软件开发，有三年多的固件开发经验，目前工作在消费类电子领域，主要从事智能机器人的底层驱动软件设计与开发。对物联网与智能家居有很大的兴趣，接下来会向这个方向发展。\n","source":"about/index.md","raw":"---\ntitle: 关于本站\ndate: 2016-08-17 13:42:24\n---\n这个站点的创立初衷是送给我那温柔大方、美丽动人的女朋友的儿童节礼物。[改版之前的首页](http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html)\n\n<center><img class=\"nofancybox\" src=\"http://o9kzgz0kz.bkt.clouddn.com/img1929722711.jpeg\"></center>\n\n同时自己也有一个写博客记录以及激励自己的想法，因此将站点改成了个人博客。博客使用** Hexo + GitHub Pages ** 搭建，网站样式修改自主题** maupassant **，在此感谢原作者的开源奉献。\n\n作者本人从事单片机软件开发，有三年多的固件开发经验，目前工作在消费类电子领域，主要从事智能机器人的底层驱动软件设计与开发。对物联网与智能家居有很大的兴趣，接下来会向这个方向发展。\n","updated":"2016-12-12T11:30:23.063Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0aj9amx000170g5c0wr20av","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>这个站点的创立初衷是送给我那温柔大方、美丽动人的女朋友的儿童节礼物。<a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\">改版之前的首页</a></p>\n<center><img class=\"nofancybox\" src=\"http://o9kzgz0kz.bkt.clouddn.com/img1929722711.jpeg\"></center>\n\n<p>同时自己也有一个写博客记录以及激励自己的想法，因此将站点改成了个人博客。博客使用<strong> Hexo + GitHub Pages </strong> 搭建，网站样式修改自主题<strong> maupassant </strong>，在此感谢原作者的开源奉献。</p>\n<p>作者本人从事单片机软件开发，有三年多的固件开发经验，目前工作在消费类电子领域，主要从事智能机器人的底层驱动软件设计与开发。对物联网与智能家居有很大的兴趣，接下来会向这个方向发展。</p>\n","excerpt":"","more":"<p>这个站点的创立初衷是送给我那温柔大方、美丽动人的女朋友的儿童节礼物。<a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\">改版之前的首页</a></p>\n<center><img class=\"nofancybox\" src=\"http://o9kzgz0kz.bkt.clouddn.com/img1929722711.jpeg\"></center>\n\n<p>同时自己也有一个写博客记录以及激励自己的想法，因此将站点改成了个人博客。博客使用<strong> Hexo + GitHub Pages </strong> 搭建，网站样式修改自主题<strong> maupassant </strong>，在此感谢原作者的开源奉献。</p>\n<p>作者本人从事单片机软件开发，有三年多的固件开发经验，目前工作在消费类电子领域，主要从事智能机器人的底层驱动软件设计与开发。对物联网与智能家居有很大的兴趣，接下来会向这个方向发展。</p>\n"},{"title":"categories","date":"2016-11-30T10:51:39.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-30 10:51:39\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-30T02:52:04.132Z","path":"categories/index.html","layout":"page","_id":"cj0aj9an4000370g56yudq8aw","content":"<script src=\"/assets/js/APlayer.min.js\"> </script>","excerpt":"","more":""},{"title":"给最爱的你","date":"2016-08-17T13:42:34.000Z","_content":"<script type=\"text/javascript\">\n    function isHoliday()\n    {\n        var today = new Date();\n        var holiday = {'1/1':'元旦','3/8':'妇女节','5/1':'劳动节','6/1':'儿童节','8/9':'七夕','9/15':'中秋','10/1':'国庆节','12/25':'圣诞节'};\n        var key = (today.getMonth() + 1) + '/' + today.getDate();\n        if (holiday[key])\n        {\n            var rtl = confirm(\"今天是\"+holiday[key]+\",是否跳转到节日页面^_^\");\n            if (rtl) \n            {\n                switch(holiday[key])\n                {\n                    case '儿童节':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\");\n                      break;\n                    case '七夕':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/qixi/2016/index.html\");\n                      break;\n                      case '中秋':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/zhongqiu/2016/index.html\");\n                      break;\n                    default:\n                        //confirm(\"今天是\"+holiday[key]+\",是否跳转到节日页面^_^\");\n                     break;\n                }\n            }\n        }\n    }\n    function timeMsg()\n    {\n        setTimeout(\"isHoliday()\", 2000);        \n    }\n    timeMsg();\n</script>\n\n## 2016\n### 儿童节\n<a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/%E5%84%BF%E7%AB%A5%E8%8A%82.jpg\"></a>\n### 七夕\n<a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/qixi/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/%E4%B8%83%E5%A4%95.jpg\"></a>\n### 中秋\n<a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/zhongqiu/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/zhongqiu2.png\"></a>\n\n","source":"holiday/index.md","raw":"---\ntitle: 给最爱的你\ndate: 2016-08-17 13:42:34\n---\n<script type=\"text/javascript\">\n    function isHoliday()\n    {\n        var today = new Date();\n        var holiday = {'1/1':'元旦','3/8':'妇女节','5/1':'劳动节','6/1':'儿童节','8/9':'七夕','9/15':'中秋','10/1':'国庆节','12/25':'圣诞节'};\n        var key = (today.getMonth() + 1) + '/' + today.getDate();\n        if (holiday[key])\n        {\n            var rtl = confirm(\"今天是\"+holiday[key]+\",是否跳转到节日页面^_^\");\n            if (rtl) \n            {\n                switch(holiday[key])\n                {\n                    case '儿童节':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\");\n                      break;\n                    case '七夕':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/qixi/2016/index.html\");\n                      break;\n                      case '中秋':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/zhongqiu/2016/index.html\");\n                      break;\n                    default:\n                        //confirm(\"今天是\"+holiday[key]+\",是否跳转到节日页面^_^\");\n                     break;\n                }\n            }\n        }\n    }\n    function timeMsg()\n    {\n        setTimeout(\"isHoliday()\", 2000);        \n    }\n    timeMsg();\n</script>\n\n## 2016\n### 儿童节\n<a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/%E5%84%BF%E7%AB%A5%E8%8A%82.jpg\"></a>\n### 七夕\n<a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/qixi/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/%E4%B8%83%E5%A4%95.jpg\"></a>\n### 中秋\n<a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/zhongqiu/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/zhongqiu2.png\"></a>\n\n","updated":"2017-01-10T01:47:45.068Z","path":"holiday/index.html","comments":1,"layout":"page","_id":"cj0aj9bcy002w70g5kmslfnmc","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><script type=\"text/javascript\">\n    function isHoliday()\n    {\n        var today = new Date();\n        var holiday = {'1/1':'元旦','3/8':'妇女节','5/1':'劳动节','6/1':'儿童节','8/9':'七夕','9/15':'中秋','10/1':'国庆节','12/25':'圣诞节'};\n        var key = (today.getMonth() + 1) + '/' + today.getDate();\n        if (holiday[key])\n        {\n            var rtl = confirm(\"今天是\"+holiday[key]+\",是否跳转到节日页面^_^\");\n            if (rtl) \n            {\n                switch(holiday[key])\n                {\n                    case '儿童节':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\");\n                      break;\n                    case '七夕':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/qixi/2016/index.html\");\n                      break;\n                      case '中秋':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/zhongqiu/2016/index.html\");\n                      break;\n                    default:\n                        //confirm(\"今天是\"+holiday[key]+\",是否跳转到节日页面^_^\");\n                     break;\n                }\n            }\n        }\n    }\n    function timeMsg()\n    {\n        setTimeout(\"isHoliday()\", 2000);        \n    }\n    timeMsg();\n</script>\n\n<h2 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h2><h3 id=\"儿童节\"><a href=\"#儿童节\" class=\"headerlink\" title=\"儿童节\"></a>儿童节</h3><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/%E5%84%BF%E7%AB%A5%E8%8A%82.jpg\"></a></p>\n<h3 id=\"七夕\"><a href=\"#七夕\" class=\"headerlink\" title=\"七夕\"></a>七夕</h3><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/qixi/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/%E4%B8%83%E5%A4%95.jpg\"></a></p>\n<h3 id=\"中秋\"><a href=\"#中秋\" class=\"headerlink\" title=\"中秋\"></a>中秋</h3><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/zhongqiu/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/zhongqiu2.png\"></a></p>\n","excerpt":"","more":"<script type=\"text/javascript\">\n    function isHoliday()\n    {\n        var today = new Date();\n        var holiday = {'1/1':'元旦','3/8':'妇女节','5/1':'劳动节','6/1':'儿童节','8/9':'七夕','9/15':'中秋','10/1':'国庆节','12/25':'圣诞节'};\n        var key = (today.getMonth() + 1) + '/' + today.getDate();\n        if (holiday[key])\n        {\n            var rtl = confirm(\"今天是\"+holiday[key]+\",是否跳转到节日页面^_^\");\n            if (rtl) \n            {\n                switch(holiday[key])\n                {\n                    case '儿童节':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\");\n                      break;\n                    case '七夕':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/qixi/2016/index.html\");\n                      break;\n                      case '中秋':\n                        window.location.assign(\"http://www.xn--4gqa63c686ta68iba.ren/day/zhongqiu/2016/index.html\");\n                      break;\n                    default:\n                        //confirm(\"今天是\"+holiday[key]+\",是否跳转到节日页面^_^\");\n                     break;\n                }\n            }\n        }\n    }\n    function timeMsg()\n    {\n        setTimeout(\"isHoliday()\", 2000);        \n    }\n    timeMsg();\n</script>\n\n<h2 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h2><h3 id=\"儿童节\"><a href=\"#儿童节\" class=\"headerlink\" title=\"儿童节\"></a>儿童节</h3><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/ertongjie/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/%E5%84%BF%E7%AB%A5%E8%8A%82.jpg\"></a></p>\n<h3 id=\"七夕\"><a href=\"#七夕\" class=\"headerlink\" title=\"七夕\"></a>七夕</h3><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/qixi/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/%E4%B8%83%E5%A4%95.jpg\"></a></p>\n<h3 id=\"中秋\"><a href=\"#中秋\" class=\"headerlink\" title=\"中秋\"></a>中秋</h3><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/day/zhongqiu/2016/index.html\"><img class=\"nofancybox\" src=\"http://obd6jz6in.bkt.clouddn.com/zhongqiu2.png\"></a></p>\n"},{"title":"tags","date":"2016-11-30T10:50:13.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-30 10:50:13\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-30T02:51:18.213Z","path":"tags/index.html","layout":"page","_id":"cj0aj9bcz002x70g5ukdm7u98","content":"<script src=\"/assets/js/APlayer.min.js\"> </script>","excerpt":"","more":""}],"Post":[{"title":"2017,新的开始","date":"2017-01-10T09:28:07.000Z","toc":false,"thumbnail":null,"_content":"\n# 2017，给自己立下几个FLAG\n\n## 新语言\n\n - python3\n - C#\n - C++\n - JAVA (OP)\n\n## 新技能\n\n- **嵌入式linux驱动开发**\n- 桌面应用 || 手机应用开发\n\n## 新生活\n\n- 再多学会做几个菜品\n- *锻炼、锻炼、锻炼*\n\n## 新未来\n\n- 结婚\n- 买房\n\n未完待续……","source":"_posts/2017flag.md","raw":"---\ntitle: 2017,新的开始\ndate: 2017-01-10 09:28:07\ntags: 2017\ntoc: false\ncategories: 2017\nthumbnail:\n---\n\n# 2017，给自己立下几个FLAG\n\n## 新语言\n\n - python3\n - C#\n - C++\n - JAVA (OP)\n\n## 新技能\n\n- **嵌入式linux驱动开发**\n- 桌面应用 || 手机应用开发\n\n## 新生活\n\n- 再多学会做几个菜品\n- *锻炼、锻炼、锻炼*\n\n## 新未来\n\n- 结婚\n- 买房\n\n未完待续……","slug":"2017flag","published":1,"updated":"2017-01-10T01:55:31.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9amz000270g5wwsz08ms","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"2017，给自己立下几个FLAG\"><a href=\"#2017，给自己立下几个FLAG\" class=\"headerlink\" title=\"2017，给自己立下几个FLAG\"></a>2017，给自己立下几个FLAG</h1><h2 id=\"新语言\"><a href=\"#新语言\" class=\"headerlink\" title=\"新语言\"></a>新语言</h2><ul>\n<li>python3</li>\n<li>C#</li>\n<li>C++</li>\n<li>JAVA (OP)</li>\n</ul>\n<h2 id=\"新技能\"><a href=\"#新技能\" class=\"headerlink\" title=\"新技能\"></a>新技能</h2><ul>\n<li><strong>嵌入式linux驱动开发</strong></li>\n<li>桌面应用 || 手机应用开发</li>\n</ul>\n<h2 id=\"新生活\"><a href=\"#新生活\" class=\"headerlink\" title=\"新生活\"></a>新生活</h2><ul>\n<li>再多学会做几个菜品</li>\n<li><em>锻炼、锻炼、锻炼</em></li>\n</ul>\n<h2 id=\"新未来\"><a href=\"#新未来\" class=\"headerlink\" title=\"新未来\"></a>新未来</h2><ul>\n<li>结婚</li>\n<li>买房</li>\n</ul>\n<p>未完待续……</p>\n","excerpt":"","more":"<h1 id=\"2017，给自己立下几个FLAG\"><a href=\"#2017，给自己立下几个FLAG\" class=\"headerlink\" title=\"2017，给自己立下几个FLAG\"></a>2017，给自己立下几个FLAG</h1><h2 id=\"新语言\"><a href=\"#新语言\" class=\"headerlink\" title=\"新语言\"></a>新语言</h2><ul>\n<li>python3</li>\n<li>C#</li>\n<li>C++</li>\n<li>JAVA (OP)</li>\n</ul>\n<h2 id=\"新技能\"><a href=\"#新技能\" class=\"headerlink\" title=\"新技能\"></a>新技能</h2><ul>\n<li><strong>嵌入式linux驱动开发</strong></li>\n<li>桌面应用 || 手机应用开发</li>\n</ul>\n<h2 id=\"新生活\"><a href=\"#新生活\" class=\"headerlink\" title=\"新生活\"></a>新生活</h2><ul>\n<li>再多学会做几个菜品</li>\n<li><em>锻炼、锻炼、锻炼</em></li>\n</ul>\n<h2 id=\"新未来\"><a href=\"#新未来\" class=\"headerlink\" title=\"新未来\"></a>新未来</h2><ul>\n<li>结婚</li>\n<li>买房</li>\n</ul>\n<p>未完待续……</p>\n"},{"title":"ASCII码表","date":"2016-07-21T11:23:14.000Z","toc":true,"_content":"This table lists the ASCII characters and their decimal, octal and hexadecimal numbers. Characters which appear as names in parentheses (e.g., (nl)) are non-printing characters. A table of the common non-printing characters appears after this table.\n\n<pre>\nChar  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char Dec  Oct   Hex\n-------------------------------------------------------------------------------------\n(nul)   0 0000 0x00 | (sp)   32 0040 0x20 | @      64 0100 0x40 | `      96 0140 0x60\n(soh)   1 0001 0x01 | !      33 0041 0x21 | A      65 0101 0x41 | a      97 0141 0x61\n(stx)   2 0002 0x02 | \"      34 0042 0x22 | B      66 0102 0x42 | b      98 0142 0x62\n(etx)   3 0003 0x03 | #      35 0043 0x23 | C      67 0103 0x43 | c      99 0143 0x63\n(eot)   4 0004 0x04 | $      36 0044 0x24 | D      68 0104 0x44 | d     100 0144 0x64\n(enq)   5 0005 0x05 | %      37 0045 0x25 | E      69 0105 0x45 | e     101 0145 0x65\n(ack)   6 0006 0x06 | &amp;      38 0046 0x26 | F      70 0106 0x46 | f     102 0146 0x66\n(bel)   7 0007 0x07 | '      39 0047 0x27 | G      71 0107 0x47 | g     103 0147 0x67\n(bs)    8 0010 0x08 | (      40 0050 0x28 | H      72 0110 0x48 | h     104 0150 0x68\n(ht)    9 0011 0x09 | )      41 0051 0x29 | I      73 0111 0x49 | i     105 0151 0x69\n(nl)   10 0012 0x0a | *      42 0052 0x2a | J      74 0112 0x4a | j     106 0152 0x6a\n(vt)   11 0013 0x0b | +      43 0053 0x2b | K      75 0113 0x4b | k     107 0153 0x6b\n(np)   12 0014 0x0c | ,      44 0054 0x2c | L      76 0114 0x4c | l     108 0154 0x6c\n(cr)   13 0015 0x0d | -      45 0055 0x2d | M      77 0115 0x4d | m     109 0155 0x6d\n(so)   14 0016 0x0e | .      46 0056 0x2e | N      78 0116 0x4e | n     110 0156 0x6e\n(si)   15 0017 0x0f | /      47 0057 0x2f | O      79 0117 0x4f | o     111 0157 0x6f\n(dle)  16 0020 0x10 | 0      48 0060 0x30 | P      80 0120 0x50 | p     112 0160 0x70\n(dc1)  17 0021 0x11 | 1      49 0061 0x31 | Q      81 0121 0x51 | q     113 0161 0x71\n(dc2)  18 0022 0x12 | 2      50 0062 0x32 | R      82 0122 0x52 | r     114 0162 0x72\n(dc3)  19 0023 0x13 | 3      51 0063 0x33 | S      83 0123 0x53 | s     115 0163 0x73\n(dc4)  20 0024 0x14 | 4      52 0064 0x34 | T      84 0124 0x54 | t     116 0164 0x74\n(nak)  21 0025 0x15 | 5      53 0065 0x35 | U      85 0125 0x55 | u     117 0165 0x75\n(syn)  22 0026 0x16 | 6      54 0066 0x36 | V      86 0126 0x56 | v     118 0166 0x76\n(etb)  23 0027 0x17 | 7      55 0067 0x37 | W      87 0127 0x57 | w     119 0167 0x77\n(can)  24 0030 0x18 | 8      56 0070 0x38 | X      88 0130 0x58 | x     120 0170 0x78\n(em)   25 0031 0x19 | 9      57 0071 0x39 | Y      89 0131 0x59 | y     121 0171 0x79\n(sub)  26 0032 0x1a | :      58 0072 0x3a | Z      90 0132 0x5a | z     122 0172 0x7a\n(esc)  27 0033 0x1b | ;      59 0073 0x3b | [      91 0133 0x5b | {     123 0173 0x7b\n(fs)   28 0034 0x1c | &lt;      60 0074 0x3c | \\      92 0134 0x5c | |     124 0174 0x7c\n(gs)   29 0035 0x1d | =      61 0075 0x3d | ]      93 0135 0x5d | }     125 0175 0x7d\n(rs)   30 0036 0x1e | &gt;      62 0076 0x3e | ^      94 0136 0x5e | ~     126 0176 0x7e\n(us)   31 0037 0x1f | ?      63 0077 0x3f | _      95 0137 0x5f | (del) 127 0177 0x7f\n\n</pre>\n\n<p align=\"center\">\n<table>\n<tbody><tr><th> ASCII Name </th><th align=\"left\"> Description </th><th> C Escape Sequence\n</th></tr><tr><td> nul\t</td><td> null byte\t\t</td><td align=\"center\"> \\0\n</td></tr><tr><td> bel\t</td><td> bell character\t</td><td align=\"center\"> \\a\n</td></tr><tr><td> bs\t</td><td> backspace\t\t</td><td align=\"center\"> \\b\n</td></tr><tr><td> ht\t</td><td> horizontal tab\t</td><td align=\"center\"> \\t\n</td></tr><tr><td> np\t</td><td> formfeed\t\t</td><td align=\"center\"> \\f\n</td></tr><tr><td> nl\t</td><td> newline\t\t</td><td align=\"center\"> \\n\n</td></tr><tr><td> cr\t</td><td> carriage return\t</td><td align=\"center\"> \\r\n</td></tr><tr><td> vt\t</td><td> vertical tab\t</td><td>\n</td></tr><tr><td> esc\t</td><td> escape\t\t</td><td>\n</td></tr><tr><td> sp\t</td><td> space\t\t</td><td>\n</td></tr></tbody></table>\n</p>\n\n\n","source":"_posts/ASCII.md","raw":"---\ntitle: ASCII码表\ndate: 2016-07-21 11:23:14\ntoc: true\ncategories: others\ntags: ASCII\n---\nThis table lists the ASCII characters and their decimal, octal and hexadecimal numbers. Characters which appear as names in parentheses (e.g., (nl)) are non-printing characters. A table of the common non-printing characters appears after this table.\n\n<pre>\nChar  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char Dec  Oct   Hex\n-------------------------------------------------------------------------------------\n(nul)   0 0000 0x00 | (sp)   32 0040 0x20 | @      64 0100 0x40 | `      96 0140 0x60\n(soh)   1 0001 0x01 | !      33 0041 0x21 | A      65 0101 0x41 | a      97 0141 0x61\n(stx)   2 0002 0x02 | \"      34 0042 0x22 | B      66 0102 0x42 | b      98 0142 0x62\n(etx)   3 0003 0x03 | #      35 0043 0x23 | C      67 0103 0x43 | c      99 0143 0x63\n(eot)   4 0004 0x04 | $      36 0044 0x24 | D      68 0104 0x44 | d     100 0144 0x64\n(enq)   5 0005 0x05 | %      37 0045 0x25 | E      69 0105 0x45 | e     101 0145 0x65\n(ack)   6 0006 0x06 | &amp;      38 0046 0x26 | F      70 0106 0x46 | f     102 0146 0x66\n(bel)   7 0007 0x07 | '      39 0047 0x27 | G      71 0107 0x47 | g     103 0147 0x67\n(bs)    8 0010 0x08 | (      40 0050 0x28 | H      72 0110 0x48 | h     104 0150 0x68\n(ht)    9 0011 0x09 | )      41 0051 0x29 | I      73 0111 0x49 | i     105 0151 0x69\n(nl)   10 0012 0x0a | *      42 0052 0x2a | J      74 0112 0x4a | j     106 0152 0x6a\n(vt)   11 0013 0x0b | +      43 0053 0x2b | K      75 0113 0x4b | k     107 0153 0x6b\n(np)   12 0014 0x0c | ,      44 0054 0x2c | L      76 0114 0x4c | l     108 0154 0x6c\n(cr)   13 0015 0x0d | -      45 0055 0x2d | M      77 0115 0x4d | m     109 0155 0x6d\n(so)   14 0016 0x0e | .      46 0056 0x2e | N      78 0116 0x4e | n     110 0156 0x6e\n(si)   15 0017 0x0f | /      47 0057 0x2f | O      79 0117 0x4f | o     111 0157 0x6f\n(dle)  16 0020 0x10 | 0      48 0060 0x30 | P      80 0120 0x50 | p     112 0160 0x70\n(dc1)  17 0021 0x11 | 1      49 0061 0x31 | Q      81 0121 0x51 | q     113 0161 0x71\n(dc2)  18 0022 0x12 | 2      50 0062 0x32 | R      82 0122 0x52 | r     114 0162 0x72\n(dc3)  19 0023 0x13 | 3      51 0063 0x33 | S      83 0123 0x53 | s     115 0163 0x73\n(dc4)  20 0024 0x14 | 4      52 0064 0x34 | T      84 0124 0x54 | t     116 0164 0x74\n(nak)  21 0025 0x15 | 5      53 0065 0x35 | U      85 0125 0x55 | u     117 0165 0x75\n(syn)  22 0026 0x16 | 6      54 0066 0x36 | V      86 0126 0x56 | v     118 0166 0x76\n(etb)  23 0027 0x17 | 7      55 0067 0x37 | W      87 0127 0x57 | w     119 0167 0x77\n(can)  24 0030 0x18 | 8      56 0070 0x38 | X      88 0130 0x58 | x     120 0170 0x78\n(em)   25 0031 0x19 | 9      57 0071 0x39 | Y      89 0131 0x59 | y     121 0171 0x79\n(sub)  26 0032 0x1a | :      58 0072 0x3a | Z      90 0132 0x5a | z     122 0172 0x7a\n(esc)  27 0033 0x1b | ;      59 0073 0x3b | [      91 0133 0x5b | {     123 0173 0x7b\n(fs)   28 0034 0x1c | &lt;      60 0074 0x3c | \\      92 0134 0x5c | |     124 0174 0x7c\n(gs)   29 0035 0x1d | =      61 0075 0x3d | ]      93 0135 0x5d | }     125 0175 0x7d\n(rs)   30 0036 0x1e | &gt;      62 0076 0x3e | ^      94 0136 0x5e | ~     126 0176 0x7e\n(us)   31 0037 0x1f | ?      63 0077 0x3f | _      95 0137 0x5f | (del) 127 0177 0x7f\n\n</pre>\n\n<p align=\"center\">\n<table>\n<tbody><tr><th> ASCII Name </th><th align=\"left\"> Description </th><th> C Escape Sequence\n</th></tr><tr><td> nul\t</td><td> null byte\t\t</td><td align=\"center\"> \\0\n</td></tr><tr><td> bel\t</td><td> bell character\t</td><td align=\"center\"> \\a\n</td></tr><tr><td> bs\t</td><td> backspace\t\t</td><td align=\"center\"> \\b\n</td></tr><tr><td> ht\t</td><td> horizontal tab\t</td><td align=\"center\"> \\t\n</td></tr><tr><td> np\t</td><td> formfeed\t\t</td><td align=\"center\"> \\f\n</td></tr><tr><td> nl\t</td><td> newline\t\t</td><td align=\"center\"> \\n\n</td></tr><tr><td> cr\t</td><td> carriage return\t</td><td align=\"center\"> \\r\n</td></tr><tr><td> vt\t</td><td> vertical tab\t</td><td>\n</td></tr><tr><td> esc\t</td><td> escape\t\t</td><td>\n</td></tr><tr><td> sp\t</td><td> space\t\t</td><td>\n</td></tr></tbody></table>\n</p>\n\n\n","slug":"ASCII","published":1,"updated":"2016-08-01T05:43:25.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9an4000470g5vzvott22","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>This table lists the ASCII characters and their decimal, octal and hexadecimal numbers. Characters which appear as names in parentheses (e.g., (nl)) are non-printing characters. A table of the common non-printing characters appears after this table.</p>\n<pre>\nChar  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char Dec  Oct   Hex\n-------------------------------------------------------------------------------------\n(nul)   0 0000 0x00 | (sp)   32 0040 0x20 | @      64 0100 0x40 | `      96 0140 0x60\n(soh)   1 0001 0x01 | !      33 0041 0x21 | A      65 0101 0x41 | a      97 0141 0x61\n(stx)   2 0002 0x02 | \"      34 0042 0x22 | B      66 0102 0x42 | b      98 0142 0x62\n(etx)   3 0003 0x03 | #      35 0043 0x23 | C      67 0103 0x43 | c      99 0143 0x63\n(eot)   4 0004 0x04 | $      36 0044 0x24 | D      68 0104 0x44 | d     100 0144 0x64\n(enq)   5 0005 0x05 | %      37 0045 0x25 | E      69 0105 0x45 | e     101 0145 0x65\n(ack)   6 0006 0x06 | &amp;      38 0046 0x26 | F      70 0106 0x46 | f     102 0146 0x66\n(bel)   7 0007 0x07 | '      39 0047 0x27 | G      71 0107 0x47 | g     103 0147 0x67\n(bs)    8 0010 0x08 | (      40 0050 0x28 | H      72 0110 0x48 | h     104 0150 0x68\n(ht)    9 0011 0x09 | )      41 0051 0x29 | I      73 0111 0x49 | i     105 0151 0x69\n(nl)   10 0012 0x0a | *      42 0052 0x2a | J      74 0112 0x4a | j     106 0152 0x6a\n(vt)   11 0013 0x0b | +      43 0053 0x2b | K      75 0113 0x4b | k     107 0153 0x6b\n(np)   12 0014 0x0c | ,      44 0054 0x2c | L      76 0114 0x4c | l     108 0154 0x6c\n(cr)   13 0015 0x0d | -      45 0055 0x2d | M      77 0115 0x4d | m     109 0155 0x6d\n(so)   14 0016 0x0e | .      46 0056 0x2e | N      78 0116 0x4e | n     110 0156 0x6e\n(si)   15 0017 0x0f | /      47 0057 0x2f | O      79 0117 0x4f | o     111 0157 0x6f\n(dle)  16 0020 0x10 | 0      48 0060 0x30 | P      80 0120 0x50 | p     112 0160 0x70\n(dc1)  17 0021 0x11 | 1      49 0061 0x31 | Q      81 0121 0x51 | q     113 0161 0x71\n(dc2)  18 0022 0x12 | 2      50 0062 0x32 | R      82 0122 0x52 | r     114 0162 0x72\n(dc3)  19 0023 0x13 | 3      51 0063 0x33 | S      83 0123 0x53 | s     115 0163 0x73\n(dc4)  20 0024 0x14 | 4      52 0064 0x34 | T      84 0124 0x54 | t     116 0164 0x74\n(nak)  21 0025 0x15 | 5      53 0065 0x35 | U      85 0125 0x55 | u     117 0165 0x75\n(syn)  22 0026 0x16 | 6      54 0066 0x36 | V      86 0126 0x56 | v     118 0166 0x76\n(etb)  23 0027 0x17 | 7      55 0067 0x37 | W      87 0127 0x57 | w     119 0167 0x77\n(can)  24 0030 0x18 | 8      56 0070 0x38 | X      88 0130 0x58 | x     120 0170 0x78\n(em)   25 0031 0x19 | 9      57 0071 0x39 | Y      89 0131 0x59 | y     121 0171 0x79\n(sub)  26 0032 0x1a | :      58 0072 0x3a | Z      90 0132 0x5a | z     122 0172 0x7a\n(esc)  27 0033 0x1b | ;      59 0073 0x3b | [      91 0133 0x5b | {     123 0173 0x7b\n(fs)   28 0034 0x1c | &lt;      60 0074 0x3c | \\      92 0134 0x5c | |     124 0174 0x7c\n(gs)   29 0035 0x1d | =      61 0075 0x3d | ]      93 0135 0x5d | }     125 0175 0x7d\n(rs)   30 0036 0x1e | &gt;      62 0076 0x3e | ^      94 0136 0x5e | ~     126 0176 0x7e\n(us)   31 0037 0x1f | ?      63 0077 0x3f | _      95 0137 0x5f | (del) 127 0177 0x7f\n\n</pre>\n\n<p align=\"center\"><br><table><br><tbody><tr><th> ASCII Name </th><th align=\"left\"> Description </th><th> C Escape Sequence<br></th></tr><tr><td> nul    </td><td> null byte        </td><td align=\"center\"> \\0<br></td></tr><tr><td> bel    </td><td> bell character    </td><td align=\"center\"> \\a<br></td></tr><tr><td> bs    </td><td> backspace        </td><td align=\"center\"> \\b<br></td></tr><tr><td> ht    </td><td> horizontal tab    </td><td align=\"center\"> \\t<br></td></tr><tr><td> np    </td><td> formfeed        </td><td align=\"center\"> \\f<br></td></tr><tr><td> nl    </td><td> newline        </td><td align=\"center\"> \\n<br></td></tr><tr><td> cr    </td><td> carriage return    </td><td align=\"center\"> \\r<br></td></tr><tr><td> vt    </td><td> vertical tab    </td><td><br></td></tr><tr><td> esc    </td><td> escape        </td><td><br></td></tr><tr><td> sp    </td><td> space        </td><td><br></td></tr></tbody></table><br></p>\n\n\n","excerpt":"","more":"<p>This table lists the ASCII characters and their decimal, octal and hexadecimal numbers. Characters which appear as names in parentheses (e.g., (nl)) are non-printing characters. A table of the common non-printing characters appears after this table.</p>\n<pre>\nChar  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char Dec  Oct   Hex\n-------------------------------------------------------------------------------------\n(nul)   0 0000 0x00 | (sp)   32 0040 0x20 | @      64 0100 0x40 | `      96 0140 0x60\n(soh)   1 0001 0x01 | !      33 0041 0x21 | A      65 0101 0x41 | a      97 0141 0x61\n(stx)   2 0002 0x02 | \"      34 0042 0x22 | B      66 0102 0x42 | b      98 0142 0x62\n(etx)   3 0003 0x03 | #      35 0043 0x23 | C      67 0103 0x43 | c      99 0143 0x63\n(eot)   4 0004 0x04 | $      36 0044 0x24 | D      68 0104 0x44 | d     100 0144 0x64\n(enq)   5 0005 0x05 | %      37 0045 0x25 | E      69 0105 0x45 | e     101 0145 0x65\n(ack)   6 0006 0x06 | &amp;      38 0046 0x26 | F      70 0106 0x46 | f     102 0146 0x66\n(bel)   7 0007 0x07 | '      39 0047 0x27 | G      71 0107 0x47 | g     103 0147 0x67\n(bs)    8 0010 0x08 | (      40 0050 0x28 | H      72 0110 0x48 | h     104 0150 0x68\n(ht)    9 0011 0x09 | )      41 0051 0x29 | I      73 0111 0x49 | i     105 0151 0x69\n(nl)   10 0012 0x0a | *      42 0052 0x2a | J      74 0112 0x4a | j     106 0152 0x6a\n(vt)   11 0013 0x0b | +      43 0053 0x2b | K      75 0113 0x4b | k     107 0153 0x6b\n(np)   12 0014 0x0c | ,      44 0054 0x2c | L      76 0114 0x4c | l     108 0154 0x6c\n(cr)   13 0015 0x0d | -      45 0055 0x2d | M      77 0115 0x4d | m     109 0155 0x6d\n(so)   14 0016 0x0e | .      46 0056 0x2e | N      78 0116 0x4e | n     110 0156 0x6e\n(si)   15 0017 0x0f | /      47 0057 0x2f | O      79 0117 0x4f | o     111 0157 0x6f\n(dle)  16 0020 0x10 | 0      48 0060 0x30 | P      80 0120 0x50 | p     112 0160 0x70\n(dc1)  17 0021 0x11 | 1      49 0061 0x31 | Q      81 0121 0x51 | q     113 0161 0x71\n(dc2)  18 0022 0x12 | 2      50 0062 0x32 | R      82 0122 0x52 | r     114 0162 0x72\n(dc3)  19 0023 0x13 | 3      51 0063 0x33 | S      83 0123 0x53 | s     115 0163 0x73\n(dc4)  20 0024 0x14 | 4      52 0064 0x34 | T      84 0124 0x54 | t     116 0164 0x74\n(nak)  21 0025 0x15 | 5      53 0065 0x35 | U      85 0125 0x55 | u     117 0165 0x75\n(syn)  22 0026 0x16 | 6      54 0066 0x36 | V      86 0126 0x56 | v     118 0166 0x76\n(etb)  23 0027 0x17 | 7      55 0067 0x37 | W      87 0127 0x57 | w     119 0167 0x77\n(can)  24 0030 0x18 | 8      56 0070 0x38 | X      88 0130 0x58 | x     120 0170 0x78\n(em)   25 0031 0x19 | 9      57 0071 0x39 | Y      89 0131 0x59 | y     121 0171 0x79\n(sub)  26 0032 0x1a | :      58 0072 0x3a | Z      90 0132 0x5a | z     122 0172 0x7a\n(esc)  27 0033 0x1b | ;      59 0073 0x3b | [      91 0133 0x5b | {     123 0173 0x7b\n(fs)   28 0034 0x1c | &lt;      60 0074 0x3c | \\      92 0134 0x5c | |     124 0174 0x7c\n(gs)   29 0035 0x1d | =      61 0075 0x3d | ]      93 0135 0x5d | }     125 0175 0x7d\n(rs)   30 0036 0x1e | &gt;      62 0076 0x3e | ^      94 0136 0x5e | ~     126 0176 0x7e\n(us)   31 0037 0x1f | ?      63 0077 0x3f | _      95 0137 0x5f | (del) 127 0177 0x7f\n\n</pre>\n\n<p align=\"center\"><br><table><br><tbody><tr><th> ASCII Name </th><th align=\"left\"> Description </th><th> C Escape Sequence<br></th></tr><tr><td> nul    </td><td> null byte        </td><td align=\"center\"> \\0<br></td></tr><tr><td> bel    </td><td> bell character    </td><td align=\"center\"> \\a<br></td></tr><tr><td> bs    </td><td> backspace        </td><td align=\"center\"> \\b<br></td></tr><tr><td> ht    </td><td> horizontal tab    </td><td align=\"center\"> \\t<br></td></tr><tr><td> np    </td><td> formfeed        </td><td align=\"center\"> \\f<br></td></tr><tr><td> nl    </td><td> newline        </td><td align=\"center\"> \\n<br></td></tr><tr><td> cr    </td><td> carriage return    </td><td align=\"center\"> \\r<br></td></tr><tr><td> vt    </td><td> vertical tab    </td><td><br></td></tr><tr><td> esc    </td><td> escape        </td><td><br></td></tr><tr><td> sp    </td><td> space        </td><td><br></td></tr></tbody></table><br></p>\n\n\n"},{"title":"ARM寻址方式","date":"2016-10-12T09:20:43.000Z","toc":true,"thumbnail":null,"_content":"\n# ARM 处理器寻址方式\n\n所谓寻址方式，是根据指令中的地址码来实现寻找真实操作数地址的方式，ARM处理器有9种基本寻址方式。\n\n## 寄存器寻址\n\n操作数的值在寄存器中，指令中的地址码指出的是寄存器编号，指令执行时直接取出寄存器值操作。\n\n## 立即寻址\n\n立即寻址指令中的操作码字段后面的地址码部分就是操作数本身，也就是说，数据就包含在指令当中，取出指令也就取出了可以立即使用的操作数（立即数）。\n\n```\n SUBS R0,R0,#1\n MOV R0,#0xFF00\n```\n\n立即数要以“#”为前缀。\n\n## 寄存器偏移寻址\n\n寄存器偏移寻址是ARM指令集特有的寻址方式，当第2操作数是寄存器偏移方式时，第2个寄存器操作数在与第1个操作数结合之前，进行移位操作。\n\n```\n MOV R0,R2,LSL #3        ;R2的值左移3位，结果放入R0\n ANDS R1,R1,R2,LSL R3    ;R2的值左移R3位，然后与R1相与，结果放入R1\n```\n\n可采用的移位操作如下：\n\nLSL: 逻辑左移（Logical Shift Left）,寄存器中字的底端空出的位补0\n\nLSR: 逻辑右移（Logical Shift Right）,寄存器的高端空出位补0\n\nASR: 算术右移（Arithmetic Shift Right）,移位过程中保持符号位不变，即如果源操作数为正数，则字的高端空出的位补0，否则补1\n\nROR: 循环右移(Rotate Right),由字的低端移出的位填入字的高端空出的位\n\nRRX:带拓展标志的循环右移(Rotate Right Extended By 1place),操作数右移一位，高端空出的位用原C标志值填充\n\n## 寄存器间接寻址\n\n寄存器间接寻址指令中的地址码给出的是一个通用的寄存器编号，所需要的操作数保存在寄存器指定地址的存储单元中，即寄存器为操作数的地址指针\n\n```\n LDR R1,[R2]     ;将R2中的数值作为地址，取出此地址中的数据保存在R1中\n SWP R1,R1,[R2]      ;将R2中的数值作为地址，取出此地址中的数值与R1中的值交换\n```\n\n## 基址寻址\n\n基址寻址是将基址寄存器的内容与指令中给出的偏移量相加，形成操作数的有效地址，基址寻址用于访问基址附近的存储单元，常用于查表，数组操作，功能部件寄存器访问等。\n\n```\n LDR R2,[R3,#0x0F]      \n STR R1,[R0,#-2]\n```\n\n## 多寄存器寻址\n\n多寄存器寻址就是一次可以传送几个寄存器的值，允许一条指令传送16个寄存器的任何子集或者所有寄存器。\n\n```\nLDMIA R1!,{R2-R7,R12}   ;将R1单元中的数据读出到R2-R7,R12,R1自动加1\nSTMIA R0!,{R3-R6,R10}   ;将R3-R6,R10中的数据保存到R0指向的地址，R0自动加1\n```\n\n使用多寄存器寻址指令时，寄存器子集的顺序由小到大的顺序排列，连续的寄存器可用“-”连接，否则，用“,”分割书写。\n\n## 堆栈寻址\n\n堆栈是按照特定顺序进行存取的存储区，操作顺序分为“后进先出”和“先进后出”，堆栈寻址时隐含的，它使用一个专门的寄存器（堆栈指针）指向一块存储区域（堆栈），指针所指向的存储单元就是堆栈的栈顶。存储器堆栈可分为两种：\n\n** 向上生长: **向高地址方向生长，称为递增堆栈\n** 向下生长: **向低地址方向生长，称为递减堆栈\n\n堆栈指针指向最后压入的有效数据项，称为满堆栈；堆栈指针指向下一个要放入的空位置，称为空堆栈。这样就有四种类型的堆栈表示递增和递减的满堆栈和空堆栈的各种组合。\n\n满递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向含有有效数据项的最高地址。指令如LDMFA、STMFA等。\n\n空递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向堆栈上的第一个空位置。指令如LDMEA,STMEA等。\n\n满递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向内含有有效数据的最低地址。指令如LDMFD，STMFD等。\n\n空递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向堆栈下的第一个空位置。指令如LDMED，STMED等。\n\n```\n STMFD SP!,{R1-R7,LR}    ;将R1-R7,LR入栈。满递减堆栈\n LDMFD SP!,{R1-R7,LR}    ;数据出栈，满递减堆栈\n```\n\n## 块拷贝寻址\n\n多寄存器传送指令用于一块数据从存储器的某一位置拷贝到另一位置。\n\n```\n STMIA R0!,{R1-R7}   ;将R1-R7的数据保存到存储器中，存储器指针在保存第一个值后增加，增长方向为向上增长。\n```\n\n## 相对寻址\n\n相对寻址是基址寻址的一种变通，由程序计数器PC提供基准地址，指令中的地址码字段作为偏移量，两者相加后得到的地址即为操作数的有效地址。\n\n","source":"_posts/ARM-Addressing-Mode.md","raw":"---\ntitle: ARM寻址方式\ndate: 2016-10-12 09:20:43\ntags: ARM\ntoc: true\ncategories:\nthumbnail:\n---\n\n# ARM 处理器寻址方式\n\n所谓寻址方式，是根据指令中的地址码来实现寻找真实操作数地址的方式，ARM处理器有9种基本寻址方式。\n\n## 寄存器寻址\n\n操作数的值在寄存器中，指令中的地址码指出的是寄存器编号，指令执行时直接取出寄存器值操作。\n\n## 立即寻址\n\n立即寻址指令中的操作码字段后面的地址码部分就是操作数本身，也就是说，数据就包含在指令当中，取出指令也就取出了可以立即使用的操作数（立即数）。\n\n```\n SUBS R0,R0,#1\n MOV R0,#0xFF00\n```\n\n立即数要以“#”为前缀。\n\n## 寄存器偏移寻址\n\n寄存器偏移寻址是ARM指令集特有的寻址方式，当第2操作数是寄存器偏移方式时，第2个寄存器操作数在与第1个操作数结合之前，进行移位操作。\n\n```\n MOV R0,R2,LSL #3        ;R2的值左移3位，结果放入R0\n ANDS R1,R1,R2,LSL R3    ;R2的值左移R3位，然后与R1相与，结果放入R1\n```\n\n可采用的移位操作如下：\n\nLSL: 逻辑左移（Logical Shift Left）,寄存器中字的底端空出的位补0\n\nLSR: 逻辑右移（Logical Shift Right）,寄存器的高端空出位补0\n\nASR: 算术右移（Arithmetic Shift Right）,移位过程中保持符号位不变，即如果源操作数为正数，则字的高端空出的位补0，否则补1\n\nROR: 循环右移(Rotate Right),由字的低端移出的位填入字的高端空出的位\n\nRRX:带拓展标志的循环右移(Rotate Right Extended By 1place),操作数右移一位，高端空出的位用原C标志值填充\n\n## 寄存器间接寻址\n\n寄存器间接寻址指令中的地址码给出的是一个通用的寄存器编号，所需要的操作数保存在寄存器指定地址的存储单元中，即寄存器为操作数的地址指针\n\n```\n LDR R1,[R2]     ;将R2中的数值作为地址，取出此地址中的数据保存在R1中\n SWP R1,R1,[R2]      ;将R2中的数值作为地址，取出此地址中的数值与R1中的值交换\n```\n\n## 基址寻址\n\n基址寻址是将基址寄存器的内容与指令中给出的偏移量相加，形成操作数的有效地址，基址寻址用于访问基址附近的存储单元，常用于查表，数组操作，功能部件寄存器访问等。\n\n```\n LDR R2,[R3,#0x0F]      \n STR R1,[R0,#-2]\n```\n\n## 多寄存器寻址\n\n多寄存器寻址就是一次可以传送几个寄存器的值，允许一条指令传送16个寄存器的任何子集或者所有寄存器。\n\n```\nLDMIA R1!,{R2-R7,R12}   ;将R1单元中的数据读出到R2-R7,R12,R1自动加1\nSTMIA R0!,{R3-R6,R10}   ;将R3-R6,R10中的数据保存到R0指向的地址，R0自动加1\n```\n\n使用多寄存器寻址指令时，寄存器子集的顺序由小到大的顺序排列，连续的寄存器可用“-”连接，否则，用“,”分割书写。\n\n## 堆栈寻址\n\n堆栈是按照特定顺序进行存取的存储区，操作顺序分为“后进先出”和“先进后出”，堆栈寻址时隐含的，它使用一个专门的寄存器（堆栈指针）指向一块存储区域（堆栈），指针所指向的存储单元就是堆栈的栈顶。存储器堆栈可分为两种：\n\n** 向上生长: **向高地址方向生长，称为递增堆栈\n** 向下生长: **向低地址方向生长，称为递减堆栈\n\n堆栈指针指向最后压入的有效数据项，称为满堆栈；堆栈指针指向下一个要放入的空位置，称为空堆栈。这样就有四种类型的堆栈表示递增和递减的满堆栈和空堆栈的各种组合。\n\n满递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向含有有效数据项的最高地址。指令如LDMFA、STMFA等。\n\n空递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向堆栈上的第一个空位置。指令如LDMEA,STMEA等。\n\n满递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向内含有有效数据的最低地址。指令如LDMFD，STMFD等。\n\n空递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向堆栈下的第一个空位置。指令如LDMED，STMED等。\n\n```\n STMFD SP!,{R1-R7,LR}    ;将R1-R7,LR入栈。满递减堆栈\n LDMFD SP!,{R1-R7,LR}    ;数据出栈，满递减堆栈\n```\n\n## 块拷贝寻址\n\n多寄存器传送指令用于一块数据从存储器的某一位置拷贝到另一位置。\n\n```\n STMIA R0!,{R1-R7}   ;将R1-R7的数据保存到存储器中，存储器指针在保存第一个值后增加，增长方向为向上增长。\n```\n\n## 相对寻址\n\n相对寻址是基址寻址的一种变通，由程序计数器PC提供基准地址，指令中的地址码字段作为偏移量，两者相加后得到的地址即为操作数的有效地址。\n\n","slug":"ARM-Addressing-Mode","published":1,"updated":"2016-10-12T06:09:07.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9anb000770g5v3bcfd5y","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"ARM-处理器寻址方式\"><a href=\"#ARM-处理器寻址方式\" class=\"headerlink\" title=\"ARM 处理器寻址方式\"></a>ARM 处理器寻址方式</h1><p>所谓寻址方式，是根据指令中的地址码来实现寻找真实操作数地址的方式，ARM处理器有9种基本寻址方式。</p>\n<h2 id=\"寄存器寻址\"><a href=\"#寄存器寻址\" class=\"headerlink\" title=\"寄存器寻址\"></a>寄存器寻址</h2><p>操作数的值在寄存器中，指令中的地址码指出的是寄存器编号，指令执行时直接取出寄存器值操作。</p>\n<h2 id=\"立即寻址\"><a href=\"#立即寻址\" class=\"headerlink\" title=\"立即寻址\"></a>立即寻址</h2><p>立即寻址指令中的操作码字段后面的地址码部分就是操作数本身，也就是说，数据就包含在指令当中，取出指令也就取出了可以立即使用的操作数（立即数）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SUBS R0,R0,#1</div><div class=\"line\">MOV R0,#0xFF00</div></pre></td></tr></table></figure>\n<p>立即数要以“#”为前缀。</p>\n<h2 id=\"寄存器偏移寻址\"><a href=\"#寄存器偏移寻址\" class=\"headerlink\" title=\"寄存器偏移寻址\"></a>寄存器偏移寻址</h2><p>寄存器偏移寻址是ARM指令集特有的寻址方式，当第2操作数是寄存器偏移方式时，第2个寄存器操作数在与第1个操作数结合之前，进行移位操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MOV R0,R2,LSL #3        ;R2的值左移3位，结果放入R0</div><div class=\"line\">ANDS R1,R1,R2,LSL R3    ;R2的值左移R3位，然后与R1相与，结果放入R1</div></pre></td></tr></table></figure>\n<p>可采用的移位操作如下：</p>\n<p>LSL: 逻辑左移（Logical Shift Left）,寄存器中字的底端空出的位补0</p>\n<p>LSR: 逻辑右移（Logical Shift Right）,寄存器的高端空出位补0</p>\n<p>ASR: 算术右移（Arithmetic Shift Right）,移位过程中保持符号位不变，即如果源操作数为正数，则字的高端空出的位补0，否则补1</p>\n<p>ROR: 循环右移(Rotate Right),由字的低端移出的位填入字的高端空出的位</p>\n<p>RRX:带拓展标志的循环右移(Rotate Right Extended By 1place),操作数右移一位，高端空出的位用原C标志值填充</p>\n<h2 id=\"寄存器间接寻址\"><a href=\"#寄存器间接寻址\" class=\"headerlink\" title=\"寄存器间接寻址\"></a>寄存器间接寻址</h2><p>寄存器间接寻址指令中的地址码给出的是一个通用的寄存器编号，所需要的操作数保存在寄存器指定地址的存储单元中，即寄存器为操作数的地址指针</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LDR R1,[R2]     ;将R2中的数值作为地址，取出此地址中的数据保存在R1中</div><div class=\"line\">SWP R1,R1,[R2]      ;将R2中的数值作为地址，取出此地址中的数值与R1中的值交换</div></pre></td></tr></table></figure>\n<h2 id=\"基址寻址\"><a href=\"#基址寻址\" class=\"headerlink\" title=\"基址寻址\"></a>基址寻址</h2><p>基址寻址是将基址寄存器的内容与指令中给出的偏移量相加，形成操作数的有效地址，基址寻址用于访问基址附近的存储单元，常用于查表，数组操作，功能部件寄存器访问等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LDR R2,[R3,#0x0F]      </div><div class=\"line\">STR R1,[R0,#-2]</div></pre></td></tr></table></figure>\n<h2 id=\"多寄存器寻址\"><a href=\"#多寄存器寻址\" class=\"headerlink\" title=\"多寄存器寻址\"></a>多寄存器寻址</h2><p>多寄存器寻址就是一次可以传送几个寄存器的值，允许一条指令传送16个寄存器的任何子集或者所有寄存器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LDMIA R1!,&#123;R2-R7,R12&#125;   ;将R1单元中的数据读出到R2-R7,R12,R1自动加1</div><div class=\"line\">STMIA R0!,&#123;R3-R6,R10&#125;   ;将R3-R6,R10中的数据保存到R0指向的地址，R0自动加1</div></pre></td></tr></table></figure>\n<p>使用多寄存器寻址指令时，寄存器子集的顺序由小到大的顺序排列，连续的寄存器可用“-”连接，否则，用“,”分割书写。</p>\n<h2 id=\"堆栈寻址\"><a href=\"#堆栈寻址\" class=\"headerlink\" title=\"堆栈寻址\"></a>堆栈寻址</h2><p>堆栈是按照特定顺序进行存取的存储区，操作顺序分为“后进先出”和“先进后出”，堆栈寻址时隐含的，它使用一个专门的寄存器（堆栈指针）指向一块存储区域（堆栈），指针所指向的存储单元就是堆栈的栈顶。存储器堆栈可分为两种：</p>\n<p><strong> 向上生长: </strong>向高地址方向生长，称为递增堆栈<br><strong> 向下生长: </strong>向低地址方向生长，称为递减堆栈</p>\n<p>堆栈指针指向最后压入的有效数据项，称为满堆栈；堆栈指针指向下一个要放入的空位置，称为空堆栈。这样就有四种类型的堆栈表示递增和递减的满堆栈和空堆栈的各种组合。</p>\n<p>满递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向含有有效数据项的最高地址。指令如LDMFA、STMFA等。</p>\n<p>空递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向堆栈上的第一个空位置。指令如LDMEA,STMEA等。</p>\n<p>满递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向内含有有效数据的最低地址。指令如LDMFD，STMFD等。</p>\n<p>空递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向堆栈下的第一个空位置。指令如LDMED，STMED等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">STMFD SP!,&#123;R1-R7,LR&#125;    ;将R1-R7,LR入栈。满递减堆栈</div><div class=\"line\">LDMFD SP!,&#123;R1-R7,LR&#125;    ;数据出栈，满递减堆栈</div></pre></td></tr></table></figure>\n<h2 id=\"块拷贝寻址\"><a href=\"#块拷贝寻址\" class=\"headerlink\" title=\"块拷贝寻址\"></a>块拷贝寻址</h2><p>多寄存器传送指令用于一块数据从存储器的某一位置拷贝到另一位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">STMIA R0!,&#123;R1-R7&#125;   ;将R1-R7的数据保存到存储器中，存储器指针在保存第一个值后增加，增长方向为向上增长。</div></pre></td></tr></table></figure>\n<h2 id=\"相对寻址\"><a href=\"#相对寻址\" class=\"headerlink\" title=\"相对寻址\"></a>相对寻址</h2><p>相对寻址是基址寻址的一种变通，由程序计数器PC提供基准地址，指令中的地址码字段作为偏移量，两者相加后得到的地址即为操作数的有效地址。</p>\n","excerpt":"","more":"<h1 id=\"ARM-处理器寻址方式\"><a href=\"#ARM-处理器寻址方式\" class=\"headerlink\" title=\"ARM 处理器寻址方式\"></a>ARM 处理器寻址方式</h1><p>所谓寻址方式，是根据指令中的地址码来实现寻找真实操作数地址的方式，ARM处理器有9种基本寻址方式。</p>\n<h2 id=\"寄存器寻址\"><a href=\"#寄存器寻址\" class=\"headerlink\" title=\"寄存器寻址\"></a>寄存器寻址</h2><p>操作数的值在寄存器中，指令中的地址码指出的是寄存器编号，指令执行时直接取出寄存器值操作。</p>\n<h2 id=\"立即寻址\"><a href=\"#立即寻址\" class=\"headerlink\" title=\"立即寻址\"></a>立即寻址</h2><p>立即寻址指令中的操作码字段后面的地址码部分就是操作数本身，也就是说，数据就包含在指令当中，取出指令也就取出了可以立即使用的操作数（立即数）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SUBS R0,R0,#1</div><div class=\"line\">MOV R0,#0xFF00</div></pre></td></tr></table></figure>\n<p>立即数要以“#”为前缀。</p>\n<h2 id=\"寄存器偏移寻址\"><a href=\"#寄存器偏移寻址\" class=\"headerlink\" title=\"寄存器偏移寻址\"></a>寄存器偏移寻址</h2><p>寄存器偏移寻址是ARM指令集特有的寻址方式，当第2操作数是寄存器偏移方式时，第2个寄存器操作数在与第1个操作数结合之前，进行移位操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MOV R0,R2,LSL #3        ;R2的值左移3位，结果放入R0</div><div class=\"line\">ANDS R1,R1,R2,LSL R3    ;R2的值左移R3位，然后与R1相与，结果放入R1</div></pre></td></tr></table></figure>\n<p>可采用的移位操作如下：</p>\n<p>LSL: 逻辑左移（Logical Shift Left）,寄存器中字的底端空出的位补0</p>\n<p>LSR: 逻辑右移（Logical Shift Right）,寄存器的高端空出位补0</p>\n<p>ASR: 算术右移（Arithmetic Shift Right）,移位过程中保持符号位不变，即如果源操作数为正数，则字的高端空出的位补0，否则补1</p>\n<p>ROR: 循环右移(Rotate Right),由字的低端移出的位填入字的高端空出的位</p>\n<p>RRX:带拓展标志的循环右移(Rotate Right Extended By 1place),操作数右移一位，高端空出的位用原C标志值填充</p>\n<h2 id=\"寄存器间接寻址\"><a href=\"#寄存器间接寻址\" class=\"headerlink\" title=\"寄存器间接寻址\"></a>寄存器间接寻址</h2><p>寄存器间接寻址指令中的地址码给出的是一个通用的寄存器编号，所需要的操作数保存在寄存器指定地址的存储单元中，即寄存器为操作数的地址指针</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LDR R1,[R2]     ;将R2中的数值作为地址，取出此地址中的数据保存在R1中</div><div class=\"line\">SWP R1,R1,[R2]      ;将R2中的数值作为地址，取出此地址中的数值与R1中的值交换</div></pre></td></tr></table></figure>\n<h2 id=\"基址寻址\"><a href=\"#基址寻址\" class=\"headerlink\" title=\"基址寻址\"></a>基址寻址</h2><p>基址寻址是将基址寄存器的内容与指令中给出的偏移量相加，形成操作数的有效地址，基址寻址用于访问基址附近的存储单元，常用于查表，数组操作，功能部件寄存器访问等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LDR R2,[R3,#0x0F]      </div><div class=\"line\">STR R1,[R0,#-2]</div></pre></td></tr></table></figure>\n<h2 id=\"多寄存器寻址\"><a href=\"#多寄存器寻址\" class=\"headerlink\" title=\"多寄存器寻址\"></a>多寄存器寻址</h2><p>多寄存器寻址就是一次可以传送几个寄存器的值，允许一条指令传送16个寄存器的任何子集或者所有寄存器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LDMIA R1!,&#123;R2-R7,R12&#125;   ;将R1单元中的数据读出到R2-R7,R12,R1自动加1</div><div class=\"line\">STMIA R0!,&#123;R3-R6,R10&#125;   ;将R3-R6,R10中的数据保存到R0指向的地址，R0自动加1</div></pre></td></tr></table></figure>\n<p>使用多寄存器寻址指令时，寄存器子集的顺序由小到大的顺序排列，连续的寄存器可用“-”连接，否则，用“,”分割书写。</p>\n<h2 id=\"堆栈寻址\"><a href=\"#堆栈寻址\" class=\"headerlink\" title=\"堆栈寻址\"></a>堆栈寻址</h2><p>堆栈是按照特定顺序进行存取的存储区，操作顺序分为“后进先出”和“先进后出”，堆栈寻址时隐含的，它使用一个专门的寄存器（堆栈指针）指向一块存储区域（堆栈），指针所指向的存储单元就是堆栈的栈顶。存储器堆栈可分为两种：</p>\n<p><strong> 向上生长: </strong>向高地址方向生长，称为递增堆栈<br><strong> 向下生长: </strong>向低地址方向生长，称为递减堆栈</p>\n<p>堆栈指针指向最后压入的有效数据项，称为满堆栈；堆栈指针指向下一个要放入的空位置，称为空堆栈。这样就有四种类型的堆栈表示递增和递减的满堆栈和空堆栈的各种组合。</p>\n<p>满递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向含有有效数据项的最高地址。指令如LDMFA、STMFA等。</p>\n<p>空递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向堆栈上的第一个空位置。指令如LDMEA,STMEA等。</p>\n<p>满递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向内含有有效数据的最低地址。指令如LDMFD，STMFD等。</p>\n<p>空递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向堆栈下的第一个空位置。指令如LDMED，STMED等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">STMFD SP!,&#123;R1-R7,LR&#125;    ;将R1-R7,LR入栈。满递减堆栈</div><div class=\"line\">LDMFD SP!,&#123;R1-R7,LR&#125;    ;数据出栈，满递减堆栈</div></pre></td></tr></table></figure>\n<h2 id=\"块拷贝寻址\"><a href=\"#块拷贝寻址\" class=\"headerlink\" title=\"块拷贝寻址\"></a>块拷贝寻址</h2><p>多寄存器传送指令用于一块数据从存储器的某一位置拷贝到另一位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">STMIA R0!,&#123;R1-R7&#125;   ;将R1-R7的数据保存到存储器中，存储器指针在保存第一个值后增加，增长方向为向上增长。</div></pre></td></tr></table></figure>\n<h2 id=\"相对寻址\"><a href=\"#相对寻址\" class=\"headerlink\" title=\"相对寻址\"></a>相对寻址</h2><p>相对寻址是基址寻址的一种变通，由程序计数器PC提供基准地址，指令中的地址码字段作为偏移量，两者相加后得到的地址即为操作数的有效地址。</p>\n"},{"title":"CSharp 定义类成员关键字","date":"2016-08-22T14:36:05.000Z","_content":"\n## 定义字段：\n`public`成员可以由任何代码访问。\n`private`成员只能由类中的代码访问（默认）。\n`internal`成员只能由定义它的程序集（内部）的代码访问 。\n`protected`成员只能由类货派生类中的代码访问。\n*`internal protected`可以一起使用，表示仅能由项目中的派生类访问*\n`static` \n\n1. 用在类里的属性、方法前面:\n\t这样的静态属性与方法不需要创建实例就能访问，通过类名或对象名都能访问它，静态属性、方法只有“一份”：即如果一个类新建有N个对象，这N 个对象只有同一个静态属性与方法；**可以用来作为全局变量在不同窗口间完成数据共享**\n2. 方法内部的静态变量：\n   方法内部的静态变量，执行完静态变量值不消失，再次执行此对象的方法时，值仍存在，它不是在栈中分配的，是在静态区分析的， 这是与局部变量最大的区别；\n\n## 定义方法：\n`virtual`方法可以重写\n`abstract`方法必须在非抽象的派生类中重写（只用于抽象类中）\n`override`方法重写了一个基类方法（基类方法必须是可重写的方法，如果重写方法，就必须使用该关键字）\n`extern`方法定义放在其他地方\n`sealed`封闭，不允许派生类重写\n\n## 定义属性：\n与定义字段类似，但是需要定义访问器，通过`get set`关键字定义","source":"_posts/CSharpKeyWords.md","raw":"---\ntitle: CSharp 定义类成员关键字\ndate: 2016-08-22 14:36:05\ntags: \n---\n\n## 定义字段：\n`public`成员可以由任何代码访问。\n`private`成员只能由类中的代码访问（默认）。\n`internal`成员只能由定义它的程序集（内部）的代码访问 。\n`protected`成员只能由类货派生类中的代码访问。\n*`internal protected`可以一起使用，表示仅能由项目中的派生类访问*\n`static` \n\n1. 用在类里的属性、方法前面:\n\t这样的静态属性与方法不需要创建实例就能访问，通过类名或对象名都能访问它，静态属性、方法只有“一份”：即如果一个类新建有N个对象，这N 个对象只有同一个静态属性与方法；**可以用来作为全局变量在不同窗口间完成数据共享**\n2. 方法内部的静态变量：\n   方法内部的静态变量，执行完静态变量值不消失，再次执行此对象的方法时，值仍存在，它不是在栈中分配的，是在静态区分析的， 这是与局部变量最大的区别；\n\n## 定义方法：\n`virtual`方法可以重写\n`abstract`方法必须在非抽象的派生类中重写（只用于抽象类中）\n`override`方法重写了一个基类方法（基类方法必须是可重写的方法，如果重写方法，就必须使用该关键字）\n`extern`方法定义放在其他地方\n`sealed`封闭，不允许派生类重写\n\n## 定义属性：\n与定义字段类似，但是需要定义访问器，通过`get set`关键字定义","slug":"CSharpKeyWords","published":1,"updated":"2016-08-29T02:07:31.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9anc000870g51swwkqdt","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"定义字段：\"><a href=\"#定义字段：\" class=\"headerlink\" title=\"定义字段：\"></a>定义字段：</h2><p><code>public</code>成员可以由任何代码访问。<br><code>private</code>成员只能由类中的代码访问（默认）。<br><code>internal</code>成员只能由定义它的程序集（内部）的代码访问 。<br><code>protected</code>成员只能由类货派生类中的代码访问。<br><em><code>internal protected</code>可以一起使用，表示仅能由项目中的派生类访问</em><br><code>static</code> </p>\n<ol>\n<li>用在类里的属性、方法前面:<br> 这样的静态属性与方法不需要创建实例就能访问，通过类名或对象名都能访问它，静态属性、方法只有“一份”：即如果一个类新建有N个对象，这N 个对象只有同一个静态属性与方法；<strong>可以用来作为全局变量在不同窗口间完成数据共享</strong></li>\n<li>方法内部的静态变量：<br>方法内部的静态变量，执行完静态变量值不消失，再次执行此对象的方法时，值仍存在，它不是在栈中分配的，是在静态区分析的， 这是与局部变量最大的区别；</li>\n</ol>\n<h2 id=\"定义方法：\"><a href=\"#定义方法：\" class=\"headerlink\" title=\"定义方法：\"></a>定义方法：</h2><p><code>virtual</code>方法可以重写<br><code>abstract</code>方法必须在非抽象的派生类中重写（只用于抽象类中）<br><code>override</code>方法重写了一个基类方法（基类方法必须是可重写的方法，如果重写方法，就必须使用该关键字）<br><code>extern</code>方法定义放在其他地方<br><code>sealed</code>封闭，不允许派生类重写</p>\n<h2 id=\"定义属性：\"><a href=\"#定义属性：\" class=\"headerlink\" title=\"定义属性：\"></a>定义属性：</h2><p>与定义字段类似，但是需要定义访问器，通过<code>get set</code>关键字定义</p>\n","excerpt":"","more":"<h2 id=\"定义字段：\"><a href=\"#定义字段：\" class=\"headerlink\" title=\"定义字段：\"></a>定义字段：</h2><p><code>public</code>成员可以由任何代码访问。<br><code>private</code>成员只能由类中的代码访问（默认）。<br><code>internal</code>成员只能由定义它的程序集（内部）的代码访问 。<br><code>protected</code>成员只能由类货派生类中的代码访问。<br><em><code>internal protected</code>可以一起使用，表示仅能由项目中的派生类访问</em><br><code>static</code> </p>\n<ol>\n<li>用在类里的属性、方法前面:<br> 这样的静态属性与方法不需要创建实例就能访问，通过类名或对象名都能访问它，静态属性、方法只有“一份”：即如果一个类新建有N个对象，这N 个对象只有同一个静态属性与方法；<strong>可以用来作为全局变量在不同窗口间完成数据共享</strong></li>\n<li>方法内部的静态变量：<br>方法内部的静态变量，执行完静态变量值不消失，再次执行此对象的方法时，值仍存在，它不是在栈中分配的，是在静态区分析的， 这是与局部变量最大的区别；</li>\n</ol>\n<h2 id=\"定义方法：\"><a href=\"#定义方法：\" class=\"headerlink\" title=\"定义方法：\"></a>定义方法：</h2><p><code>virtual</code>方法可以重写<br><code>abstract</code>方法必须在非抽象的派生类中重写（只用于抽象类中）<br><code>override</code>方法重写了一个基类方法（基类方法必须是可重写的方法，如果重写方法，就必须使用该关键字）<br><code>extern</code>方法定义放在其他地方<br><code>sealed</code>封闭，不允许派生类重写</p>\n<h2 id=\"定义属性：\"><a href=\"#定义属性：\" class=\"headerlink\" title=\"定义属性：\"></a>定义属性：</h2><p>与定义字段类似，但是需要定义访问器，通过<code>get set</code>关键字定义</p>\n"},{"title":"C#学习笔记","date":"2016-07-18T18:58:10.000Z","toc":true,"_content":"<!--more-->\n## C#关键字\n<center>\n![C#关键字](http://o9kzgz0kz.bkt.clouddn.com/C%23%E5%85%B3%E9%94%AE%E5%AD%97.jpg)\n![C#关键字_上下文](http://o9kzgz0kz.bkt.clouddn.com/C%23%E5%85%B3%E9%94%AE%E5%AD%97_%E4%B8%8A%E4%B8%8B%E6%96%87.jpg)\n</center>\n\n>\n`abstract `\n可以和类、方法、属性、索引器及事件一起使用，标识一个可以扩展但不能被实体化的、必须被实现的类或方法。\n\n>\n`as`\n一个转换操作符，如果转换失败，就返回null。 \n\n>\n`base`\n用于访问被派生类或构造中的同名成员隐藏的基类成员。\n\n>\n`catch`\n定义一个代码块，在特定类型异常抛出时，执行块内代码。参见try和finally。\n\n>\n`checked`\n既是操作符又是语句。确保编译器运行时，检查整数类型操作或转换时出现的溢出。\n\n>\n`const`\n标识一个可在编译时计算出来的变量值，即一经指派不可修改的值。\n\n>\n`delegate`\n指定一个声明为一种委托类型。委托把方法封装为可调用实体，能在委托实体中调用。\n\n>\n`enum`\n表示一个已命名常量群集的值类型。\n\n>\n`event`\n允许一个类或对象提供通知的成员，他必须是委托类型。\n\n>\n`explicit`\n一个定义用户自定义转换操作符的操作符，通常用来将内建类型转换为用户定义类型或反向操作。必须再转换时调用显示转换操作符。\n\n>\n`extern`\n标识一个将在外部（通常不是c#语言）实现的方法。\n\n>\n`finally`\n定义一个代码块，在程序控制离开try代码快后执行。参见try和catch。\n\n>\n`fixed`\n在一个代码块执行时，在固定内存位置为一个变量指派一个指针。\n\n>\n`foreach`\n用于遍历一个群集的元素。\n\n>\n`goto`\n一个跳转语句，将程序执行重定向到一个标签语句。\n\n>\n`implicit`\n一个操作符，定义一个用户定义的转换操作符。 通常用来将预定义类型转换为用户定义类型或反向操作。隐式转换操作符必须在转换时使用。\n\n>\n`interface`\n将一个声明指定为接口类型，即实现类或构造必须遵循的合同。\n\n>\n`internal`\n一个访问修饰符。\n\n>\n`namespace`\n定义一个逻辑组的类型和命名空间。\n\n>\n`operator`\n用来声明或多载一个操作符。\n\n>\n`out`\n标识一个参数值会受影响的参数，但在传入方法时，该参数无需先初始化。\n\n\n>\n`params`\n声明一个参数数组。如果使用，必须修改指定的最后一个参数。允许可选参数。\n\n>\n`readonly`\n标识一个变量的值在初始化后不可修改。\n\n>\n`ref`\n标识一个参数值可能会受影响的参数。\n\n>\n`sealed`\n防止类型被派生，防止方法和property被覆载。\n\n>\n`sizeof`\n一个操作符，以byte为单位返回一个值类型的长度。\n\n>\n`stackalloc`\n返回在堆上分配的一个内存块的指针。\n\n>\n`struct`\nstruct是一种值类型，可以声明常量、字段、方法、property、索引器、操作符、构造器和内嵌类型。\n\n>\n`throw`\n抛出一个异常。\n\n>\n`try`\n异常处理代码块的组成部分之一。try代码块包括可能会抛出异常的代码。参阅catch和finally关键字。\n\n>\n`typeof`\n一个操作符，返回传入参数的类型。\n\n>\n`unchecked`\n禁止溢出检查。\n\n>\n`unsafe`\n标注包含指针操作的代码块、方法或类。\n\n>\n`using`\n当用于命名空间时，using关键字允许访问该命名空间中的类型， 而无需指定其全名。也用于定义finalization操作的范围。\n\n>\n`virtual`\n一个方法修饰符，标识可被覆载的方法。\n\n>\n`volatile`\n标识一个可被操作系统、某些硬件设备或并发线程修改的attribute。\n\n## 与C/C++的区别\n\n- C#中没有全局函数声明在类型声明的外部，方法也没有默认的返回类型，必须包含返回类型或`void`.","source":"_posts/CSharp.md","raw":"---\ntitle: C#学习笔记\ndate: 2016-07-18 18:58:10\ntoc: true\ncategories: C#\ntags: C#学习笔记\n---\n<!--more-->\n## C#关键字\n<center>\n![C#关键字](http://o9kzgz0kz.bkt.clouddn.com/C%23%E5%85%B3%E9%94%AE%E5%AD%97.jpg)\n![C#关键字_上下文](http://o9kzgz0kz.bkt.clouddn.com/C%23%E5%85%B3%E9%94%AE%E5%AD%97_%E4%B8%8A%E4%B8%8B%E6%96%87.jpg)\n</center>\n\n>\n`abstract `\n可以和类、方法、属性、索引器及事件一起使用，标识一个可以扩展但不能被实体化的、必须被实现的类或方法。\n\n>\n`as`\n一个转换操作符，如果转换失败，就返回null。 \n\n>\n`base`\n用于访问被派生类或构造中的同名成员隐藏的基类成员。\n\n>\n`catch`\n定义一个代码块，在特定类型异常抛出时，执行块内代码。参见try和finally。\n\n>\n`checked`\n既是操作符又是语句。确保编译器运行时，检查整数类型操作或转换时出现的溢出。\n\n>\n`const`\n标识一个可在编译时计算出来的变量值，即一经指派不可修改的值。\n\n>\n`delegate`\n指定一个声明为一种委托类型。委托把方法封装为可调用实体，能在委托实体中调用。\n\n>\n`enum`\n表示一个已命名常量群集的值类型。\n\n>\n`event`\n允许一个类或对象提供通知的成员，他必须是委托类型。\n\n>\n`explicit`\n一个定义用户自定义转换操作符的操作符，通常用来将内建类型转换为用户定义类型或反向操作。必须再转换时调用显示转换操作符。\n\n>\n`extern`\n标识一个将在外部（通常不是c#语言）实现的方法。\n\n>\n`finally`\n定义一个代码块，在程序控制离开try代码快后执行。参见try和catch。\n\n>\n`fixed`\n在一个代码块执行时，在固定内存位置为一个变量指派一个指针。\n\n>\n`foreach`\n用于遍历一个群集的元素。\n\n>\n`goto`\n一个跳转语句，将程序执行重定向到一个标签语句。\n\n>\n`implicit`\n一个操作符，定义一个用户定义的转换操作符。 通常用来将预定义类型转换为用户定义类型或反向操作。隐式转换操作符必须在转换时使用。\n\n>\n`interface`\n将一个声明指定为接口类型，即实现类或构造必须遵循的合同。\n\n>\n`internal`\n一个访问修饰符。\n\n>\n`namespace`\n定义一个逻辑组的类型和命名空间。\n\n>\n`operator`\n用来声明或多载一个操作符。\n\n>\n`out`\n标识一个参数值会受影响的参数，但在传入方法时，该参数无需先初始化。\n\n\n>\n`params`\n声明一个参数数组。如果使用，必须修改指定的最后一个参数。允许可选参数。\n\n>\n`readonly`\n标识一个变量的值在初始化后不可修改。\n\n>\n`ref`\n标识一个参数值可能会受影响的参数。\n\n>\n`sealed`\n防止类型被派生，防止方法和property被覆载。\n\n>\n`sizeof`\n一个操作符，以byte为单位返回一个值类型的长度。\n\n>\n`stackalloc`\n返回在堆上分配的一个内存块的指针。\n\n>\n`struct`\nstruct是一种值类型，可以声明常量、字段、方法、property、索引器、操作符、构造器和内嵌类型。\n\n>\n`throw`\n抛出一个异常。\n\n>\n`try`\n异常处理代码块的组成部分之一。try代码块包括可能会抛出异常的代码。参阅catch和finally关键字。\n\n>\n`typeof`\n一个操作符，返回传入参数的类型。\n\n>\n`unchecked`\n禁止溢出检查。\n\n>\n`unsafe`\n标注包含指针操作的代码块、方法或类。\n\n>\n`using`\n当用于命名空间时，using关键字允许访问该命名空间中的类型， 而无需指定其全名。也用于定义finalization操作的范围。\n\n>\n`virtual`\n一个方法修饰符，标识可被覆载的方法。\n\n>\n`volatile`\n标识一个可被操作系统、某些硬件设备或并发线程修改的attribute。\n\n## 与C/C++的区别\n\n- C#中没有全局函数声明在类型声明的外部，方法也没有默认的返回类型，必须包含返回类型或`void`.","slug":"CSharp","published":1,"updated":"2016-08-02T08:09:13.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9anf000a70g5scqpm698","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><a id=\"more\"></a>\n<h2 id=\"C-关键字\"><a href=\"#C-关键字\" class=\"headerlink\" title=\"C#关键字\"></a>C#关键字</h2><center><br><img src=\"http://o9kzgz0kz.bkt.clouddn.com/C%23%E5%85%B3%E9%94%AE%E5%AD%97.jpg\" alt=\"C#关键字\"><br><img src=\"http://o9kzgz0kz.bkt.clouddn.com/C%23%E5%85%B3%E9%94%AE%E5%AD%97_%E4%B8%8A%E4%B8%8B%E6%96%87.jpg\" alt=\"C#关键字_上下文\"><br></center>\n\n<p>&gt;<br><code>abstract</code><br>可以和类、方法、属性、索引器及事件一起使用，标识一个可以扩展但不能被实体化的、必须被实现的类或方法。</p>\n<p>&gt;<br><code>as</code><br>一个转换操作符，如果转换失败，就返回null。 </p>\n<p>&gt;<br><code>base</code><br>用于访问被派生类或构造中的同名成员隐藏的基类成员。</p>\n<p>&gt;<br><code>catch</code><br>定义一个代码块，在特定类型异常抛出时，执行块内代码。参见try和finally。</p>\n<p>&gt;<br><code>checked</code><br>既是操作符又是语句。确保编译器运行时，检查整数类型操作或转换时出现的溢出。</p>\n<p>&gt;<br><code>const</code><br>标识一个可在编译时计算出来的变量值，即一经指派不可修改的值。</p>\n<p>&gt;<br><code>delegate</code><br>指定一个声明为一种委托类型。委托把方法封装为可调用实体，能在委托实体中调用。</p>\n<p>&gt;<br><code>enum</code><br>表示一个已命名常量群集的值类型。</p>\n<p>&gt;<br><code>event</code><br>允许一个类或对象提供通知的成员，他必须是委托类型。</p>\n<p>&gt;<br><code>explicit</code><br>一个定义用户自定义转换操作符的操作符，通常用来将内建类型转换为用户定义类型或反向操作。必须再转换时调用显示转换操作符。</p>\n<p>&gt;<br><code>extern</code><br>标识一个将在外部（通常不是c#语言）实现的方法。</p>\n<p>&gt;<br><code>finally</code><br>定义一个代码块，在程序控制离开try代码快后执行。参见try和catch。</p>\n<p>&gt;<br><code>fixed</code><br>在一个代码块执行时，在固定内存位置为一个变量指派一个指针。</p>\n<p>&gt;<br><code>foreach</code><br>用于遍历一个群集的元素。</p>\n<p>&gt;<br><code>goto</code><br>一个跳转语句，将程序执行重定向到一个标签语句。</p>\n<p>&gt;<br><code>implicit</code><br>一个操作符，定义一个用户定义的转换操作符。 通常用来将预定义类型转换为用户定义类型或反向操作。隐式转换操作符必须在转换时使用。</p>\n<p>&gt;<br><code>interface</code><br>将一个声明指定为接口类型，即实现类或构造必须遵循的合同。</p>\n<p>&gt;<br><code>internal</code><br>一个访问修饰符。</p>\n<p>&gt;<br><code>namespace</code><br>定义一个逻辑组的类型和命名空间。</p>\n<p>&gt;<br><code>operator</code><br>用来声明或多载一个操作符。</p>\n<p>&gt;<br><code>out</code><br>标识一个参数值会受影响的参数，但在传入方法时，该参数无需先初始化。</p>\n<p>&gt;<br><code>params</code><br>声明一个参数数组。如果使用，必须修改指定的最后一个参数。允许可选参数。</p>\n<p>&gt;<br><code>readonly</code><br>标识一个变量的值在初始化后不可修改。</p>\n<p>&gt;<br><code>ref</code><br>标识一个参数值可能会受影响的参数。</p>\n<p>&gt;<br><code>sealed</code><br>防止类型被派生，防止方法和property被覆载。</p>\n<p>&gt;<br><code>sizeof</code><br>一个操作符，以byte为单位返回一个值类型的长度。</p>\n<p>&gt;<br><code>stackalloc</code><br>返回在堆上分配的一个内存块的指针。</p>\n<p>&gt;<br><code>struct</code><br>struct是一种值类型，可以声明常量、字段、方法、property、索引器、操作符、构造器和内嵌类型。</p>\n<p>&gt;<br><code>throw</code><br>抛出一个异常。</p>\n<p>&gt;<br><code>try</code><br>异常处理代码块的组成部分之一。try代码块包括可能会抛出异常的代码。参阅catch和finally关键字。</p>\n<p>&gt;<br><code>typeof</code><br>一个操作符，返回传入参数的类型。</p>\n<p>&gt;<br><code>unchecked</code><br>禁止溢出检查。</p>\n<p>&gt;<br><code>unsafe</code><br>标注包含指针操作的代码块、方法或类。</p>\n<p>&gt;<br><code>using</code><br>当用于命名空间时，using关键字允许访问该命名空间中的类型， 而无需指定其全名。也用于定义finalization操作的范围。</p>\n<p>&gt;<br><code>virtual</code><br>一个方法修饰符，标识可被覆载的方法。</p>\n<p>&gt;<br><code>volatile</code><br>标识一个可被操作系统、某些硬件设备或并发线程修改的attribute。</p>\n<h2 id=\"与C-C-的区别\"><a href=\"#与C-C-的区别\" class=\"headerlink\" title=\"与C/C++的区别\"></a>与C/C++的区别</h2><ul>\n<li>C#中没有全局函数声明在类型声明的外部，方法也没有默认的返回类型，必须包含返回类型或<code>void</code>.</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"C-关键字\"><a href=\"#C-关键字\" class=\"headerlink\" title=\"C#关键字\"></a>C#关键字</h2><center><br><img src=\"http://o9kzgz0kz.bkt.clouddn.com/C%23%E5%85%B3%E9%94%AE%E5%AD%97.jpg\" alt=\"C#关键字\"><br><img src=\"http://o9kzgz0kz.bkt.clouddn.com/C%23%E5%85%B3%E9%94%AE%E5%AD%97_%E4%B8%8A%E4%B8%8B%E6%96%87.jpg\" alt=\"C#关键字_上下文\"><br></center>\n\n<p>&gt;<br><code>abstract</code><br>可以和类、方法、属性、索引器及事件一起使用，标识一个可以扩展但不能被实体化的、必须被实现的类或方法。</p>\n<p>&gt;<br><code>as</code><br>一个转换操作符，如果转换失败，就返回null。 </p>\n<p>&gt;<br><code>base</code><br>用于访问被派生类或构造中的同名成员隐藏的基类成员。</p>\n<p>&gt;<br><code>catch</code><br>定义一个代码块，在特定类型异常抛出时，执行块内代码。参见try和finally。</p>\n<p>&gt;<br><code>checked</code><br>既是操作符又是语句。确保编译器运行时，检查整数类型操作或转换时出现的溢出。</p>\n<p>&gt;<br><code>const</code><br>标识一个可在编译时计算出来的变量值，即一经指派不可修改的值。</p>\n<p>&gt;<br><code>delegate</code><br>指定一个声明为一种委托类型。委托把方法封装为可调用实体，能在委托实体中调用。</p>\n<p>&gt;<br><code>enum</code><br>表示一个已命名常量群集的值类型。</p>\n<p>&gt;<br><code>event</code><br>允许一个类或对象提供通知的成员，他必须是委托类型。</p>\n<p>&gt;<br><code>explicit</code><br>一个定义用户自定义转换操作符的操作符，通常用来将内建类型转换为用户定义类型或反向操作。必须再转换时调用显示转换操作符。</p>\n<p>&gt;<br><code>extern</code><br>标识一个将在外部（通常不是c#语言）实现的方法。</p>\n<p>&gt;<br><code>finally</code><br>定义一个代码块，在程序控制离开try代码快后执行。参见try和catch。</p>\n<p>&gt;<br><code>fixed</code><br>在一个代码块执行时，在固定内存位置为一个变量指派一个指针。</p>\n<p>&gt;<br><code>foreach</code><br>用于遍历一个群集的元素。</p>\n<p>&gt;<br><code>goto</code><br>一个跳转语句，将程序执行重定向到一个标签语句。</p>\n<p>&gt;<br><code>implicit</code><br>一个操作符，定义一个用户定义的转换操作符。 通常用来将预定义类型转换为用户定义类型或反向操作。隐式转换操作符必须在转换时使用。</p>\n<p>&gt;<br><code>interface</code><br>将一个声明指定为接口类型，即实现类或构造必须遵循的合同。</p>\n<p>&gt;<br><code>internal</code><br>一个访问修饰符。</p>\n<p>&gt;<br><code>namespace</code><br>定义一个逻辑组的类型和命名空间。</p>\n<p>&gt;<br><code>operator</code><br>用来声明或多载一个操作符。</p>\n<p>&gt;<br><code>out</code><br>标识一个参数值会受影响的参数，但在传入方法时，该参数无需先初始化。</p>\n<p>&gt;<br><code>params</code><br>声明一个参数数组。如果使用，必须修改指定的最后一个参数。允许可选参数。</p>\n<p>&gt;<br><code>readonly</code><br>标识一个变量的值在初始化后不可修改。</p>\n<p>&gt;<br><code>ref</code><br>标识一个参数值可能会受影响的参数。</p>\n<p>&gt;<br><code>sealed</code><br>防止类型被派生，防止方法和property被覆载。</p>\n<p>&gt;<br><code>sizeof</code><br>一个操作符，以byte为单位返回一个值类型的长度。</p>\n<p>&gt;<br><code>stackalloc</code><br>返回在堆上分配的一个内存块的指针。</p>\n<p>&gt;<br><code>struct</code><br>struct是一种值类型，可以声明常量、字段、方法、property、索引器、操作符、构造器和内嵌类型。</p>\n<p>&gt;<br><code>throw</code><br>抛出一个异常。</p>\n<p>&gt;<br><code>try</code><br>异常处理代码块的组成部分之一。try代码块包括可能会抛出异常的代码。参阅catch和finally关键字。</p>\n<p>&gt;<br><code>typeof</code><br>一个操作符，返回传入参数的类型。</p>\n<p>&gt;<br><code>unchecked</code><br>禁止溢出检查。</p>\n<p>&gt;<br><code>unsafe</code><br>标注包含指针操作的代码块、方法或类。</p>\n<p>&gt;<br><code>using</code><br>当用于命名空间时，using关键字允许访问该命名空间中的类型， 而无需指定其全名。也用于定义finalization操作的范围。</p>\n<p>&gt;<br><code>virtual</code><br>一个方法修饰符，标识可被覆载的方法。</p>\n<p>&gt;<br><code>volatile</code><br>标识一个可被操作系统、某些硬件设备或并发线程修改的attribute。</p>\n<h2 id=\"与C-C-的区别\"><a href=\"#与C-C-的区别\" class=\"headerlink\" title=\"与C/C++的区别\"></a>与C/C++的区别</h2><ul>\n<li>C#中没有全局函数声明在类型声明的外部，方法也没有默认的返回类型，必须包含返回类型或<code>void</code>.</li>\n</ul>"},{"title":"IIC","toc":true,"date":"2016-08-08T16:41:15.000Z","_content":"I<sup>2</sup>C总线是一个多主(从)机、单端、串行通信总线，由飞利浦公司(现在的NXP公司)发明。典型应用是那些短距、低速的应用场合。使用I<sup>2</sup>C是不需要许可费的，但是如果使用NXP提供的地址字段，则需要支付相关费用。\n\n## 总线结构\nI<sup>2</sup>C是双向开漏两线制总线，由电阻上拉。SDA是其串行数据线，SCL是总线时钟线，用以提供时钟基准。I<sup>2</sup>C地址空间有7bit和10bit两种，大多数I<sup>2</sup>C提供100kbit/s的通信速率，当然这些都不是标准的一部分，视具体应用而定。鉴于通信帧中包含从机地址、从机应答等信息，实际的数据通信速率会比标称的峰值速率低。\n\n最大的从机数目由地址空间的位数决定，同时总线上的电容大小总和受到400PF的限制，这限制了实际的通信距离只有几米，同时为了保证高阻抗和低噪声，一个共同的地也是潜在的需求，这会限制线路板的设计。\n\n## 物理层\n在物理层上，SCL与SDA都是开漏设计，因此需要一个上拉电阻，将总线拉低来设置逻辑\"0\",悬浮时总线被设置成逻辑\"1\",是一个线与逻辑，总线上的任何一个设备拉低总线都会导致总线为低，因此当总线为低时，必定有其他设备在使用总线，此时总线为`BUSY`状态，因此设备可以依靠`SDA`避免总线冲突。\n\n当总线空闲时，两条线都是高状态，启动一次传输，可以通过拉低SDA而保持SCL为高发出`START`信号，释放SDA而保持SCL为高将产生`STOP`信号。除了`START`与`STOP`信号，SDA需保持其状态在SCL为低时，仅当SCL为高时允许切换SDA状态。\n当SCL为低时，由发送器将SDA状态切换至下一状态，然后主机将SCL设置成高电平，一旦SCL为高，接收器读取SDA状态。\n\n## 总线协议(以24Cxx系列EEPROM为例)\nI<sup>2</sup>C总线的一个典型应用即是EEPROM。24Cxx系列存储芯片的操作主要有读写两类(有些芯片还有擦除操作，因为比较特殊，同时写操作同样可以达到同样目的，在此按下不表)。读写操作使用同样的通信协议:先写从机地址，接着传输数据直到结束信号到来。\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/IIC.jpg\"></center>\n\n### 写操作\n首先主机发送开始信号`START`唤醒总线上的从机，接着发送从机地址(包含写信息)，从机在接收到之后与自己的地址信息进行比较，如果匹配则准备接收数据，否则忽略数据。接着发送需要写入的数据地址及数据，最后发送停止信号。从机在此期间将执行自己的状态机完成数据的接收与写入。*(需要注意的是24Cxx系列的EEPROM没法跨页写，也就是对于跨页写入的数据需要执行两次写周期)*写入期间，从机一只处在`BUSY`状态，对外界一切信息均不作响应，写入完成后从机响应ACK信号。\n\n### 读操作\n与写操作类似，首先主机发送开始信号`START`唤醒总线上的从机，接着发送从机地址(包含写信息)，从机在接收到之后与自己的地址信息进行比较，如果匹配则准备接收数据，否则忽略数据。然后再次发送`START`信号与从机地址(包含读信息)，从机在收到后返回相应数据，主机在收到数据后发送应带`ACK`或者`NCK`通知从机接着接收完成或发送下一字节数据，从机发送完最后一个字节数据后，主机可不响应应答信号。\n\n#### 示例代码\n```C\n//函数声明\nvoid Delay_EEPROM(void);\nvoid EEPROM_I2C_Init(void);\nvoid EEPROM_I2C_Start(void);\nvoid EEPROM_I2C_Stop(void);\nunsigned char EEPROM_ReceiveByte( unsigned char ACK );\nunsigned char EEPROM_SendByte( unsigned char Data );\nunsigned char I2C_Read( unsigned char* RAM_Addr, unsigned int EEPROM_Addr, unsigned char Lenth );\nunsigned char I2C_Write( unsigned int EEPROM_Addr, unsigned char* RAM_Addr, unsigned char Lenth );\n\n/***********************************************************************/\n/*  函数名称：Delay_EEPROM                                             */\n/*  函数功能：延时子程序                                               */\n/***********************************************************************/\nvoid Delay_EEPROM(void)\n{\n    _NOP();_NOP();\n    _NOP();_NOP();\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_I2C_Init                                          */\n/*  函数功能：I2C管脚初始化                                            */\n/***********************************************************************/\nvoid EEPROM_I2C_Init(void)\n{\n    IO_EEPROM_SCL_OUT_H;\n    IO_EEPROM_SDA_OUT_H;\n    IO_EEPROM_SCL_DIR_OUT;\n    IO_EEPROM_SDA_DIR_OUT;\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_I2C_Start                                         */\n/*  函数功能：启动I2C总线                                              */\n/*  描述：SCL为高电平时，SDA发出下降沿信号                             */\n/***********************************************************************/\nvoid EEPROM_I2C_Start(void)\n{\n    IO_EEPROM_SDA_OUT_H;      \t//SDA=1\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_H;      \t//SCL=1\n    Delay_EEPROM();\n    IO_EEPROM_SDA_OUT_L;\t        //SDA=0\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_L;      \t//SCL=0\n    Delay_EEPROM();\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_I2C_Stop                                          */\n/*  函数功能：停止I2C总线                                              */\n/*  描述：SCL为高电平时，SDA发出上升沿信号                             */\n/***********************************************************************/\nvoid EEPROM_I2C_Stop(void)\n{\n    IO_EEPROM_SDA_OUT_L;      \t//SDA=0\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_H;      \t//SCL=1\n    Delay_EEPROM();\n    IO_EEPROM_SDA_OUT_H;\t    //SDA=1\n    Delay_EEPROM();\n    \n    IO_EEPROM_SDA_DIR_OUT;\n    IO_EEPROM_SCL_DIR_OUT;\n    IO_EEPROM_SDA_OUT_H;\n    IO_EEPROM_SCL_OUT_H;\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_ReceiveByte                                       */\n/*  函数功能：接收一个字节数据，并发送应答信号                         */\n/*  描述：在SCL高电平时，读取SDA信号                                   */\n/*  输入参数：ACK：应答信号                                            */\n/*  输出参数：读取数据                                                 */\n/***********************************************************************/\nunsigned char EEPROM_ReceiveByte( unsigned char ACK )\n{\n    unsigned char i,Data=0x00;\n    \n    IO_EEPROM_SDA_DIR_IN;     \t   //SDA输入\n    for( i=0;i<8;i++ )\n    {\n        IO_EEPROM_SCL_OUT_H;       //SCL=1\n        Delay_EEPROM();\n        Data = Data<<1;\n        if( IO_EEPROM_SDA_IN)\n        {\n            Data |= 0x01;\n        }\n        IO_EEPROM_SCL_OUT_L;       //SCL=0\n        Delay_EEPROM();\n    }\n    \n    //发送应答位\n    IO_EEPROM_SDA_DIR_OUT;     \t   //SDA输出\n    if( ACK == 1 )\n    {\n        IO_EEPROM_SDA_OUT_H;\t   //SDA=1\n    }\n    else\n    {\n        IO_EEPROM_SDA_OUT_L;\t   //SDA=0\n    }\n    IO_EEPROM_SCL_OUT_H;           //SCL=1\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_L;           //SCL=0\n    \n    return Data;\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_SendByte                                          */\n/*  函数功能：发送一个字节数据或地址，并判断应答信号                   */\n/*  描述：在SCL下降沿时，发送SDA信号                                   */\n/*  输入参数：Data：待发送的信息                                       */\n/*  输出参数：0为成功，1为失败                                         */\n/***********************************************************************/\nunsigned char EEPROM_SendByte( unsigned char Data )\n{\n    unsigned char i,ACK;\n    \n    for( i=0;i<8;i++ )\n    {\n        if( Data & 0x80 )\n        {\n            IO_EEPROM_SDA_DIR_IN;\n        }\n        else\n        {\n            IO_EEPROM_SDA_DIR_OUT;\n            IO_EEPROM_SDA_OUT_L;\n        }\n        IO_EEPROM_SCL_OUT_H;      \t//SCL=1\n        Delay_EEPROM();\n        Delay_EEPROM();\n        IO_EEPROM_SCL_OUT_L;      \t//SCL=0\n        Data=Data<<1;\n    }\n    \n    //应答位检查\n    IO_EEPROM_SDA_DIR_IN;     \t//SDA输入\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_H;          \t//SCL=1\n    Delay_EEPROM();\n    ACK = IO_EEPROM_SDA_IN;\t        //正常情况ACK信号应该为0\n    IO_EEPROM_SCL_OUT_L;          \t//SCL=0\n    IO_EEPROM_SDA_DIR_OUT;     \t//SDA输出\n    Delay_EEPROM();\n    \n    return ACK;\n}\n\n/***********************************************************************/\n/*  函数名称：_E2Pread                                                 */\n/*  函数功能：从EEPROM里读数据                                         */\n/*  输入参数：RAM_Addr：目的地址                                       */\n/*            EEPROM_Addr：源地址                                      */\n/*            Lenth：数据长度                                          */\n/*  输出参数：0为成功，其余为失败                                      */\n/***********************************************************************/\nunsigned char I2C_Read( unsigned char* RAM_Addr, unsigned int EEPROM_Addr, unsigned char Lenth )\n{\n    unsigned char ChipAddr,Addr,ACK,i=0;\n    \n    ClrWdt();\n    EEPROM_I2C_Init();\n    EEPROM_I2C_Start();\n    \n    //ChipAddr = 0xAE;\n    ChipAddr = (EEPROM_ICAddr | ((EEPROM_Addr>>13)&0x06));\n    while( i < 200 )//判断EEPROM能否正常操作\n    {\n        if( EEPROM_SendByte(ChipAddr) == 0 )//发送器件地址\n        {\n            break;\n        }\n        EEPROM_I2C_Stop();\n        EEPROM_I2C_Start();\n        i++;\n    }\n    if( i >= 200 )\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    else\n        Flag.Error &= ~F_EEPROM_Err;\n    \n    Addr = ((unsigned char)(EEPROM_Addr>>8) & 0x3F);\n    if( EEPROM_SendByte(Addr) )//发送子地址高位\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    Addr = (unsigned char)EEPROM_Addr;\n    if( EEPROM_SendByte(Addr) )//发送子地址低位\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    \n    EEPROM_I2C_Start();\n    ChipAddr |= 0x01;\n    if( EEPROM_SendByte(ChipAddr) )//发送器件地址，读命令\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    while( (Lenth--) > 0 )\n    {\n        if( Lenth != 0 )\n            ACK = 0;\n        else\n            ACK = 1;\n        *RAM_Addr = EEPROM_ReceiveByte(ACK);\n        RAM_Addr++;\n    }\n    EEPROM_I2C_Stop();\n    \n    return 0;\n}\n\n/***********************************************************************/\n/*  函数名称：_E2Pwrite                                                */\n/*  函数功能：往EEPROM里写数据                                         */\n/*  输入参数：EEPROM_Addr：目的地址                                    */\n/*            RAM_Addr：源地址                                         */\n/*            Lenth：数据长度                                          */\n/*  输出参数：0为成功，其余为失败                                      */\n/***********************************************************************/\nunsigned char I2C_Write( unsigned int EEPROM_Addr, unsigned char* RAM_Addr, unsigned char Lenth )\n{\n    unsigned char ChipAddr,Addr,i=0;\n    \n    ClrWdt();\n    EEPROM_I2C_Init();\n    EEPROM_I2C_Start();\n    \n    //ChipAddr = 0xAE;\n    ChipAddr = (EEPROM_ICAddr | ((EEPROM_Addr>>13)&0x06));\n    //EEPROM在完成一次写入命令后要延迟5到10毫秒，通过连续发器件地址，一旦总线正常，即立刻进行下一次总线操作\n    while( i < 200 )//判断EEPROM能否正常操作\n    {\n        if( EEPROM_SendByte(ChipAddr) == 0 )//发送器件地址\n        {\n            break;\n        }\n        EEPROM_I2C_Stop();\n        EEPROM_I2C_Start();\n        i++;\n    }\n    if( i >= 200 )\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    else\n        Flag.Error &= ~F_EEPROM_Err;\n    \n    Addr = ((unsigned char)(EEPROM_Addr>>8) & 0x3F);\n    if( EEPROM_SendByte(Addr) )//发送子地址高位\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    Addr = (unsigned char)EEPROM_Addr;\n    if( EEPROM_SendByte(Addr) )//发送子地址低位\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    \n    do\n    {\n        EEPROM_SendByte(*RAM_Addr);\n        RAM_Addr++;\n    }\n    while( (--Lenth) > 0 );\n    EEPROM_I2C_Stop();\n    \n    return 0;\n}\n\n```\n","source":"_posts/IIC.md","raw":"---\ntitle: IIC\ntoc: true\ndate: 2016-08-08 16:41:15\ncategories: 总线协议\ntags: 总线协议\n---\nI<sup>2</sup>C总线是一个多主(从)机、单端、串行通信总线，由飞利浦公司(现在的NXP公司)发明。典型应用是那些短距、低速的应用场合。使用I<sup>2</sup>C是不需要许可费的，但是如果使用NXP提供的地址字段，则需要支付相关费用。\n\n## 总线结构\nI<sup>2</sup>C是双向开漏两线制总线，由电阻上拉。SDA是其串行数据线，SCL是总线时钟线，用以提供时钟基准。I<sup>2</sup>C地址空间有7bit和10bit两种，大多数I<sup>2</sup>C提供100kbit/s的通信速率，当然这些都不是标准的一部分，视具体应用而定。鉴于通信帧中包含从机地址、从机应答等信息，实际的数据通信速率会比标称的峰值速率低。\n\n最大的从机数目由地址空间的位数决定，同时总线上的电容大小总和受到400PF的限制，这限制了实际的通信距离只有几米，同时为了保证高阻抗和低噪声，一个共同的地也是潜在的需求，这会限制线路板的设计。\n\n## 物理层\n在物理层上，SCL与SDA都是开漏设计，因此需要一个上拉电阻，将总线拉低来设置逻辑\"0\",悬浮时总线被设置成逻辑\"1\",是一个线与逻辑，总线上的任何一个设备拉低总线都会导致总线为低，因此当总线为低时，必定有其他设备在使用总线，此时总线为`BUSY`状态，因此设备可以依靠`SDA`避免总线冲突。\n\n当总线空闲时，两条线都是高状态，启动一次传输，可以通过拉低SDA而保持SCL为高发出`START`信号，释放SDA而保持SCL为高将产生`STOP`信号。除了`START`与`STOP`信号，SDA需保持其状态在SCL为低时，仅当SCL为高时允许切换SDA状态。\n当SCL为低时，由发送器将SDA状态切换至下一状态，然后主机将SCL设置成高电平，一旦SCL为高，接收器读取SDA状态。\n\n## 总线协议(以24Cxx系列EEPROM为例)\nI<sup>2</sup>C总线的一个典型应用即是EEPROM。24Cxx系列存储芯片的操作主要有读写两类(有些芯片还有擦除操作，因为比较特殊，同时写操作同样可以达到同样目的，在此按下不表)。读写操作使用同样的通信协议:先写从机地址，接着传输数据直到结束信号到来。\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/IIC.jpg\"></center>\n\n### 写操作\n首先主机发送开始信号`START`唤醒总线上的从机，接着发送从机地址(包含写信息)，从机在接收到之后与自己的地址信息进行比较，如果匹配则准备接收数据，否则忽略数据。接着发送需要写入的数据地址及数据，最后发送停止信号。从机在此期间将执行自己的状态机完成数据的接收与写入。*(需要注意的是24Cxx系列的EEPROM没法跨页写，也就是对于跨页写入的数据需要执行两次写周期)*写入期间，从机一只处在`BUSY`状态，对外界一切信息均不作响应，写入完成后从机响应ACK信号。\n\n### 读操作\n与写操作类似，首先主机发送开始信号`START`唤醒总线上的从机，接着发送从机地址(包含写信息)，从机在接收到之后与自己的地址信息进行比较，如果匹配则准备接收数据，否则忽略数据。然后再次发送`START`信号与从机地址(包含读信息)，从机在收到后返回相应数据，主机在收到数据后发送应带`ACK`或者`NCK`通知从机接着接收完成或发送下一字节数据，从机发送完最后一个字节数据后，主机可不响应应答信号。\n\n#### 示例代码\n```C\n//函数声明\nvoid Delay_EEPROM(void);\nvoid EEPROM_I2C_Init(void);\nvoid EEPROM_I2C_Start(void);\nvoid EEPROM_I2C_Stop(void);\nunsigned char EEPROM_ReceiveByte( unsigned char ACK );\nunsigned char EEPROM_SendByte( unsigned char Data );\nunsigned char I2C_Read( unsigned char* RAM_Addr, unsigned int EEPROM_Addr, unsigned char Lenth );\nunsigned char I2C_Write( unsigned int EEPROM_Addr, unsigned char* RAM_Addr, unsigned char Lenth );\n\n/***********************************************************************/\n/*  函数名称：Delay_EEPROM                                             */\n/*  函数功能：延时子程序                                               */\n/***********************************************************************/\nvoid Delay_EEPROM(void)\n{\n    _NOP();_NOP();\n    _NOP();_NOP();\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_I2C_Init                                          */\n/*  函数功能：I2C管脚初始化                                            */\n/***********************************************************************/\nvoid EEPROM_I2C_Init(void)\n{\n    IO_EEPROM_SCL_OUT_H;\n    IO_EEPROM_SDA_OUT_H;\n    IO_EEPROM_SCL_DIR_OUT;\n    IO_EEPROM_SDA_DIR_OUT;\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_I2C_Start                                         */\n/*  函数功能：启动I2C总线                                              */\n/*  描述：SCL为高电平时，SDA发出下降沿信号                             */\n/***********************************************************************/\nvoid EEPROM_I2C_Start(void)\n{\n    IO_EEPROM_SDA_OUT_H;      \t//SDA=1\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_H;      \t//SCL=1\n    Delay_EEPROM();\n    IO_EEPROM_SDA_OUT_L;\t        //SDA=0\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_L;      \t//SCL=0\n    Delay_EEPROM();\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_I2C_Stop                                          */\n/*  函数功能：停止I2C总线                                              */\n/*  描述：SCL为高电平时，SDA发出上升沿信号                             */\n/***********************************************************************/\nvoid EEPROM_I2C_Stop(void)\n{\n    IO_EEPROM_SDA_OUT_L;      \t//SDA=0\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_H;      \t//SCL=1\n    Delay_EEPROM();\n    IO_EEPROM_SDA_OUT_H;\t    //SDA=1\n    Delay_EEPROM();\n    \n    IO_EEPROM_SDA_DIR_OUT;\n    IO_EEPROM_SCL_DIR_OUT;\n    IO_EEPROM_SDA_OUT_H;\n    IO_EEPROM_SCL_OUT_H;\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_ReceiveByte                                       */\n/*  函数功能：接收一个字节数据，并发送应答信号                         */\n/*  描述：在SCL高电平时，读取SDA信号                                   */\n/*  输入参数：ACK：应答信号                                            */\n/*  输出参数：读取数据                                                 */\n/***********************************************************************/\nunsigned char EEPROM_ReceiveByte( unsigned char ACK )\n{\n    unsigned char i,Data=0x00;\n    \n    IO_EEPROM_SDA_DIR_IN;     \t   //SDA输入\n    for( i=0;i<8;i++ )\n    {\n        IO_EEPROM_SCL_OUT_H;       //SCL=1\n        Delay_EEPROM();\n        Data = Data<<1;\n        if( IO_EEPROM_SDA_IN)\n        {\n            Data |= 0x01;\n        }\n        IO_EEPROM_SCL_OUT_L;       //SCL=0\n        Delay_EEPROM();\n    }\n    \n    //发送应答位\n    IO_EEPROM_SDA_DIR_OUT;     \t   //SDA输出\n    if( ACK == 1 )\n    {\n        IO_EEPROM_SDA_OUT_H;\t   //SDA=1\n    }\n    else\n    {\n        IO_EEPROM_SDA_OUT_L;\t   //SDA=0\n    }\n    IO_EEPROM_SCL_OUT_H;           //SCL=1\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_L;           //SCL=0\n    \n    return Data;\n}\n\n/***********************************************************************/\n/*  函数名称：EEPROM_SendByte                                          */\n/*  函数功能：发送一个字节数据或地址，并判断应答信号                   */\n/*  描述：在SCL下降沿时，发送SDA信号                                   */\n/*  输入参数：Data：待发送的信息                                       */\n/*  输出参数：0为成功，1为失败                                         */\n/***********************************************************************/\nunsigned char EEPROM_SendByte( unsigned char Data )\n{\n    unsigned char i,ACK;\n    \n    for( i=0;i<8;i++ )\n    {\n        if( Data & 0x80 )\n        {\n            IO_EEPROM_SDA_DIR_IN;\n        }\n        else\n        {\n            IO_EEPROM_SDA_DIR_OUT;\n            IO_EEPROM_SDA_OUT_L;\n        }\n        IO_EEPROM_SCL_OUT_H;      \t//SCL=1\n        Delay_EEPROM();\n        Delay_EEPROM();\n        IO_EEPROM_SCL_OUT_L;      \t//SCL=0\n        Data=Data<<1;\n    }\n    \n    //应答位检查\n    IO_EEPROM_SDA_DIR_IN;     \t//SDA输入\n    Delay_EEPROM();\n    IO_EEPROM_SCL_OUT_H;          \t//SCL=1\n    Delay_EEPROM();\n    ACK = IO_EEPROM_SDA_IN;\t        //正常情况ACK信号应该为0\n    IO_EEPROM_SCL_OUT_L;          \t//SCL=0\n    IO_EEPROM_SDA_DIR_OUT;     \t//SDA输出\n    Delay_EEPROM();\n    \n    return ACK;\n}\n\n/***********************************************************************/\n/*  函数名称：_E2Pread                                                 */\n/*  函数功能：从EEPROM里读数据                                         */\n/*  输入参数：RAM_Addr：目的地址                                       */\n/*            EEPROM_Addr：源地址                                      */\n/*            Lenth：数据长度                                          */\n/*  输出参数：0为成功，其余为失败                                      */\n/***********************************************************************/\nunsigned char I2C_Read( unsigned char* RAM_Addr, unsigned int EEPROM_Addr, unsigned char Lenth )\n{\n    unsigned char ChipAddr,Addr,ACK,i=0;\n    \n    ClrWdt();\n    EEPROM_I2C_Init();\n    EEPROM_I2C_Start();\n    \n    //ChipAddr = 0xAE;\n    ChipAddr = (EEPROM_ICAddr | ((EEPROM_Addr>>13)&0x06));\n    while( i < 200 )//判断EEPROM能否正常操作\n    {\n        if( EEPROM_SendByte(ChipAddr) == 0 )//发送器件地址\n        {\n            break;\n        }\n        EEPROM_I2C_Stop();\n        EEPROM_I2C_Start();\n        i++;\n    }\n    if( i >= 200 )\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    else\n        Flag.Error &= ~F_EEPROM_Err;\n    \n    Addr = ((unsigned char)(EEPROM_Addr>>8) & 0x3F);\n    if( EEPROM_SendByte(Addr) )//发送子地址高位\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    Addr = (unsigned char)EEPROM_Addr;\n    if( EEPROM_SendByte(Addr) )//发送子地址低位\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    \n    EEPROM_I2C_Start();\n    ChipAddr |= 0x01;\n    if( EEPROM_SendByte(ChipAddr) )//发送器件地址，读命令\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    while( (Lenth--) > 0 )\n    {\n        if( Lenth != 0 )\n            ACK = 0;\n        else\n            ACK = 1;\n        *RAM_Addr = EEPROM_ReceiveByte(ACK);\n        RAM_Addr++;\n    }\n    EEPROM_I2C_Stop();\n    \n    return 0;\n}\n\n/***********************************************************************/\n/*  函数名称：_E2Pwrite                                                */\n/*  函数功能：往EEPROM里写数据                                         */\n/*  输入参数：EEPROM_Addr：目的地址                                    */\n/*            RAM_Addr：源地址                                         */\n/*            Lenth：数据长度                                          */\n/*  输出参数：0为成功，其余为失败                                      */\n/***********************************************************************/\nunsigned char I2C_Write( unsigned int EEPROM_Addr, unsigned char* RAM_Addr, unsigned char Lenth )\n{\n    unsigned char ChipAddr,Addr,i=0;\n    \n    ClrWdt();\n    EEPROM_I2C_Init();\n    EEPROM_I2C_Start();\n    \n    //ChipAddr = 0xAE;\n    ChipAddr = (EEPROM_ICAddr | ((EEPROM_Addr>>13)&0x06));\n    //EEPROM在完成一次写入命令后要延迟5到10毫秒，通过连续发器件地址，一旦总线正常，即立刻进行下一次总线操作\n    while( i < 200 )//判断EEPROM能否正常操作\n    {\n        if( EEPROM_SendByte(ChipAddr) == 0 )//发送器件地址\n        {\n            break;\n        }\n        EEPROM_I2C_Stop();\n        EEPROM_I2C_Start();\n        i++;\n    }\n    if( i >= 200 )\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    else\n        Flag.Error &= ~F_EEPROM_Err;\n    \n    Addr = ((unsigned char)(EEPROM_Addr>>8) & 0x3F);\n    if( EEPROM_SendByte(Addr) )//发送子地址高位\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    Addr = (unsigned char)EEPROM_Addr;\n    if( EEPROM_SendByte(Addr) )//发送子地址低位\n    {\n        EEPROM_I2C_Stop();\n        Flag.Error |= F_EEPROM_Err;//器件不正常\n        return 0xFF;\n    }\n    \n    do\n    {\n        EEPROM_SendByte(*RAM_Addr);\n        RAM_Addr++;\n    }\n    while( (--Lenth) > 0 );\n    EEPROM_I2C_Stop();\n    \n    return 0;\n}\n\n```\n","slug":"IIC","published":1,"updated":"2016-09-14T02:45:02.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9anh000d70g513ff81j9","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>I<sup>2</sup>C总线是一个多主(从)机、单端、串行通信总线，由飞利浦公司(现在的NXP公司)发明。典型应用是那些短距、低速的应用场合。使用I<sup>2</sup>C是不需要许可费的，但是如果使用NXP提供的地址字段，则需要支付相关费用。</p>\n<h2 id=\"总线结构\"><a href=\"#总线结构\" class=\"headerlink\" title=\"总线结构\"></a>总线结构</h2><p>I<sup>2</sup>C是双向开漏两线制总线，由电阻上拉。SDA是其串行数据线，SCL是总线时钟线，用以提供时钟基准。I<sup>2</sup>C地址空间有7bit和10bit两种，大多数I<sup>2</sup>C提供100kbit/s的通信速率，当然这些都不是标准的一部分，视具体应用而定。鉴于通信帧中包含从机地址、从机应答等信息，实际的数据通信速率会比标称的峰值速率低。</p>\n<p>最大的从机数目由地址空间的位数决定，同时总线上的电容大小总和受到400PF的限制，这限制了实际的通信距离只有几米，同时为了保证高阻抗和低噪声，一个共同的地也是潜在的需求，这会限制线路板的设计。</p>\n<h2 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h2><p>在物理层上，SCL与SDA都是开漏设计，因此需要一个上拉电阻，将总线拉低来设置逻辑”0”,悬浮时总线被设置成逻辑”1”,是一个线与逻辑，总线上的任何一个设备拉低总线都会导致总线为低，因此当总线为低时，必定有其他设备在使用总线，此时总线为<code>BUSY</code>状态，因此设备可以依靠<code>SDA</code>避免总线冲突。</p>\n<p>当总线空闲时，两条线都是高状态，启动一次传输，可以通过拉低SDA而保持SCL为高发出<code>START</code>信号，释放SDA而保持SCL为高将产生<code>STOP</code>信号。除了<code>START</code>与<code>STOP</code>信号，SDA需保持其状态在SCL为低时，仅当SCL为高时允许切换SDA状态。<br>当SCL为低时，由发送器将SDA状态切换至下一状态，然后主机将SCL设置成高电平，一旦SCL为高，接收器读取SDA状态。</p>\n<h2 id=\"总线协议-以24Cxx系列EEPROM为例\"><a href=\"#总线协议-以24Cxx系列EEPROM为例\" class=\"headerlink\" title=\"总线协议(以24Cxx系列EEPROM为例)\"></a>总线协议(以24Cxx系列EEPROM为例)</h2><p>I<sup>2</sup>C总线的一个典型应用即是EEPROM。24Cxx系列存储芯片的操作主要有读写两类(有些芯片还有擦除操作，因为比较特殊，同时写操作同样可以达到同样目的，在此按下不表)。读写操作使用同样的通信协议:先写从机地址，接着传输数据直到结束信号到来。</p>\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/IIC.jpg\"></center>\n\n<h3 id=\"写操作\"><a href=\"#写操作\" class=\"headerlink\" title=\"写操作\"></a>写操作</h3><p>首先主机发送开始信号<code>START</code>唤醒总线上的从机，接着发送从机地址(包含写信息)，从机在接收到之后与自己的地址信息进行比较，如果匹配则准备接收数据，否则忽略数据。接着发送需要写入的数据地址及数据，最后发送停止信号。从机在此期间将执行自己的状态机完成数据的接收与写入。<em>(需要注意的是24Cxx系列的EEPROM没法跨页写，也就是对于跨页写入的数据需要执行两次写周期)</em>写入期间，从机一只处在<code>BUSY</code>状态，对外界一切信息均不作响应，写入完成后从机响应ACK信号。</p>\n<h3 id=\"读操作\"><a href=\"#读操作\" class=\"headerlink\" title=\"读操作\"></a>读操作</h3><p>与写操作类似，首先主机发送开始信号<code>START</code>唤醒总线上的从机，接着发送从机地址(包含写信息)，从机在接收到之后与自己的地址信息进行比较，如果匹配则准备接收数据，否则忽略数据。然后再次发送<code>START</code>信号与从机地址(包含读信息)，从机在收到后返回相应数据，主机在收到数据后发送应带<code>ACK</code>或者<code>NCK</code>通知从机接着接收完成或发送下一字节数据，从机发送完最后一个字节数据后，主机可不响应应答信号。</p>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Delay_EEPROM</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Start</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Stop</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">EEPROM_ReceiveByte</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ACK )</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">EEPROM_SendByte</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Data )</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">I2C_Read</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* RAM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> EEPROM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Lenth )</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">I2C_Write</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> EEPROM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* RAM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Lenth )</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：Delay_EEPROM                                             */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：延时子程序                                               */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Delay_EEPROM</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"number\">_</span>NOP();<span class=\"number\">_</span>NOP();</div><div class=\"line\">    <span class=\"number\">_</span>NOP();<span class=\"number\">_</span>NOP();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_I2C_Init                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：I2C管脚初始化                                            */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;</div><div class=\"line\">    IO_EEPROM_SDA_OUT_H;</div><div class=\"line\">    IO_EEPROM_SCL_DIR_OUT;</div><div class=\"line\">    IO_EEPROM_SDA_DIR_OUT;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_I2C_Start                                         */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：启动I2C总线                                              */</span></div><div class=\"line\"><span class=\"comment\">/*  描述：SCL为高电平时，SDA发出下降沿信号                             */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Start</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    IO_EEPROM_SDA_OUT_H;      \t<span class=\"comment\">//SDA=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;      \t<span class=\"comment\">//SCL=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SDA_OUT_L;\t        <span class=\"comment\">//SDA=0</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_L;      \t<span class=\"comment\">//SCL=0</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_I2C_Stop                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：停止I2C总线                                              */</span></div><div class=\"line\"><span class=\"comment\">/*  描述：SCL为高电平时，SDA发出上升沿信号                             */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Stop</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    IO_EEPROM_SDA_OUT_L;      \t<span class=\"comment\">//SDA=0</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;      \t<span class=\"comment\">//SCL=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SDA_OUT_H;\t    <span class=\"comment\">//SDA=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    </div><div class=\"line\">    IO_EEPROM_SDA_DIR_OUT;</div><div class=\"line\">    IO_EEPROM_SCL_DIR_OUT;</div><div class=\"line\">    IO_EEPROM_SDA_OUT_H;</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_ReceiveByte                                       */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：接收一个字节数据，并发送应答信号                         */</span></div><div class=\"line\"><span class=\"comment\">/*  描述：在SCL高电平时，读取SDA信号                                   */</span></div><div class=\"line\"><span class=\"comment\">/*  输入参数：ACK：应答信号                                            */</span></div><div class=\"line\"><span class=\"comment\">/*  输出参数：读取数据                                                 */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">EEPROM_ReceiveByte</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ACK )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> i,Data=<span class=\"number\">0x00</span>;</div><div class=\"line\">    </div><div class=\"line\">    IO_EEPROM_SDA_DIR_IN;     \t   <span class=\"comment\">//SDA输入</span></div><div class=\"line\">    <span class=\"keyword\">for</span>( i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">8</span>;i++ )</div><div class=\"line\">    &#123;</div><div class=\"line\">        IO_EEPROM_SCL_OUT_H;       <span class=\"comment\">//SCL=1</span></div><div class=\"line\">        Delay_EEPROM();</div><div class=\"line\">        Data = Data&lt;&lt;<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>( IO_EEPROM_SDA_IN)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Data |= <span class=\"number\">0x01</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IO_EEPROM_SCL_OUT_L;       <span class=\"comment\">//SCL=0</span></div><div class=\"line\">        Delay_EEPROM();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//发送应答位</span></div><div class=\"line\">    IO_EEPROM_SDA_DIR_OUT;     \t   <span class=\"comment\">//SDA输出</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( ACK == <span class=\"number\">1</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        IO_EEPROM_SDA_OUT_H;\t   <span class=\"comment\">//SDA=1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        IO_EEPROM_SDA_OUT_L;\t   <span class=\"comment\">//SDA=0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;           <span class=\"comment\">//SCL=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_L;           <span class=\"comment\">//SCL=0</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> Data;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_SendByte                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：发送一个字节数据或地址，并判断应答信号                   */</span></div><div class=\"line\"><span class=\"comment\">/*  描述：在SCL下降沿时，发送SDA信号                                   */</span></div><div class=\"line\"><span class=\"comment\">/*  输入参数：Data：待发送的信息                                       */</span></div><div class=\"line\"><span class=\"comment\">/*  输出参数：0为成功，1为失败                                         */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">EEPROM_SendByte</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Data )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> i,ACK;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>( i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">8</span>;i++ )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( Data &amp; <span class=\"number\">0x80</span> )</div><div class=\"line\">        &#123;</div><div class=\"line\">            IO_EEPROM_SDA_DIR_IN;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            IO_EEPROM_SDA_DIR_OUT;</div><div class=\"line\">            IO_EEPROM_SDA_OUT_L;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IO_EEPROM_SCL_OUT_H;      \t<span class=\"comment\">//SCL=1</span></div><div class=\"line\">        Delay_EEPROM();</div><div class=\"line\">        Delay_EEPROM();</div><div class=\"line\">        IO_EEPROM_SCL_OUT_L;      \t<span class=\"comment\">//SCL=0</span></div><div class=\"line\">        Data=Data&lt;&lt;<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//应答位检查</span></div><div class=\"line\">    IO_EEPROM_SDA_DIR_IN;     \t<span class=\"comment\">//SDA输入</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;          \t<span class=\"comment\">//SCL=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    ACK = IO_EEPROM_SDA_IN;\t        <span class=\"comment\">//正常情况ACK信号应该为0</span></div><div class=\"line\">    IO_EEPROM_SCL_OUT_L;          \t<span class=\"comment\">//SCL=0</span></div><div class=\"line\">    IO_EEPROM_SDA_DIR_OUT;     \t<span class=\"comment\">//SDA输出</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> ACK;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：_E2Pread                                                 */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：从EEPROM里读数据                                         */</span></div><div class=\"line\"><span class=\"comment\">/*  输入参数：RAM_Addr：目的地址                                       */</span></div><div class=\"line\"><span class=\"comment\">/*            EEPROM_Addr：源地址                                      */</span></div><div class=\"line\"><span class=\"comment\">/*            Lenth：数据长度                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  输出参数：0为成功，其余为失败                                      */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">I2C_Read</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* RAM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> EEPROM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Lenth )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ChipAddr,Addr,ACK,i=<span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    ClrWdt();</div><div class=\"line\">    EEPROM_I2C_Init();</div><div class=\"line\">    EEPROM_I2C_Start();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//ChipAddr = 0xAE;</span></div><div class=\"line\">    ChipAddr = (EEPROM_ICAddr | ((EEPROM_Addr&gt;&gt;<span class=\"number\">13</span>)&amp;<span class=\"number\">0x06</span>));</div><div class=\"line\">    <span class=\"keyword\">while</span>( i &lt; <span class=\"number\">200</span> )<span class=\"comment\">//判断EEPROM能否正常操作</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( EEPROM_SendByte(ChipAddr) == <span class=\"number\">0</span> )<span class=\"comment\">//发送器件地址</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        EEPROM_I2C_Start();</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>( i &gt;= <span class=\"number\">200</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        Flag.Error &amp;= ~F_EEPROM_Err;</div><div class=\"line\">    </div><div class=\"line\">    Addr = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(EEPROM_Addr&gt;&gt;<span class=\"number\">8</span>) &amp; <span class=\"number\">0x3F</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(Addr) )<span class=\"comment\">//发送子地址高位</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Addr = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)EEPROM_Addr;</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(Addr) )<span class=\"comment\">//发送子地址低位</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    EEPROM_I2C_Start();</div><div class=\"line\">    ChipAddr |= <span class=\"number\">0x01</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(ChipAddr) )<span class=\"comment\">//发送器件地址，读命令</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>( (Lenth--) &gt; <span class=\"number\">0</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( Lenth != <span class=\"number\">0</span> )</div><div class=\"line\">            ACK = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            ACK = <span class=\"number\">1</span>;</div><div class=\"line\">        *RAM_Addr = EEPROM_ReceiveByte(ACK);</div><div class=\"line\">        RAM_Addr++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    EEPROM_I2C_Stop();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：_E2Pwrite                                                */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：往EEPROM里写数据                                         */</span></div><div class=\"line\"><span class=\"comment\">/*  输入参数：EEPROM_Addr：目的地址                                    */</span></div><div class=\"line\"><span class=\"comment\">/*            RAM_Addr：源地址                                         */</span></div><div class=\"line\"><span class=\"comment\">/*            Lenth：数据长度                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  输出参数：0为成功，其余为失败                                      */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">I2C_Write</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> EEPROM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* RAM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Lenth )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ChipAddr,Addr,i=<span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    ClrWdt();</div><div class=\"line\">    EEPROM_I2C_Init();</div><div class=\"line\">    EEPROM_I2C_Start();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//ChipAddr = 0xAE;</span></div><div class=\"line\">    ChipAddr = (EEPROM_ICAddr | ((EEPROM_Addr&gt;&gt;<span class=\"number\">13</span>)&amp;<span class=\"number\">0x06</span>));</div><div class=\"line\">    <span class=\"comment\">//EEPROM在完成一次写入命令后要延迟5到10毫秒，通过连续发器件地址，一旦总线正常，即立刻进行下一次总线操作</span></div><div class=\"line\">    <span class=\"keyword\">while</span>( i &lt; <span class=\"number\">200</span> )<span class=\"comment\">//判断EEPROM能否正常操作</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( EEPROM_SendByte(ChipAddr) == <span class=\"number\">0</span> )<span class=\"comment\">//发送器件地址</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        EEPROM_I2C_Start();</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>( i &gt;= <span class=\"number\">200</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        Flag.Error &amp;= ~F_EEPROM_Err;</div><div class=\"line\">    </div><div class=\"line\">    Addr = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(EEPROM_Addr&gt;&gt;<span class=\"number\">8</span>) &amp; <span class=\"number\">0x3F</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(Addr) )<span class=\"comment\">//发送子地址高位</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Addr = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)EEPROM_Addr;</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(Addr) )<span class=\"comment\">//发送子地址低位</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_SendByte(*RAM_Addr);</div><div class=\"line\">        RAM_Addr++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>( (--Lenth) &gt; <span class=\"number\">0</span> );</div><div class=\"line\">    EEPROM_I2C_Stop();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>I<sup>2</sup>C总线是一个多主(从)机、单端、串行通信总线，由飞利浦公司(现在的NXP公司)发明。典型应用是那些短距、低速的应用场合。使用I<sup>2</sup>C是不需要许可费的，但是如果使用NXP提供的地址字段，则需要支付相关费用。</p>\n<h2 id=\"总线结构\"><a href=\"#总线结构\" class=\"headerlink\" title=\"总线结构\"></a>总线结构</h2><p>I<sup>2</sup>C是双向开漏两线制总线，由电阻上拉。SDA是其串行数据线，SCL是总线时钟线，用以提供时钟基准。I<sup>2</sup>C地址空间有7bit和10bit两种，大多数I<sup>2</sup>C提供100kbit/s的通信速率，当然这些都不是标准的一部分，视具体应用而定。鉴于通信帧中包含从机地址、从机应答等信息，实际的数据通信速率会比标称的峰值速率低。</p>\n<p>最大的从机数目由地址空间的位数决定，同时总线上的电容大小总和受到400PF的限制，这限制了实际的通信距离只有几米，同时为了保证高阻抗和低噪声，一个共同的地也是潜在的需求，这会限制线路板的设计。</p>\n<h2 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h2><p>在物理层上，SCL与SDA都是开漏设计，因此需要一个上拉电阻，将总线拉低来设置逻辑”0”,悬浮时总线被设置成逻辑”1”,是一个线与逻辑，总线上的任何一个设备拉低总线都会导致总线为低，因此当总线为低时，必定有其他设备在使用总线，此时总线为<code>BUSY</code>状态，因此设备可以依靠<code>SDA</code>避免总线冲突。</p>\n<p>当总线空闲时，两条线都是高状态，启动一次传输，可以通过拉低SDA而保持SCL为高发出<code>START</code>信号，释放SDA而保持SCL为高将产生<code>STOP</code>信号。除了<code>START</code>与<code>STOP</code>信号，SDA需保持其状态在SCL为低时，仅当SCL为高时允许切换SDA状态。<br>当SCL为低时，由发送器将SDA状态切换至下一状态，然后主机将SCL设置成高电平，一旦SCL为高，接收器读取SDA状态。</p>\n<h2 id=\"总线协议-以24Cxx系列EEPROM为例\"><a href=\"#总线协议-以24Cxx系列EEPROM为例\" class=\"headerlink\" title=\"总线协议(以24Cxx系列EEPROM为例)\"></a>总线协议(以24Cxx系列EEPROM为例)</h2><p>I<sup>2</sup>C总线的一个典型应用即是EEPROM。24Cxx系列存储芯片的操作主要有读写两类(有些芯片还有擦除操作，因为比较特殊，同时写操作同样可以达到同样目的，在此按下不表)。读写操作使用同样的通信协议:先写从机地址，接着传输数据直到结束信号到来。</p>\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/IIC.jpg\"></center>\n\n<h3 id=\"写操作\"><a href=\"#写操作\" class=\"headerlink\" title=\"写操作\"></a>写操作</h3><p>首先主机发送开始信号<code>START</code>唤醒总线上的从机，接着发送从机地址(包含写信息)，从机在接收到之后与自己的地址信息进行比较，如果匹配则准备接收数据，否则忽略数据。接着发送需要写入的数据地址及数据，最后发送停止信号。从机在此期间将执行自己的状态机完成数据的接收与写入。<em>(需要注意的是24Cxx系列的EEPROM没法跨页写，也就是对于跨页写入的数据需要执行两次写周期)</em>写入期间，从机一只处在<code>BUSY</code>状态，对外界一切信息均不作响应，写入完成后从机响应ACK信号。</p>\n<h3 id=\"读操作\"><a href=\"#读操作\" class=\"headerlink\" title=\"读操作\"></a>读操作</h3><p>与写操作类似，首先主机发送开始信号<code>START</code>唤醒总线上的从机，接着发送从机地址(包含写信息)，从机在接收到之后与自己的地址信息进行比较，如果匹配则准备接收数据，否则忽略数据。然后再次发送<code>START</code>信号与从机地址(包含读信息)，从机在收到后返回相应数据，主机在收到数据后发送应带<code>ACK</code>或者<code>NCK</code>通知从机接着接收完成或发送下一字节数据，从机发送完最后一个字节数据后，主机可不响应应答信号。</p>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Delay_EEPROM</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Start</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Stop</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">EEPROM_ReceiveByte</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ACK )</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">EEPROM_SendByte</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Data )</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">I2C_Read</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* RAM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> EEPROM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Lenth )</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">I2C_Write</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> EEPROM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* RAM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Lenth )</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：Delay_EEPROM                                             */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：延时子程序                                               */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Delay_EEPROM</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"number\">_</span>NOP();<span class=\"number\">_</span>NOP();</div><div class=\"line\">    <span class=\"number\">_</span>NOP();<span class=\"number\">_</span>NOP();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_I2C_Init                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：I2C管脚初始化                                            */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;</div><div class=\"line\">    IO_EEPROM_SDA_OUT_H;</div><div class=\"line\">    IO_EEPROM_SCL_DIR_OUT;</div><div class=\"line\">    IO_EEPROM_SDA_DIR_OUT;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_I2C_Start                                         */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：启动I2C总线                                              */</span></div><div class=\"line\"><span class=\"comment\">/*  描述：SCL为高电平时，SDA发出下降沿信号                             */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Start</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    IO_EEPROM_SDA_OUT_H;      \t<span class=\"comment\">//SDA=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;      \t<span class=\"comment\">//SCL=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SDA_OUT_L;\t        <span class=\"comment\">//SDA=0</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_L;      \t<span class=\"comment\">//SCL=0</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_I2C_Stop                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：停止I2C总线                                              */</span></div><div class=\"line\"><span class=\"comment\">/*  描述：SCL为高电平时，SDA发出上升沿信号                             */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">EEPROM_I2C_Stop</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    IO_EEPROM_SDA_OUT_L;      \t<span class=\"comment\">//SDA=0</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;      \t<span class=\"comment\">//SCL=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SDA_OUT_H;\t    <span class=\"comment\">//SDA=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    </div><div class=\"line\">    IO_EEPROM_SDA_DIR_OUT;</div><div class=\"line\">    IO_EEPROM_SCL_DIR_OUT;</div><div class=\"line\">    IO_EEPROM_SDA_OUT_H;</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_ReceiveByte                                       */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：接收一个字节数据，并发送应答信号                         */</span></div><div class=\"line\"><span class=\"comment\">/*  描述：在SCL高电平时，读取SDA信号                                   */</span></div><div class=\"line\"><span class=\"comment\">/*  输入参数：ACK：应答信号                                            */</span></div><div class=\"line\"><span class=\"comment\">/*  输出参数：读取数据                                                 */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">EEPROM_ReceiveByte</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ACK )</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> i,Data=<span class=\"number\">0x00</span>;</div><div class=\"line\">    </div><div class=\"line\">    IO_EEPROM_SDA_DIR_IN;     \t   <span class=\"comment\">//SDA输入</span></div><div class=\"line\">    <span class=\"keyword\">for</span>( i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">8</span>;i++ )</div><div class=\"line\">    &#123;</div><div class=\"line\">        IO_EEPROM_SCL_OUT_H;       <span class=\"comment\">//SCL=1</span></div><div class=\"line\">        Delay_EEPROM();</div><div class=\"line\">        Data = Data&lt;&lt;<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>( IO_EEPROM_SDA_IN)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Data |= <span class=\"number\">0x01</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IO_EEPROM_SCL_OUT_L;       <span class=\"comment\">//SCL=0</span></div><div class=\"line\">        Delay_EEPROM();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//发送应答位</span></div><div class=\"line\">    IO_EEPROM_SDA_DIR_OUT;     \t   <span class=\"comment\">//SDA输出</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( ACK == <span class=\"number\">1</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        IO_EEPROM_SDA_OUT_H;\t   <span class=\"comment\">//SDA=1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        IO_EEPROM_SDA_OUT_L;\t   <span class=\"comment\">//SDA=0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;           <span class=\"comment\">//SCL=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_L;           <span class=\"comment\">//SCL=0</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> Data;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：EEPROM_SendByte                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：发送一个字节数据或地址，并判断应答信号                   */</span></div><div class=\"line\"><span class=\"comment\">/*  描述：在SCL下降沿时，发送SDA信号                                   */</span></div><div class=\"line\"><span class=\"comment\">/*  输入参数：Data：待发送的信息                                       */</span></div><div class=\"line\"><span class=\"comment\">/*  输出参数：0为成功，1为失败                                         */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">EEPROM_SendByte</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Data )</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> i,ACK;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>( i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">8</span>;i++ )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( Data &amp; <span class=\"number\">0x80</span> )</div><div class=\"line\">        &#123;</div><div class=\"line\">            IO_EEPROM_SDA_DIR_IN;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            IO_EEPROM_SDA_DIR_OUT;</div><div class=\"line\">            IO_EEPROM_SDA_OUT_L;</div><div class=\"line\">        &#125;</div><div class=\"line\">        IO_EEPROM_SCL_OUT_H;      \t<span class=\"comment\">//SCL=1</span></div><div class=\"line\">        Delay_EEPROM();</div><div class=\"line\">        Delay_EEPROM();</div><div class=\"line\">        IO_EEPROM_SCL_OUT_L;      \t<span class=\"comment\">//SCL=0</span></div><div class=\"line\">        Data=Data&lt;&lt;<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//应答位检查</span></div><div class=\"line\">    IO_EEPROM_SDA_DIR_IN;     \t<span class=\"comment\">//SDA输入</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    IO_EEPROM_SCL_OUT_H;          \t<span class=\"comment\">//SCL=1</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    ACK = IO_EEPROM_SDA_IN;\t        <span class=\"comment\">//正常情况ACK信号应该为0</span></div><div class=\"line\">    IO_EEPROM_SCL_OUT_L;          \t<span class=\"comment\">//SCL=0</span></div><div class=\"line\">    IO_EEPROM_SDA_DIR_OUT;     \t<span class=\"comment\">//SDA输出</span></div><div class=\"line\">    Delay_EEPROM();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> ACK;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：_E2Pread                                                 */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：从EEPROM里读数据                                         */</span></div><div class=\"line\"><span class=\"comment\">/*  输入参数：RAM_Addr：目的地址                                       */</span></div><div class=\"line\"><span class=\"comment\">/*            EEPROM_Addr：源地址                                      */</span></div><div class=\"line\"><span class=\"comment\">/*            Lenth：数据长度                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  输出参数：0为成功，其余为失败                                      */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">I2C_Read</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* RAM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> EEPROM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Lenth )</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ChipAddr,Addr,ACK,i=<span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    ClrWdt();</div><div class=\"line\">    EEPROM_I2C_Init();</div><div class=\"line\">    EEPROM_I2C_Start();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//ChipAddr = 0xAE;</span></div><div class=\"line\">    ChipAddr = (EEPROM_ICAddr | ((EEPROM_Addr&gt;&gt;<span class=\"number\">13</span>)&amp;<span class=\"number\">0x06</span>));</div><div class=\"line\">    <span class=\"keyword\">while</span>( i &lt; <span class=\"number\">200</span> )<span class=\"comment\">//判断EEPROM能否正常操作</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( EEPROM_SendByte(ChipAddr) == <span class=\"number\">0</span> )<span class=\"comment\">//发送器件地址</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        EEPROM_I2C_Start();</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>( i &gt;= <span class=\"number\">200</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        Flag.Error &amp;= ~F_EEPROM_Err;</div><div class=\"line\">    </div><div class=\"line\">    Addr = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(EEPROM_Addr&gt;&gt;<span class=\"number\">8</span>) &amp; <span class=\"number\">0x3F</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(Addr) )<span class=\"comment\">//发送子地址高位</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Addr = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)EEPROM_Addr;</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(Addr) )<span class=\"comment\">//发送子地址低位</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    EEPROM_I2C_Start();</div><div class=\"line\">    ChipAddr |= <span class=\"number\">0x01</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(ChipAddr) )<span class=\"comment\">//发送器件地址，读命令</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>( (Lenth--) &gt; <span class=\"number\">0</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( Lenth != <span class=\"number\">0</span> )</div><div class=\"line\">            ACK = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            ACK = <span class=\"number\">1</span>;</div><div class=\"line\">        *RAM_Addr = EEPROM_ReceiveByte(ACK);</div><div class=\"line\">        RAM_Addr++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    EEPROM_I2C_Stop();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/*  函数名称：_E2Pwrite                                                */</span></div><div class=\"line\"><span class=\"comment\">/*  函数功能：往EEPROM里写数据                                         */</span></div><div class=\"line\"><span class=\"comment\">/*  输入参数：EEPROM_Addr：目的地址                                    */</span></div><div class=\"line\"><span class=\"comment\">/*            RAM_Addr：源地址                                         */</span></div><div class=\"line\"><span class=\"comment\">/*            Lenth：数据长度                                          */</span></div><div class=\"line\"><span class=\"comment\">/*  输出参数：0为成功，其余为失败                                      */</span></div><div class=\"line\"><span class=\"comment\">/***********************************************************************/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">I2C_Write</span><span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> EEPROM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* RAM_Addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> Lenth )</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ChipAddr,Addr,i=<span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    ClrWdt();</div><div class=\"line\">    EEPROM_I2C_Init();</div><div class=\"line\">    EEPROM_I2C_Start();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//ChipAddr = 0xAE;</span></div><div class=\"line\">    ChipAddr = (EEPROM_ICAddr | ((EEPROM_Addr&gt;&gt;<span class=\"number\">13</span>)&amp;<span class=\"number\">0x06</span>));</div><div class=\"line\">    <span class=\"comment\">//EEPROM在完成一次写入命令后要延迟5到10毫秒，通过连续发器件地址，一旦总线正常，即立刻进行下一次总线操作</span></div><div class=\"line\">    <span class=\"keyword\">while</span>( i &lt; <span class=\"number\">200</span> )<span class=\"comment\">//判断EEPROM能否正常操作</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>( EEPROM_SendByte(ChipAddr) == <span class=\"number\">0</span> )<span class=\"comment\">//发送器件地址</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        EEPROM_I2C_Start();</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>( i &gt;= <span class=\"number\">200</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        Flag.Error &amp;= ~F_EEPROM_Err;</div><div class=\"line\">    </div><div class=\"line\">    Addr = ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(EEPROM_Addr&gt;&gt;<span class=\"number\">8</span>) &amp; <span class=\"number\">0x3F</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(Addr) )<span class=\"comment\">//发送子地址高位</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Addr = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)EEPROM_Addr;</div><div class=\"line\">    <span class=\"keyword\">if</span>( EEPROM_SendByte(Addr) )<span class=\"comment\">//发送子地址低位</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_I2C_Stop();</div><div class=\"line\">        Flag.Error |= F_EEPROM_Err;<span class=\"comment\">//器件不正常</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        EEPROM_SendByte(*RAM_Addr);</div><div class=\"line\">        RAM_Addr++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span>( (--Lenth) &gt; <span class=\"number\">0</span> );</div><div class=\"line\">    EEPROM_I2C_Stop();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"M-Bus和DLT645-2007通讯协议","toc":true,"date":"2016-08-03T15:12:15.000Z","_content":"`M-Bus(meter-bus)`是一个专用于公共事业仪表的总线结构，《DL/T645-2007多功能电能表通信协议》是发改委发布的一项用于国内电能表数据通信的协议规范，相当于MBus的\"汉化版\"。\n## MBus总线协议帧格式\n\n|--前导字节--|--帧起始符--|--仪表类型--|--从站地址域--|--控制码--|--数据长度--|--数据域--|--纵向校验码--|--帧结束--|\n字节格式：8位数据位+1个起始位+1个奇偶校验位+1停止位。传输时，低位在前，高位在后。\n\n### 前导字节\n通信前设备发送一定数目的`FEH`,本质上是物理层的要求，用于唤醒设备和同步，一般是2~4个`FE`。\n\n### 帧起始符\n表示一帧信息的开始，为`68H`。\n\n### 仪表类型\n指示参与通信的从站是那种类型的计量仪表:\n- 10H~19H: 水表\n- 20H~29H: 热表\n- 30H~39H: 燃气表\n\n### 地址域\n地址域指示与之通信的从站的地址，由7个字节组成A<sub>0</sub>A<sub>1</sub>A<sub>2</sub>A<sub>3</sub>A<sub>4</sub>A<sub>5</sub>A<sub>6</sub>,每个字节为2为BCD码，其中A<sub>5</sub>A<sub>6</sub>为厂商代码，低地址在前高地址在后，`AAH`为通配地址，当为`AAAAAAAAAAAAAA`时，代表广播。\n\n### 控制码\n帧信息控制代码，一个字节，字节的低6位代表相应信息的控制码（如`000100`代表读计量数据），第7位表示从站应答信息（0-正确应答，1-异常信息的应答），第8位表示帧的发送方（0-主站的控制帧，1-从站应答帧）。\n\n### 数据长度\n数据域的数据长度。\n\n### 数据域\n数据，含义根据控制码及上下文确定。发送方进行加`33H`处理，接收方进行减`33H`处理。\n\n### 纵向校验码\n从帧起始符开始到校验码之前得所有字节的二进制算术累加和，无进位。\n\n### 帧结束符\n表示一帧信息的结束，为`68H`。\n\n## 数据传输\n- 所有多字节数据域（地址域、数据域）均先传送地位后高位，例如传输数据`0x12345678`,先发送数据`0x78`,依次发送`0x56`、`0x34`、`0x12`。\n- 通讯为半双工通信，每次通信均为主站请求、从站应答。\n- 字节奇偶校验错误、帧校验错误都代表数据通信异常，丢弃信息帧。\n- 最长响应时间为`Tr = 50ms + 30 * Tbyte`,其中`Tbyte`为传输一个字节所需时间。","source":"_posts/MBusAndDTL645.md","raw":"---\ntitle: M-Bus和DLT645-2007通讯协议\ntoc: true\ndate: 2016-08-03 15:12:15\ncategories: 总线协议\ntags: MBus DL/T645-2007 电能表通信协议\n---\n`M-Bus(meter-bus)`是一个专用于公共事业仪表的总线结构，《DL/T645-2007多功能电能表通信协议》是发改委发布的一项用于国内电能表数据通信的协议规范，相当于MBus的\"汉化版\"。\n## MBus总线协议帧格式\n\n|--前导字节--|--帧起始符--|--仪表类型--|--从站地址域--|--控制码--|--数据长度--|--数据域--|--纵向校验码--|--帧结束--|\n字节格式：8位数据位+1个起始位+1个奇偶校验位+1停止位。传输时，低位在前，高位在后。\n\n### 前导字节\n通信前设备发送一定数目的`FEH`,本质上是物理层的要求，用于唤醒设备和同步，一般是2~4个`FE`。\n\n### 帧起始符\n表示一帧信息的开始，为`68H`。\n\n### 仪表类型\n指示参与通信的从站是那种类型的计量仪表:\n- 10H~19H: 水表\n- 20H~29H: 热表\n- 30H~39H: 燃气表\n\n### 地址域\n地址域指示与之通信的从站的地址，由7个字节组成A<sub>0</sub>A<sub>1</sub>A<sub>2</sub>A<sub>3</sub>A<sub>4</sub>A<sub>5</sub>A<sub>6</sub>,每个字节为2为BCD码，其中A<sub>5</sub>A<sub>6</sub>为厂商代码，低地址在前高地址在后，`AAH`为通配地址，当为`AAAAAAAAAAAAAA`时，代表广播。\n\n### 控制码\n帧信息控制代码，一个字节，字节的低6位代表相应信息的控制码（如`000100`代表读计量数据），第7位表示从站应答信息（0-正确应答，1-异常信息的应答），第8位表示帧的发送方（0-主站的控制帧，1-从站应答帧）。\n\n### 数据长度\n数据域的数据长度。\n\n### 数据域\n数据，含义根据控制码及上下文确定。发送方进行加`33H`处理，接收方进行减`33H`处理。\n\n### 纵向校验码\n从帧起始符开始到校验码之前得所有字节的二进制算术累加和，无进位。\n\n### 帧结束符\n表示一帧信息的结束，为`68H`。\n\n## 数据传输\n- 所有多字节数据域（地址域、数据域）均先传送地位后高位，例如传输数据`0x12345678`,先发送数据`0x78`,依次发送`0x56`、`0x34`、`0x12`。\n- 通讯为半双工通信，每次通信均为主站请求、从站应答。\n- 字节奇偶校验错误、帧校验错误都代表数据通信异常，丢弃信息帧。\n- 最长响应时间为`Tr = 50ms + 30 * Tbyte`,其中`Tbyte`为传输一个字节所需时间。","slug":"MBusAndDTL645","published":1,"updated":"2016-08-03T07:54:37.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9ank000f70g5q2282sw7","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><code>M-Bus(meter-bus)</code>是一个专用于公共事业仪表的总线结构，《DL/T645-2007多功能电能表通信协议》是发改委发布的一项用于国内电能表数据通信的协议规范，相当于MBus的”汉化版”。</p>\n<h2 id=\"MBus总线协议帧格式\"><a href=\"#MBus总线协议帧格式\" class=\"headerlink\" title=\"MBus总线协议帧格式\"></a>MBus总线协议帧格式</h2><p>|–前导字节–|–帧起始符–|–仪表类型–|–从站地址域–|–控制码–|–数据长度–|–数据域–|–纵向校验码–|–帧结束–|<br>字节格式：8位数据位+1个起始位+1个奇偶校验位+1停止位。传输时，低位在前，高位在后。</p>\n<h3 id=\"前导字节\"><a href=\"#前导字节\" class=\"headerlink\" title=\"前导字节\"></a>前导字节</h3><p>通信前设备发送一定数目的<code>FEH</code>,本质上是物理层的要求，用于唤醒设备和同步，一般是2~4个<code>FE</code>。</p>\n<h3 id=\"帧起始符\"><a href=\"#帧起始符\" class=\"headerlink\" title=\"帧起始符\"></a>帧起始符</h3><p>表示一帧信息的开始，为<code>68H</code>。</p>\n<h3 id=\"仪表类型\"><a href=\"#仪表类型\" class=\"headerlink\" title=\"仪表类型\"></a>仪表类型</h3><p>指示参与通信的从站是那种类型的计量仪表:</p>\n<ul>\n<li>10H~19H: 水表</li>\n<li>20H~29H: 热表</li>\n<li>30H~39H: 燃气表</li>\n</ul>\n<h3 id=\"地址域\"><a href=\"#地址域\" class=\"headerlink\" title=\"地址域\"></a>地址域</h3><p>地址域指示与之通信的从站的地址，由7个字节组成A<sub>0</sub>A<sub>1</sub>A<sub>2</sub>A<sub>3</sub>A<sub>4</sub>A<sub>5</sub>A<sub>6</sub>,每个字节为2为BCD码，其中A<sub>5</sub>A<sub>6</sub>为厂商代码，低地址在前高地址在后，<code>AAH</code>为通配地址，当为<code>AAAAAAAAAAAAAA</code>时，代表广播。</p>\n<h3 id=\"控制码\"><a href=\"#控制码\" class=\"headerlink\" title=\"控制码\"></a>控制码</h3><p>帧信息控制代码，一个字节，字节的低6位代表相应信息的控制码（如<code>000100</code>代表读计量数据），第7位表示从站应答信息（0-正确应答，1-异常信息的应答），第8位表示帧的发送方（0-主站的控制帧，1-从站应答帧）。</p>\n<h3 id=\"数据长度\"><a href=\"#数据长度\" class=\"headerlink\" title=\"数据长度\"></a>数据长度</h3><p>数据域的数据长度。</p>\n<h3 id=\"数据域\"><a href=\"#数据域\" class=\"headerlink\" title=\"数据域\"></a>数据域</h3><p>数据，含义根据控制码及上下文确定。发送方进行加<code>33H</code>处理，接收方进行减<code>33H</code>处理。</p>\n<h3 id=\"纵向校验码\"><a href=\"#纵向校验码\" class=\"headerlink\" title=\"纵向校验码\"></a>纵向校验码</h3><p>从帧起始符开始到校验码之前得所有字节的二进制算术累加和，无进位。</p>\n<h3 id=\"帧结束符\"><a href=\"#帧结束符\" class=\"headerlink\" title=\"帧结束符\"></a>帧结束符</h3><p>表示一帧信息的结束，为<code>68H</code>。</p>\n<h2 id=\"数据传输\"><a href=\"#数据传输\" class=\"headerlink\" title=\"数据传输\"></a>数据传输</h2><ul>\n<li>所有多字节数据域（地址域、数据域）均先传送地位后高位，例如传输数据<code>0x12345678</code>,先发送数据<code>0x78</code>,依次发送<code>0x56</code>、<code>0x34</code>、<code>0x12</code>。</li>\n<li>通讯为半双工通信，每次通信均为主站请求、从站应答。</li>\n<li>字节奇偶校验错误、帧校验错误都代表数据通信异常，丢弃信息帧。</li>\n<li>最长响应时间为<code>Tr = 50ms + 30 * Tbyte</code>,其中<code>Tbyte</code>为传输一个字节所需时间。</li>\n</ul>\n","excerpt":"","more":"<p><code>M-Bus(meter-bus)</code>是一个专用于公共事业仪表的总线结构，《DL/T645-2007多功能电能表通信协议》是发改委发布的一项用于国内电能表数据通信的协议规范，相当于MBus的”汉化版”。</p>\n<h2 id=\"MBus总线协议帧格式\"><a href=\"#MBus总线协议帧格式\" class=\"headerlink\" title=\"MBus总线协议帧格式\"></a>MBus总线协议帧格式</h2><p>|–前导字节–|–帧起始符–|–仪表类型–|–从站地址域–|–控制码–|–数据长度–|–数据域–|–纵向校验码–|–帧结束–|<br>字节格式：8位数据位+1个起始位+1个奇偶校验位+1停止位。传输时，低位在前，高位在后。</p>\n<h3 id=\"前导字节\"><a href=\"#前导字节\" class=\"headerlink\" title=\"前导字节\"></a>前导字节</h3><p>通信前设备发送一定数目的<code>FEH</code>,本质上是物理层的要求，用于唤醒设备和同步，一般是2~4个<code>FE</code>。</p>\n<h3 id=\"帧起始符\"><a href=\"#帧起始符\" class=\"headerlink\" title=\"帧起始符\"></a>帧起始符</h3><p>表示一帧信息的开始，为<code>68H</code>。</p>\n<h3 id=\"仪表类型\"><a href=\"#仪表类型\" class=\"headerlink\" title=\"仪表类型\"></a>仪表类型</h3><p>指示参与通信的从站是那种类型的计量仪表:</p>\n<ul>\n<li>10H~19H: 水表</li>\n<li>20H~29H: 热表</li>\n<li>30H~39H: 燃气表</li>\n</ul>\n<h3 id=\"地址域\"><a href=\"#地址域\" class=\"headerlink\" title=\"地址域\"></a>地址域</h3><p>地址域指示与之通信的从站的地址，由7个字节组成A<sub>0</sub>A<sub>1</sub>A<sub>2</sub>A<sub>3</sub>A<sub>4</sub>A<sub>5</sub>A<sub>6</sub>,每个字节为2为BCD码，其中A<sub>5</sub>A<sub>6</sub>为厂商代码，低地址在前高地址在后，<code>AAH</code>为通配地址，当为<code>AAAAAAAAAAAAAA</code>时，代表广播。</p>\n<h3 id=\"控制码\"><a href=\"#控制码\" class=\"headerlink\" title=\"控制码\"></a>控制码</h3><p>帧信息控制代码，一个字节，字节的低6位代表相应信息的控制码（如<code>000100</code>代表读计量数据），第7位表示从站应答信息（0-正确应答，1-异常信息的应答），第8位表示帧的发送方（0-主站的控制帧，1-从站应答帧）。</p>\n<h3 id=\"数据长度\"><a href=\"#数据长度\" class=\"headerlink\" title=\"数据长度\"></a>数据长度</h3><p>数据域的数据长度。</p>\n<h3 id=\"数据域\"><a href=\"#数据域\" class=\"headerlink\" title=\"数据域\"></a>数据域</h3><p>数据，含义根据控制码及上下文确定。发送方进行加<code>33H</code>处理，接收方进行减<code>33H</code>处理。</p>\n<h3 id=\"纵向校验码\"><a href=\"#纵向校验码\" class=\"headerlink\" title=\"纵向校验码\"></a>纵向校验码</h3><p>从帧起始符开始到校验码之前得所有字节的二进制算术累加和，无进位。</p>\n<h3 id=\"帧结束符\"><a href=\"#帧结束符\" class=\"headerlink\" title=\"帧结束符\"></a>帧结束符</h3><p>表示一帧信息的结束，为<code>68H</code>。</p>\n<h2 id=\"数据传输\"><a href=\"#数据传输\" class=\"headerlink\" title=\"数据传输\"></a>数据传输</h2><ul>\n<li>所有多字节数据域（地址域、数据域）均先传送地位后高位，例如传输数据<code>0x12345678</code>,先发送数据<code>0x78</code>,依次发送<code>0x56</code>、<code>0x34</code>、<code>0x12</code>。</li>\n<li>通讯为半双工通信，每次通信均为主站请求、从站应答。</li>\n<li>字节奇偶校验错误、帧校验错误都代表数据通信异常，丢弃信息帧。</li>\n<li>最长响应时间为<code>Tr = 50ms + 30 * Tbyte</code>,其中<code>Tbyte</code>为传输一个字节所需时间。</li>\n</ul>\n"},{"title":"关于keil和C的那些杂乱知识点","date":"2016-07-14T14:47:14.000Z","toc":true,"_content":"最近在做bootloader的时候，对51的存储及架构和keil的使用有了更深入的了解，由于知识点比较杂乱，先记录下来，后期再整理。\n<!--more-->\n\n- 在bootloader程序与用户程序之间跳转的时候使用`LJMP`长跳转指令而不是`LCALL`长调用指令。原因在于，如果使用长调用，会导致函数的嵌套甚至是递归，这显然不符合正常处理逻辑。\n\n- 成为一个合格的嵌入式软件开发者掌握C的使用基本上就可以了，但是想要更深入点，去对处理器有个更深入的了解和认识，不会汇编语言是一件很痛苦的事情。\n\n- startup.A51可以在用户代码运行之前完成数据空间、栈空间的初始化。合理使用并根据实际项目需求区修改，可以实现些期望在用户代码执行之前完成的操作，比如作为全局变量的数据的初始化。\n\n- `typedef void (code*USERAPP)(void);` 定义一个函数返回值和形参都是void的函数指针，使用效果同`LCALL #funAddr`。\n\n- 因为IAP的操作必须响应相应中断，否则会导致MCU无限挂起，因此需要将所有的中断都进行绝对定位，并且中断向量所在的第一页不能擦除（如果擦除会导致如果升级失败会导致无法再次进入bootloader）。\n\n- 我现在使用的V9821存在十几个中断向量，如果一个个在keil的`BL51 Locate`增加绝对地址的链接，会很麻烦也会容易出错，这点需要寻求其他更方便的解决方法，比如增加一个专门用于绝对定位的A51文件。\n\n- 未完待续\n\n- 对于多个函数的绝对地址链接在keil中实现起来比较麻烦，在仔细研究过keil工程后发现，keil的后缀为`.uvproj`的工程文件实际上是一个`xml`文件，里面`<CodeSegmentName>`标签所保存的就是`BL51 Locate`选项卡中添加的绝对定位信息，修改这个标签的内容同样可以达到同样的目的。\n\n- M51文件是keil生成的内存布局文件，在设计bootloader程序时尤其有用。","source":"_posts/Keil&C.md","raw":"---\ntitle: 关于keil和C的那些杂乱知识点\ndate: 2016-07-14 14:47:14\ntoc: true\ncategories: C\ntags: keil C\n---\n最近在做bootloader的时候，对51的存储及架构和keil的使用有了更深入的了解，由于知识点比较杂乱，先记录下来，后期再整理。\n<!--more-->\n\n- 在bootloader程序与用户程序之间跳转的时候使用`LJMP`长跳转指令而不是`LCALL`长调用指令。原因在于，如果使用长调用，会导致函数的嵌套甚至是递归，这显然不符合正常处理逻辑。\n\n- 成为一个合格的嵌入式软件开发者掌握C的使用基本上就可以了，但是想要更深入点，去对处理器有个更深入的了解和认识，不会汇编语言是一件很痛苦的事情。\n\n- startup.A51可以在用户代码运行之前完成数据空间、栈空间的初始化。合理使用并根据实际项目需求区修改，可以实现些期望在用户代码执行之前完成的操作，比如作为全局变量的数据的初始化。\n\n- `typedef void (code*USERAPP)(void);` 定义一个函数返回值和形参都是void的函数指针，使用效果同`LCALL #funAddr`。\n\n- 因为IAP的操作必须响应相应中断，否则会导致MCU无限挂起，因此需要将所有的中断都进行绝对定位，并且中断向量所在的第一页不能擦除（如果擦除会导致如果升级失败会导致无法再次进入bootloader）。\n\n- 我现在使用的V9821存在十几个中断向量，如果一个个在keil的`BL51 Locate`增加绝对地址的链接，会很麻烦也会容易出错，这点需要寻求其他更方便的解决方法，比如增加一个专门用于绝对定位的A51文件。\n\n- 未完待续\n\n- 对于多个函数的绝对地址链接在keil中实现起来比较麻烦，在仔细研究过keil工程后发现，keil的后缀为`.uvproj`的工程文件实际上是一个`xml`文件，里面`<CodeSegmentName>`标签所保存的就是`BL51 Locate`选项卡中添加的绝对定位信息，修改这个标签的内容同样可以达到同样的目的。\n\n- M51文件是keil生成的内存布局文件，在设计bootloader程序时尤其有用。","slug":"Keil&C","published":1,"updated":"2016-08-03T02:29:25.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9ann000j70g5uyhka6fc","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>最近在做bootloader的时候，对51的存储及架构和keil的使用有了更深入的了解，由于知识点比较杂乱，先记录下来，后期再整理。<br><a id=\"more\"></a></p>\n<ul>\n<li><p>在bootloader程序与用户程序之间跳转的时候使用<code>LJMP</code>长跳转指令而不是<code>LCALL</code>长调用指令。原因在于，如果使用长调用，会导致函数的嵌套甚至是递归，这显然不符合正常处理逻辑。</p>\n</li>\n<li><p>成为一个合格的嵌入式软件开发者掌握C的使用基本上就可以了，但是想要更深入点，去对处理器有个更深入的了解和认识，不会汇编语言是一件很痛苦的事情。</p>\n</li>\n<li><p>startup.A51可以在用户代码运行之前完成数据空间、栈空间的初始化。合理使用并根据实际项目需求区修改，可以实现些期望在用户代码执行之前完成的操作，比如作为全局变量的数据的初始化。</p>\n</li>\n<li><p><code>typedef void (code*USERAPP)(void);</code> 定义一个函数返回值和形参都是void的函数指针，使用效果同<code>LCALL #funAddr</code>。</p>\n</li>\n<li><p>因为IAP的操作必须响应相应中断，否则会导致MCU无限挂起，因此需要将所有的中断都进行绝对定位，并且中断向量所在的第一页不能擦除（如果擦除会导致如果升级失败会导致无法再次进入bootloader）。</p>\n</li>\n<li><p>我现在使用的V9821存在十几个中断向量，如果一个个在keil的<code>BL51 Locate</code>增加绝对地址的链接，会很麻烦也会容易出错，这点需要寻求其他更方便的解决方法，比如增加一个专门用于绝对定位的A51文件。</p>\n</li>\n<li><p>未完待续</p>\n</li>\n<li><p>对于多个函数的绝对地址链接在keil中实现起来比较麻烦，在仔细研究过keil工程后发现，keil的后缀为<code>.uvproj</code>的工程文件实际上是一个<code>xml</code>文件，里面<code>&lt;CodeSegmentName&gt;</code>标签所保存的就是<code>BL51 Locate</code>选项卡中添加的绝对定位信息，修改这个标签的内容同样可以达到同样的目的。</p>\n</li>\n<li><p>M51文件是keil生成的内存布局文件，在设计bootloader程序时尤其有用。</p>\n</li>\n</ul>\n","excerpt":"<p>最近在做bootloader的时候，对51的存储及架构和keil的使用有了更深入的了解，由于知识点比较杂乱，先记录下来，后期再整理。<br>","more":"</p>\n<ul>\n<li><p>在bootloader程序与用户程序之间跳转的时候使用<code>LJMP</code>长跳转指令而不是<code>LCALL</code>长调用指令。原因在于，如果使用长调用，会导致函数的嵌套甚至是递归，这显然不符合正常处理逻辑。</p>\n</li>\n<li><p>成为一个合格的嵌入式软件开发者掌握C的使用基本上就可以了，但是想要更深入点，去对处理器有个更深入的了解和认识，不会汇编语言是一件很痛苦的事情。</p>\n</li>\n<li><p>startup.A51可以在用户代码运行之前完成数据空间、栈空间的初始化。合理使用并根据实际项目需求区修改，可以实现些期望在用户代码执行之前完成的操作，比如作为全局变量的数据的初始化。</p>\n</li>\n<li><p><code>typedef void (code*USERAPP)(void);</code> 定义一个函数返回值和形参都是void的函数指针，使用效果同<code>LCALL #funAddr</code>。</p>\n</li>\n<li><p>因为IAP的操作必须响应相应中断，否则会导致MCU无限挂起，因此需要将所有的中断都进行绝对定位，并且中断向量所在的第一页不能擦除（如果擦除会导致如果升级失败会导致无法再次进入bootloader）。</p>\n</li>\n<li><p>我现在使用的V9821存在十几个中断向量，如果一个个在keil的<code>BL51 Locate</code>增加绝对地址的链接，会很麻烦也会容易出错，这点需要寻求其他更方便的解决方法，比如增加一个专门用于绝对定位的A51文件。</p>\n</li>\n<li><p>未完待续</p>\n</li>\n<li><p>对于多个函数的绝对地址链接在keil中实现起来比较麻烦，在仔细研究过keil工程后发现，keil的后缀为<code>.uvproj</code>的工程文件实际上是一个<code>xml</code>文件，里面<code>&lt;CodeSegmentName&gt;</code>标签所保存的就是<code>BL51 Locate</code>选项卡中添加的绝对定位信息，修改这个标签的内容同样可以达到同样的目的。</p>\n</li>\n<li><p>M51文件是keil生成的内存布局文件，在设计bootloader程序时尤其有用。</p>\n</li>\n</ul>"},{"title":"SPI","date":"2016-08-03T10:12:15.000Z","_content":"\n参考链接:\n- [wikipedia SPI](https://zh.wikipedia.org/zh-cn/SPI) \n- [I<sup>2</sup>C](http://www.xn--4gqa63c686ta68iba.ren/2016/08/09/IIC/)\n\n- SPI与I<sup>2</sup>C总线类似，不同的是I<sup>2</sup>C是半双工，SPI是全双工的数据总线。\n- SPI采用四线制：\n```\n\tSCLK（Serial Clock）：串行时钟，由主机发出\n\tMOSI（Master Output,Slave Input）：主机输出从机输入信号，由主机发出\n\tMISO（Master Input,Slave Output）：主机输入从机输出信号，由从机发出\n\tSS（Slave Selected）：片选信号，由主机发出，低电平有效\n```\n- 与I<sup>2</sup>C类似，沿接收、沿发送，高低位时数据线保持稳定。\n- I<sup>2</sup>C采用发送数据中包含地址信息来选择从设备，SPI使用片选信号来选择从设备，因此从标准上来看，I<sup>2</sup>C比SPI的从设备选择更加灵活。\n- 使用SPI时，需要明确总线时钟极性与相位。根据实际外设需求设置。","source":"_posts/SPI.md","raw":"---\ntitle: SPI\ndate: 2016-08-03 10:12:15\ncategories: 总线协议\ntags: \n---\n\n参考链接:\n- [wikipedia SPI](https://zh.wikipedia.org/zh-cn/SPI) \n- [I<sup>2</sup>C](http://www.xn--4gqa63c686ta68iba.ren/2016/08/09/IIC/)\n\n- SPI与I<sup>2</sup>C总线类似，不同的是I<sup>2</sup>C是半双工，SPI是全双工的数据总线。\n- SPI采用四线制：\n```\n\tSCLK（Serial Clock）：串行时钟，由主机发出\n\tMOSI（Master Output,Slave Input）：主机输出从机输入信号，由主机发出\n\tMISO（Master Input,Slave Output）：主机输入从机输出信号，由从机发出\n\tSS（Slave Selected）：片选信号，由主机发出，低电平有效\n```\n- 与I<sup>2</sup>C类似，沿接收、沿发送，高低位时数据线保持稳定。\n- I<sup>2</sup>C采用发送数据中包含地址信息来选择从设备，SPI使用片选信号来选择从设备，因此从标准上来看，I<sup>2</sup>C比SPI的从设备选择更加灵活。\n- 使用SPI时，需要明确总线时钟极性与相位。根据实际外设需求设置。","slug":"SPI","published":1,"updated":"2016-09-14T05:16:54.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9anp000k70g5lxzaqvto","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>参考链接:</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/SPI\" target=\"_blank\" rel=\"external\">wikipedia SPI</a> </li>\n<li><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/09/IIC/\">I<sup>2</sup>C</a></p>\n</li>\n<li><p>SPI与I<sup>2</sup>C总线类似，不同的是I<sup>2</sup>C是半双工，SPI是全双工的数据总线。</p>\n</li>\n<li><p>SPI采用四线制：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SCLK（Serial Clock）：串行时钟，由主机发出</div><div class=\"line\">MOSI（Master Output,Slave Input）：主机输出从机输入信号，由主机发出</div><div class=\"line\">MISO（Master Input,Slave Output）：主机输入从机输出信号，由从机发出</div><div class=\"line\">SS（Slave Selected）：片选信号，由主机发出，低电平有效</div></pre></td></tr></table></figure>\n</li>\n<li><p>与I<sup>2</sup>C类似，沿接收、沿发送，高低位时数据线保持稳定。</p>\n</li>\n<li>I<sup>2</sup>C采用发送数据中包含地址信息来选择从设备，SPI使用片选信号来选择从设备，因此从标准上来看，I<sup>2</sup>C比SPI的从设备选择更加灵活。</li>\n<li>使用SPI时，需要明确总线时钟极性与相位。根据实际外设需求设置。</li>\n</ul>\n","excerpt":"","more":"<p>参考链接:</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/SPI\">wikipedia SPI</a> </li>\n<li><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/09/IIC/\">I<sup>2</sup>C</a></p>\n</li>\n<li><p>SPI与I<sup>2</sup>C总线类似，不同的是I<sup>2</sup>C是半双工，SPI是全双工的数据总线。</p>\n</li>\n<li><p>SPI采用四线制：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SCLK（Serial Clock）：串行时钟，由主机发出</div><div class=\"line\">MOSI（Master Output,Slave Input）：主机输出从机输入信号，由主机发出</div><div class=\"line\">MISO（Master Input,Slave Output）：主机输入从机输出信号，由从机发出</div><div class=\"line\">SS（Slave Selected）：片选信号，由主机发出，低电平有效</div></pre></td></tr></table></figure>\n</li>\n<li><p>与I<sup>2</sup>C类似，沿接收、沿发送，高低位时数据线保持稳定。</p>\n</li>\n<li>I<sup>2</sup>C采用发送数据中包含地址信息来选择从设备，SPI使用片选信号来选择从设备，因此从标准上来看，I<sup>2</sup>C比SPI的从设备选择更加灵活。</li>\n<li>使用SPI时，需要明确总线时钟极性与相位。根据实际外设需求设置。</li>\n</ul>\n"},{"title":"STM32型号命名规则","date":"2016-11-28T11:11:33.000Z","_content":"## stm32型号命名规则\n示例：\n\n```\nSTM32 | F | 100 | C | 6 | T | 6 | B | XXX\n  1     2    3    4   5   6   7   8    9\n```\n\n从上面的料号可以看出以下信息：\n\nST品牌ARM Cortex-Mx系列内核32位超值型MCU，LQFP -48封装 闪存容量32KB 温度范围-40℃-85℃；\n\n1. 产品系列:\nSTM32代表ST品牌Cortex-Mx系列内核（ARM）的32位MCU；\n\n2. 产品类型: F：通用快闪（Flash Memory）；\nL：低电压（1.65～3.6V）；F类型中F0xx和 F1xx系列为2.0～3.6V; F2xx和F4xx系列为1.8～3.6V;W：无线系统芯片,开发版.\n\n3. 产品子系列：\n050：ARM Cortex-M0内核；051：ARM Cortex-M0内核；100：ARM Cortex-M3内核，超值型； 101：ARM Cortex-M3内核，基本型； 102：ARM Cortex-M3内核，USB基本型； 103：ARM Cortex-M3内核，增强型； 105：ARM Cortex-M3内核，USB互联网型； 107：ARM Cortex-M3内核，USB互联网型、以太网型； 108：ARM Cortex-M3内核，IEEE802.15.4标准； 151：ARM Cortex-M3内核，不带LCD； 152/162：ARM Cortex-M3内核，带LCD；\n205/207：ARM Cortex-M3内核，不加密模块.（备注：150DMIPS，高达1MB闪存/128+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头；）\n215/217：ARM Cortex-M3内核，加密模块。（备注：150DMIPS，高达1MB闪存/128+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头；）\n405/407：ARM Cortex-M4内核，不加密模块。（备注：MCU+FPU，210DMIPS，高达1MB闪存/192+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头）；\n415/417：ARM Cortex-M4内核，加密模块。（备注：MCU+FPU，210DMIPS，高达1MB闪存/192+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头）；\n\n4. 管脚数:\nF：20PIN；G：28PIN；K：32PIN；T：36PIN；H：40PIN；C：48PIN；U：63PIN；R：64PIN；O：90PIN；V：100PINQ：132PIN；Z：144PIN； I：176PIN；\n\n5. Flash存存容量:\n4：16KB flash；（小容量）; 6：32KB flash；（小容量）;8：64KB flash；（中容量）;B：128KB flash；（中容量）;C：256KB flash；（大容量）;D：384KB flash；（大容量）;E：512KB flash；（大容量）;F：768KB flash；（大容量）;G：1MKB flash；（大容量）\n\n6. 封装:\nT：LQFP；H：BGA；U：VFQFPN；Y：WLCSP/ WLCSP64；\n\n7. 温度范围:\n6：-40℃-85℃；（工业级）; 7：-40℃-105℃；（工业级）\n\n8. 内部代码:\n“A” or blank; A：48/32脚封装；Blank：28/20脚封装;\n\n9. 包装方式：\nTR：带卷； XXX：盘装;D：电压范围1.65V – 3.6V且BOR无使能；无特性：电压范围1.8V – 3.6V且BOR使能；\n","source":"_posts/STM32-NOTE.md","raw":"---\ntitle: STM32型号命名规则\ndate: 2016-11-28 11:11:33\ntags:\n---\n## stm32型号命名规则\n示例：\n\n```\nSTM32 | F | 100 | C | 6 | T | 6 | B | XXX\n  1     2    3    4   5   6   7   8    9\n```\n\n从上面的料号可以看出以下信息：\n\nST品牌ARM Cortex-Mx系列内核32位超值型MCU，LQFP -48封装 闪存容量32KB 温度范围-40℃-85℃；\n\n1. 产品系列:\nSTM32代表ST品牌Cortex-Mx系列内核（ARM）的32位MCU；\n\n2. 产品类型: F：通用快闪（Flash Memory）；\nL：低电压（1.65～3.6V）；F类型中F0xx和 F1xx系列为2.0～3.6V; F2xx和F4xx系列为1.8～3.6V;W：无线系统芯片,开发版.\n\n3. 产品子系列：\n050：ARM Cortex-M0内核；051：ARM Cortex-M0内核；100：ARM Cortex-M3内核，超值型； 101：ARM Cortex-M3内核，基本型； 102：ARM Cortex-M3内核，USB基本型； 103：ARM Cortex-M3内核，增强型； 105：ARM Cortex-M3内核，USB互联网型； 107：ARM Cortex-M3内核，USB互联网型、以太网型； 108：ARM Cortex-M3内核，IEEE802.15.4标准； 151：ARM Cortex-M3内核，不带LCD； 152/162：ARM Cortex-M3内核，带LCD；\n205/207：ARM Cortex-M3内核，不加密模块.（备注：150DMIPS，高达1MB闪存/128+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头；）\n215/217：ARM Cortex-M3内核，加密模块。（备注：150DMIPS，高达1MB闪存/128+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头；）\n405/407：ARM Cortex-M4内核，不加密模块。（备注：MCU+FPU，210DMIPS，高达1MB闪存/192+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头）；\n415/417：ARM Cortex-M4内核，加密模块。（备注：MCU+FPU，210DMIPS，高达1MB闪存/192+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头）；\n\n4. 管脚数:\nF：20PIN；G：28PIN；K：32PIN；T：36PIN；H：40PIN；C：48PIN；U：63PIN；R：64PIN；O：90PIN；V：100PINQ：132PIN；Z：144PIN； I：176PIN；\n\n5. Flash存存容量:\n4：16KB flash；（小容量）; 6：32KB flash；（小容量）;8：64KB flash；（中容量）;B：128KB flash；（中容量）;C：256KB flash；（大容量）;D：384KB flash；（大容量）;E：512KB flash；（大容量）;F：768KB flash；（大容量）;G：1MKB flash；（大容量）\n\n6. 封装:\nT：LQFP；H：BGA；U：VFQFPN；Y：WLCSP/ WLCSP64；\n\n7. 温度范围:\n6：-40℃-85℃；（工业级）; 7：-40℃-105℃；（工业级）\n\n8. 内部代码:\n“A” or blank; A：48/32脚封装；Blank：28/20脚封装;\n\n9. 包装方式：\nTR：带卷； XXX：盘装;D：电压范围1.65V – 3.6V且BOR无使能；无特性：电压范围1.8V – 3.6V且BOR使能；\n","slug":"STM32-NOTE","published":1,"updated":"2016-12-09T02:36:57.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9ant000o70g5bzusvfmx","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"stm32型号命名规则\"><a href=\"#stm32型号命名规则\" class=\"headerlink\" title=\"stm32型号命名规则\"></a>stm32型号命名规则</h2><p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">STM32 | F | 100 | C | 6 | T | 6 | B | XXX</div><div class=\"line\">  1     2    3    4   5   6   7   8    9</div></pre></td></tr></table></figure>\n<p>从上面的料号可以看出以下信息：</p>\n<p>ST品牌ARM Cortex-Mx系列内核32位超值型MCU，LQFP -48封装 闪存容量32KB 温度范围-40℃-85℃；</p>\n<ol>\n<li><p>产品系列:<br>STM32代表ST品牌Cortex-Mx系列内核（ARM）的32位MCU；</p>\n</li>\n<li><p>产品类型: F：通用快闪（Flash Memory）；<br>L：低电压（1.65～3.6V）；F类型中F0xx和 F1xx系列为2.0～3.6V; F2xx和F4xx系列为1.8～3.6V;W：无线系统芯片,开发版.</p>\n</li>\n<li><p>产品子系列：<br>050：ARM Cortex-M0内核；051：ARM Cortex-M0内核；100：ARM Cortex-M3内核，超值型； 101：ARM Cortex-M3内核，基本型； 102：ARM Cortex-M3内核，USB基本型； 103：ARM Cortex-M3内核，增强型； 105：ARM Cortex-M3内核，USB互联网型； 107：ARM Cortex-M3内核，USB互联网型、以太网型； 108：ARM Cortex-M3内核，IEEE802.15.4标准； 151：ARM Cortex-M3内核，不带LCD； 152/162：ARM Cortex-M3内核，带LCD；<br>205/207：ARM Cortex-M3内核，不加密模块.（备注：150DMIPS，高达1MB闪存/128+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头；）<br>215/217：ARM Cortex-M3内核，加密模块。（备注：150DMIPS，高达1MB闪存/128+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头；）<br>405/407：ARM Cortex-M4内核，不加密模块。（备注：MCU+FPU，210DMIPS，高达1MB闪存/192+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头）；<br>415/417：ARM Cortex-M4内核，加密模块。（备注：MCU+FPU，210DMIPS，高达1MB闪存/192+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头）；</p>\n</li>\n<li><p>管脚数:<br>F：20PIN；G：28PIN；K：32PIN；T：36PIN；H：40PIN；C：48PIN；U：63PIN；R：64PIN；O：90PIN；V：100PINQ：132PIN；Z：144PIN； I：176PIN；</p>\n</li>\n<li><p>Flash存存容量:<br>4：16KB flash；（小容量）; 6：32KB flash；（小容量）;8：64KB flash；（中容量）;B：128KB flash；（中容量）;C：256KB flash；（大容量）;D：384KB flash；（大容量）;E：512KB flash；（大容量）;F：768KB flash；（大容量）;G：1MKB flash；（大容量）</p>\n</li>\n<li><p>封装:<br>T：LQFP；H：BGA；U：VFQFPN；Y：WLCSP/ WLCSP64；</p>\n</li>\n<li><p>温度范围:<br>6：-40℃-85℃；（工业级）; 7：-40℃-105℃；（工业级）</p>\n</li>\n<li><p>内部代码:<br>“A” or blank; A：48/32脚封装；Blank：28/20脚封装;</p>\n</li>\n<li><p>包装方式：<br>TR：带卷； XXX：盘装;D：电压范围1.65V – 3.6V且BOR无使能；无特性：电压范围1.8V – 3.6V且BOR使能；</p>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"stm32型号命名规则\"><a href=\"#stm32型号命名规则\" class=\"headerlink\" title=\"stm32型号命名规则\"></a>stm32型号命名规则</h2><p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">STM32 | F | 100 | C | 6 | T | 6 | B | XXX</div><div class=\"line\">  1     2    3    4   5   6   7   8    9</div></pre></td></tr></table></figure>\n<p>从上面的料号可以看出以下信息：</p>\n<p>ST品牌ARM Cortex-Mx系列内核32位超值型MCU，LQFP -48封装 闪存容量32KB 温度范围-40℃-85℃；</p>\n<ol>\n<li><p>产品系列:<br>STM32代表ST品牌Cortex-Mx系列内核（ARM）的32位MCU；</p>\n</li>\n<li><p>产品类型: F：通用快闪（Flash Memory）；<br>L：低电压（1.65～3.6V）；F类型中F0xx和 F1xx系列为2.0～3.6V; F2xx和F4xx系列为1.8～3.6V;W：无线系统芯片,开发版.</p>\n</li>\n<li><p>产品子系列：<br>050：ARM Cortex-M0内核；051：ARM Cortex-M0内核；100：ARM Cortex-M3内核，超值型； 101：ARM Cortex-M3内核，基本型； 102：ARM Cortex-M3内核，USB基本型； 103：ARM Cortex-M3内核，增强型； 105：ARM Cortex-M3内核，USB互联网型； 107：ARM Cortex-M3内核，USB互联网型、以太网型； 108：ARM Cortex-M3内核，IEEE802.15.4标准； 151：ARM Cortex-M3内核，不带LCD； 152/162：ARM Cortex-M3内核，带LCD；<br>205/207：ARM Cortex-M3内核，不加密模块.（备注：150DMIPS，高达1MB闪存/128+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头；）<br>215/217：ARM Cortex-M3内核，加密模块。（备注：150DMIPS，高达1MB闪存/128+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头；）<br>405/407：ARM Cortex-M4内核，不加密模块。（备注：MCU+FPU，210DMIPS，高达1MB闪存/192+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头）；<br>415/417：ARM Cortex-M4内核，加密模块。（备注：MCU+FPU，210DMIPS，高达1MB闪存/192+4KB RAM，USB OTG HS/FS，以太网，17个TIM，3个ADC，15个通信外设接口和摄像头）；</p>\n</li>\n<li><p>管脚数:<br>F：20PIN；G：28PIN；K：32PIN；T：36PIN；H：40PIN；C：48PIN；U：63PIN；R：64PIN；O：90PIN；V：100PINQ：132PIN；Z：144PIN； I：176PIN；</p>\n</li>\n<li><p>Flash存存容量:<br>4：16KB flash；（小容量）; 6：32KB flash；（小容量）;8：64KB flash；（中容量）;B：128KB flash；（中容量）;C：256KB flash；（大容量）;D：384KB flash；（大容量）;E：512KB flash；（大容量）;F：768KB flash；（大容量）;G：1MKB flash；（大容量）</p>\n</li>\n<li><p>封装:<br>T：LQFP；H：BGA；U：VFQFPN；Y：WLCSP/ WLCSP64；</p>\n</li>\n<li><p>温度范围:<br>6：-40℃-85℃；（工业级）; 7：-40℃-105℃；（工业级）</p>\n</li>\n<li><p>内部代码:<br>“A” or blank; A：48/32脚封装；Blank：28/20脚封装;</p>\n</li>\n<li><p>包装方式：<br>TR：带卷； XXX：盘装;D：电压范围1.65V – 3.6V且BOR无使能；无特性：电压范围1.8V – 3.6V且BOR使能；</p>\n</li>\n</ol>\n"},{"title":"STM32模拟I2C读取BQ34Z100","date":"2017-03-14T15:18:21.000Z","toc":true,"thumbnail":null,"_content":"\n\n总线拉低使用开漏输出、拉高配置为浮动输入以释放总线。同时因为此时为输入模式，ACK的检测可以很方便做到。\n\n# 源文件\n\n```c\n#include <stdio.h>\n#include \"stm32f10x.h\"\n#include \"battery_manage.h\"\n#include \"delay.h\"\nstatic battery_t battery_1;\nstatic battery_t battery_2;\nstatic GPIO_TypeDef* BQ34Z100_GPIO_SCL;\nstatic uint16_t BQ34Z100_SCL_pin;\nstatic GPIO_TypeDef* BQ34Z100_GPIO_SDA;\nstatic uint16_t BQ34Z100_SDA_pin;\n\n/**\n * @brief BQ34Z100 字节转u16\n * @param u8* data 字节指针\n * @return NONE\n */\nstatic inline u16 bytes_to_integer(u8* data)\n{\n\tu16 tmp;\n\n\ttmp = ((data[1] << 8) & 0xFF00);\n\treturn ((u16)(tmp + data[0]) & 0x0000FFFF);\n}\n\n/**\n * @brief BQ34Z100 IO配置\n * @param IO参数\n * @return NONE\n */\nvoid bq34z100_io_config(GPIO_TypeDef* GPIO_SCL, uint16_t SCL_pin,\n                        GPIO_TypeDef* GPIO_SDA, uint16_t SDA_pin)\n{\n\tBQ34Z100_GPIO_SCL = GPIO_SCL;\n\tBQ34Z100_SCL_pin = SCL_pin;\n\tBQ34Z100_GPIO_SDA = GPIO_SDA;\n\tBQ34Z100_SDA_pin = SDA_pin;\n}\n\n/**\n * @brief BQ34Z100 I2C起始信号\n * @param NONE\n * @return NONE\n */\nvoid bq34z100_i2c_start(void)\n{\n\tSDA_1();\n\tI2CDELAY();\n\tSCL_1();\n\tI2CDELAY();\n\tSDA_0();\n\tI2CDELAY();\n\tSCL_0();\n\tI2CDELAY();\n}\n\n/**\n * @brief BQ34Z100 I2C停止信号\n * @param NONE\n * @return NONE\n */\nvoid bq34z100_i2c_stop(void)\n{\n\tSDA_0();\n\tI2CDELAY();\n\tSCL_1();\n\tI2CDELAY();\n\tSDA_1();\n\tI2CDELAY();\n}\n\n/**\n * @brief BQ34Z100 I2C发送字节\n * @param u8 data 发送数据\n * @return ACK\n */\nu8 bq34z100_i2c_send_byte(u8 data)\n{\n\tu8 bits, temp, ack;\n\tu16 wait_cnt;\n\tSCL_0();\n\ttemp = data;\n\tbits = 0x08;\n\twhile (bits != 0x00) {\n\t\tif (temp & 0x80)\n\t\t\tSDA_1();\n\t\telse\n\t\t\tSDA_0();\n\t\tI2CDELAY();\n\t\tSCL_1();\n\t\twait_cnt = 0;\n\t\twhile ((BQ34Z100_GPIO_SCL->IDR & BQ34Z100_SCL_pin) == 0) {\n\t\t\twait_cnt++;\n\t\t\tif (wait_cnt > 200) {\n\t\t\t\tbq34z100_i2c_stop();\n\t\t\t\treturn (0);\n\t\t\t}\n\t\t}\n\t\tI2CDELAY();\n\t\ttemp = (temp << 1);\n\t\tSCL_0();\n\t\tbits = (bits - 1);\n\t}\n\tI2CDELAY();\n\tSDA_1();\n\tSCL_1();\n\twait_cnt = 0;\n\twhile ((BQ34Z100_GPIO_SCL->IDR & BQ34Z100_SCL_pin) == 0) {\n\t\twait_cnt++;\n\t\tif (wait_cnt > 200) {\n\t\t\tbq34z100_i2c_stop();\n\t\t\treturn (0);\n\t\t}\n\t}\n\tI2CDELAY();\n\tack = (((BQ34Z100_GPIO_SDA->IDR & BQ34Z100_SDA_pin) == 0) ? 0 : 1);\n\tSCL_0();\n\tif (ack)\n\t\treturn (1);\n\telse\n\t\treturn (0);\n}\n\n/**\n * @brief BQ34Z100 I2C接收字节\n * @param u8 ack 是否响应ACK\n * @return u8 data 接收数据\n */\nu8 bq34z100_i2c_rev_byte(u8 ack)\n{\n\tu8 bits, data = 0;\n\n\tSDA_1();\n\tbits = 0x08;\n\twhile (bits > 0) {\n\t\tSCL_1();\n\t\twhile ((BQ34Z100_GPIO_SCL->IDR & BQ34Z100_SCL_pin) == 0)\n\t\t\tI2CDELAY();\n\t\tdata = (data << 1);\n\t\tif (BQ34Z100_GPIO_SDA->IDR & BQ34Z100_SDA_pin)\n\t\t\tdata = (data + 1);\n\t\tSCL_0();\n\t\tI2CDELAY();\n\t\tbits = (bits - 1);\n\t}\n\tif (ack)\n\t\tSDA_0();\n\telse\n\t\tSDA_1();\n\tSCL_1();\n\tI2CDELAY();\n\tSCL_0();\n\tSDA_1();\n\n\treturn (data);\n}\n\n/**\n * @brief BQ34Z100 写入数据块\n * @param u8 SlaveAddress  设备地址\n * @param u16 numBytes 读取字节\n * @param void* rx_data 数据指针\n * @param unsigned char multi 是否多数据帧\n * @return NONE\n */\nvoid bq34z100_i2c_write_block(u8 SlaveAddress,\n                              u16 numBytes, u8 multi,\n                              void* TxData)\n{\n\tu16  i;\n\tu8* temp;\n\n\ttemp = (u8*)TxData;\n\tbq34z100_i2c_start();\n\tbq34z100_i2c_send_byte(SlaveAddress + 0);\n\tfor (i = 0; i < numBytes; i++) {\n\t\tbq34z100_i2c_send_byte(*(temp));\n\t\ttemp++;\n\t}\n\tif (multi == 0) {\n\t\tbq34z100_i2c_stop();\n\t}\n\tI2CDELAY();\n}\n\n/**\n * @brief BQ34Z100 读取数据块\n * @param u8 SlaveAddress  设备地址\n * @param u16 numBytes 读取字节\n * @param void* rx_data 数据指针\n * @return NONE\n */\nvoid bq34z100_i2c_read_block(u8 SlaveAddress,\n                             u16 numBytes, void* rx_data)\n{\n\tu16  i;\n\tu8* temp;\n\n\ttemp = (u8*)rx_data;\n\tbq34z100_i2c_start();\n\tbq34z100_i2c_send_byte(SlaveAddress + 1);\n\tfor (i = 0; i < numBytes; i++) {\n\t\tif (i == (numBytes - 1))\n\t\t\t*(temp) = bq34z100_i2c_rev_byte(BQ34Z100_NACK);\n\t\telse\n\t\t\t*(temp) = bq34z100_i2c_rev_byte(BQ34Z100_ACK);\n\t\ttemp++;\n\t}\n\tbq34z100_i2c_stop();\n}\n\n/**\n * @brief BQ34Z100 i2c初始化\n * @param NONE\n * @return NONE\n */\nvoid bq34z100_i2c_init(void)\n{\n\n\tGPIO_InitTypeDef  GPIO_InitStructure;\n\tGPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\n\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\n\tGPIO_Init(BQ34Z100_GPIO_SDA, &GPIO_InitStructure);\n\n\tGPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\n\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\n\tGPIO_Init(BQ34Z100_GPIO_SCL, &GPIO_InitStructure);\n}\n\n/**\n * @brief BQ34Z100寄存器读取\n * @param u8 port_switch 端口选择 1：电池1,2：电池2\n * @param u16 bytes 读取字节\n * @param void* rx_data 数据指针\n * @return NONE\n */\nvoid bq34z100_read_reg(u8 port_switch, u8 cmd, u16 bytes, void* rx_data)\n{\n\tu8 tx[1];\n\ttx[0] = cmd;\n\n\tif (port_switch == 1) {\n\t\tbq34z100_io_config(BATTERY_1_I2C_SCL_GPIO, BATTERY_1_I2C_SCL_PIN,\n\t\t                   BATTERY_1_I2C_SDA_GPIO, BATTERY_1_I2C_SDA_PIN);\n\t} else if (port_switch == 2) {\n\t\tbq34z100_io_config(BATTERY_2_I2C_SCL_GPIO, BATTERY_2_I2C_SCL_PIN,\n\t\t                   BATTERY_2_I2C_SDA_GPIO, BATTERY_2_I2C_SDA_PIN);\n\t} else {\n\t\treturn;\n\t}\n\tbq34z100_i2c_init();\n\tdelay_nus(200);\n\tbq34z100_i2c_write_block(BQ34Z100_ADDR, 1, 1, tx);\n\tbq34z100_i2c_read_block(BQ34Z100_ADDR, bytes, rx_data);\n}\n\n/**\n * @brief BQ34Z100 状态标识处理\n * @param u8 battery_num 电池号\n * @return NONE\n */\nvoid bq34z100_flag_process(u8 battery_num)\n{\n\n}\n\n/**\n * @brief BQ34Z100信息读取\n * @param u8 battery_num 电池号\n * @return NONE\n */\nvoid BQ34Z100_get_charge_state(u8 battery_num)\n{\n\tu8 tmp[2];\n\tstatic u8 step[2] = {0, 0};\n    \n    battery_t* battery;\n    \n    if (battery_num == 1)\n        battery = &battery_1;\n    else if (battery_num == 2)\n        battery = &battery_2;\n    else \n        return;\n    \n\tswitch (step[battery_num - 1]) {\n\tcase 0:\n\t\t// 温度 K\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_TEMPERATURE_LSB, 2, tmp);\n\t\tbattery->temperature = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"temperature:%d\\n\\n\", (battery->temperature - 2731) / 10);\n\t\tbreak;\n\n\tcase 1:\n\t\t// 电量百分比 0-100%\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_STATE_OF_CHARGE, 1, tmp);\n\t\tbattery->charge_state = tmp[0];\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"Percentage of electricity:%d \\n\\n\", battery->charge_state);\n\t\tbreak;\n\n\tcase 2:\n\t\t// 电池容量 mAh (充满电之后校准)\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_FULL_CHAGRE_CAP_LSB, 2, tmp);\n\t\tbattery->full_charge_cap = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"total capacity:%d mAh \\n\\n\", battery->full_charge_cap);\n\t\tbreak;\n\n\tcase 3:\n\t\t// 剩余电池容量 * 1 mAh\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_REMAIN_CAP_LSB, 2, tmp);\n\t\tbattery->remain_cap = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"remain capacity:%d mAh \\n\\n\", battery->remain_cap);\n\t\tbreak;\n\n\tcase 4:\n\t\t// 电压 mV\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_VOLTAGE_LSB, 2, tmp);\n\t\tbattery->voltage = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"voltage:%d mV \\n\\n\", battery->voltage);\n\t\tbreak;\n\n\tcase 5:\n\t\t// 电流 mA\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_CURRENT_LSB, 2, tmp);\n\t\tbattery->current = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"current:%d mA \\n\\n\", battery->current);\n\t\tbreak;\n\n\tcase 6:\n\t\t// 运行标志\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_FLAGS_LSB, 2, tmp);\n\t\tbattery->flag = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"run flag:%x \\n\\n\", battery->flag);\n\t\tbreak;\n\n\tdefault:\n\n\t\tbreak;\n\t}\n    \n\t(step[battery_num - 1] > 6) ? (step[battery_num - 1] = 0) :\n                                   step[battery_num - 1]++;\n\t\n}\n\n```\n\n# 头文件\n\n```c\n#ifndef _BATTERY_MANAGE_H\n#define _BATTERY_MANAGE_H\n#include \"type.h\"\n#include \"stm32f10x.h\"\n#define BATTERY_1_I2C_SCL_GPIO  GPIOB\n#define BATTERY_1_I2C_SCL_PIN   GPIO_Pin_8\n\n#define BATTERY_1_I2C_SDA_GPIO  GPIOB\n#define BATTERY_1_I2C_SDA_PIN   GPIO_Pin_9\n\n#define BATTERY_2_I2C_SCL_GPIO  GPIOB\n#define BATTERY_2_I2C_SCL_PIN   GPIO_Pin_10\n\n#define BATTERY_2_I2C_SDA_GPIO  GPIOB\n#define BATTERY_2_I2C_SDA_PIN   GPIO_Pin_11\n\n#define BQ34Z100_ADDR 0xAA\n\n#define SDA_1() do{\\\n                    GPIO_InitTypeDef  GPIO_InitStructure;\\\n                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\\\n                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\\n                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\\\n                    GPIO_Init(BQ34Z100_GPIO_SDA, &GPIO_InitStructure);\\\n                 } while (0)\n\n#define SDA_0() do{\\\n                    GPIO_InitTypeDef  GPIO_InitStructure;\\\n                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\\\n                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\\n                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;\\\n                    GPIO_Init(BQ34Z100_GPIO_SDA, &GPIO_InitStructure);\\\n                    GPIO_ResetBits(BQ34Z100_GPIO_SDA, BQ34Z100_SDA_pin);\\\n                 } while (0)\n\n#define SCL_1() do{\\\n                    GPIO_InitTypeDef  GPIO_InitStructure;\\\n                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\\\n                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\\n                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\\\n                    GPIO_Init(BQ34Z100_GPIO_SCL, &GPIO_InitStructure);\\\n                 } while (0)\n\n#define SCL_0() do{\\\n                    GPIO_InitTypeDef  GPIO_InitStructure;\\\n                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\\\n                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\\n                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;\\\n                    GPIO_Init(BQ34Z100_GPIO_SCL, &GPIO_InitStructure);\\\n                    GPIO_ResetBits(BQ34Z100_GPIO_SCL, BQ34Z100_SCL_pin);\\\n                 } while (0)\n\n#define I2CDELAY()  delay_nus(5)\n#define BQ34Z100_NACK 0\n#define BQ34Z100_ACK 1\n\ntypedef struct {\n\tu16 charge_state;\n\tu16 remain_cap;\n\tu16 full_charge_cap;\n\tu16 voltage;\n\tu16 temperature;\n\tu16 current;\n\tu16 flag;\n} battery_t;\n\n#define BQ34Z100_CONTROL_LSB    0x00\n#define BQ34Z100_CONTROL_MSB    0x01\n\n#define BQ34Z100_STATE_OF_CHARGE    0x02\n#define BQ34Z100_MAX_ERROR      0x03\n\n#define BQ34Z100_REMAIN_CAP_LSB 0x04\n#define BQ34Z100_REMAIN_CAP_MSB 0x05\n\n#define BQ34Z100_FULL_CHAGRE_CAP_LSB 0x06\n#define BQ34Z100_FULL_CHAGRE_CAP_MSB 0x07\n\n#define BQ34Z100_VOLTAGE_LSB 0x08\n#define BQ34Z100_VOLTAGE_MSB 0x09\n\n#define BQ34Z100_AVA_CURRENT_LSB 0x0A\n#define BQ34Z100_AVA_CURRENT_MSB 0x0B\n\n#define BQ34Z100_TEMPERATURE_LSB 0x0C\n#define BQ34Z100_TEMPERATURE_MSB 0x0D\n\n#define BQ34Z100_FLAGS_LSB      0x0E\n#define BQ34Z100_FLAGS_MSB      0x0F\n\n#define BQ34Z100_CURRENT_LSB      0x10\n#define BQ34Z100_CURRENT_MSB      0x11\n\n#define BQ34Z100_FLAGSB_LSB      0x12\n#define BQ34Z100_FLAGSB_MSB      0x13\n\n#define LSB_BIT0    0x0001\n#define LSB_BIT1    0x0002\n#define LSB_BIT2    0x0004\n#define LSB_BIT3    0x0008\n#define LSB_BIT4    0x0010\n#define LSB_BIT5    0x0020\n#define LSB_BIT6    0x0040\n#define LSB_BIT7    0x0080\n\n#define MSB_BIT0    0x0100\n#define MSB_BIT1    0x0200\n#define MSB_BIT2    0x0400\n#define MSB_BIT3    0x0800\n#define MSB_BIT4    0x1000\n#define MSB_BIT5    0x2000\n#define MSB_BIT6    0x4000\n#define MSB_BIT7    0x8000\n\n#define FLAG_OTC        MSB_BIT7    // 充电过温\n#define FLAG_OTD        MSB_BIT6\n#define FLAG_BATHI      MSB_BIT5\n#define FLAG_BATLOW     MSB_BIT4\n#define FLAG_CHG_INH    MSB_BIT3\n#define FLAG_XCHG       MSB_BIT2\n#define FLAG_FC         MSB_BIT1\n#define FLAG_CHG        MSB_BIT0\n\n#define FLAG_OCVTAKEN   LSB_BIT7\n#define FLAG_RSVD0      LSB_BIT6\n#define FLAG_RSVD1      LSB_BIT5\n#define FLAG_CF         LSB_BIT4\n#define FLAG_RSVD2      LSB_BIT3\n#define FLAG_SOC1       LSB_BIT2\n#define FLAG_SOCF       LSB_BIT1\n#define FLAG_DSG        LSB_BIT0\n\nvoid BQ34Z100_get_charge_state(u8 battery_num);\nvoid battery_init(void);\n#endif\n\n```","source":"_posts/SMT32_I2C.md","raw":"---\ntitle: STM32模拟I2C读取BQ34Z100 \ndate: 2017-03-14 15:18:21\ntags: STM32\ntoc: true\ncategories:\nthumbnail:\n---\n\n\n总线拉低使用开漏输出、拉高配置为浮动输入以释放总线。同时因为此时为输入模式，ACK的检测可以很方便做到。\n\n# 源文件\n\n```c\n#include <stdio.h>\n#include \"stm32f10x.h\"\n#include \"battery_manage.h\"\n#include \"delay.h\"\nstatic battery_t battery_1;\nstatic battery_t battery_2;\nstatic GPIO_TypeDef* BQ34Z100_GPIO_SCL;\nstatic uint16_t BQ34Z100_SCL_pin;\nstatic GPIO_TypeDef* BQ34Z100_GPIO_SDA;\nstatic uint16_t BQ34Z100_SDA_pin;\n\n/**\n * @brief BQ34Z100 字节转u16\n * @param u8* data 字节指针\n * @return NONE\n */\nstatic inline u16 bytes_to_integer(u8* data)\n{\n\tu16 tmp;\n\n\ttmp = ((data[1] << 8) & 0xFF00);\n\treturn ((u16)(tmp + data[0]) & 0x0000FFFF);\n}\n\n/**\n * @brief BQ34Z100 IO配置\n * @param IO参数\n * @return NONE\n */\nvoid bq34z100_io_config(GPIO_TypeDef* GPIO_SCL, uint16_t SCL_pin,\n                        GPIO_TypeDef* GPIO_SDA, uint16_t SDA_pin)\n{\n\tBQ34Z100_GPIO_SCL = GPIO_SCL;\n\tBQ34Z100_SCL_pin = SCL_pin;\n\tBQ34Z100_GPIO_SDA = GPIO_SDA;\n\tBQ34Z100_SDA_pin = SDA_pin;\n}\n\n/**\n * @brief BQ34Z100 I2C起始信号\n * @param NONE\n * @return NONE\n */\nvoid bq34z100_i2c_start(void)\n{\n\tSDA_1();\n\tI2CDELAY();\n\tSCL_1();\n\tI2CDELAY();\n\tSDA_0();\n\tI2CDELAY();\n\tSCL_0();\n\tI2CDELAY();\n}\n\n/**\n * @brief BQ34Z100 I2C停止信号\n * @param NONE\n * @return NONE\n */\nvoid bq34z100_i2c_stop(void)\n{\n\tSDA_0();\n\tI2CDELAY();\n\tSCL_1();\n\tI2CDELAY();\n\tSDA_1();\n\tI2CDELAY();\n}\n\n/**\n * @brief BQ34Z100 I2C发送字节\n * @param u8 data 发送数据\n * @return ACK\n */\nu8 bq34z100_i2c_send_byte(u8 data)\n{\n\tu8 bits, temp, ack;\n\tu16 wait_cnt;\n\tSCL_0();\n\ttemp = data;\n\tbits = 0x08;\n\twhile (bits != 0x00) {\n\t\tif (temp & 0x80)\n\t\t\tSDA_1();\n\t\telse\n\t\t\tSDA_0();\n\t\tI2CDELAY();\n\t\tSCL_1();\n\t\twait_cnt = 0;\n\t\twhile ((BQ34Z100_GPIO_SCL->IDR & BQ34Z100_SCL_pin) == 0) {\n\t\t\twait_cnt++;\n\t\t\tif (wait_cnt > 200) {\n\t\t\t\tbq34z100_i2c_stop();\n\t\t\t\treturn (0);\n\t\t\t}\n\t\t}\n\t\tI2CDELAY();\n\t\ttemp = (temp << 1);\n\t\tSCL_0();\n\t\tbits = (bits - 1);\n\t}\n\tI2CDELAY();\n\tSDA_1();\n\tSCL_1();\n\twait_cnt = 0;\n\twhile ((BQ34Z100_GPIO_SCL->IDR & BQ34Z100_SCL_pin) == 0) {\n\t\twait_cnt++;\n\t\tif (wait_cnt > 200) {\n\t\t\tbq34z100_i2c_stop();\n\t\t\treturn (0);\n\t\t}\n\t}\n\tI2CDELAY();\n\tack = (((BQ34Z100_GPIO_SDA->IDR & BQ34Z100_SDA_pin) == 0) ? 0 : 1);\n\tSCL_0();\n\tif (ack)\n\t\treturn (1);\n\telse\n\t\treturn (0);\n}\n\n/**\n * @brief BQ34Z100 I2C接收字节\n * @param u8 ack 是否响应ACK\n * @return u8 data 接收数据\n */\nu8 bq34z100_i2c_rev_byte(u8 ack)\n{\n\tu8 bits, data = 0;\n\n\tSDA_1();\n\tbits = 0x08;\n\twhile (bits > 0) {\n\t\tSCL_1();\n\t\twhile ((BQ34Z100_GPIO_SCL->IDR & BQ34Z100_SCL_pin) == 0)\n\t\t\tI2CDELAY();\n\t\tdata = (data << 1);\n\t\tif (BQ34Z100_GPIO_SDA->IDR & BQ34Z100_SDA_pin)\n\t\t\tdata = (data + 1);\n\t\tSCL_0();\n\t\tI2CDELAY();\n\t\tbits = (bits - 1);\n\t}\n\tif (ack)\n\t\tSDA_0();\n\telse\n\t\tSDA_1();\n\tSCL_1();\n\tI2CDELAY();\n\tSCL_0();\n\tSDA_1();\n\n\treturn (data);\n}\n\n/**\n * @brief BQ34Z100 写入数据块\n * @param u8 SlaveAddress  设备地址\n * @param u16 numBytes 读取字节\n * @param void* rx_data 数据指针\n * @param unsigned char multi 是否多数据帧\n * @return NONE\n */\nvoid bq34z100_i2c_write_block(u8 SlaveAddress,\n                              u16 numBytes, u8 multi,\n                              void* TxData)\n{\n\tu16  i;\n\tu8* temp;\n\n\ttemp = (u8*)TxData;\n\tbq34z100_i2c_start();\n\tbq34z100_i2c_send_byte(SlaveAddress + 0);\n\tfor (i = 0; i < numBytes; i++) {\n\t\tbq34z100_i2c_send_byte(*(temp));\n\t\ttemp++;\n\t}\n\tif (multi == 0) {\n\t\tbq34z100_i2c_stop();\n\t}\n\tI2CDELAY();\n}\n\n/**\n * @brief BQ34Z100 读取数据块\n * @param u8 SlaveAddress  设备地址\n * @param u16 numBytes 读取字节\n * @param void* rx_data 数据指针\n * @return NONE\n */\nvoid bq34z100_i2c_read_block(u8 SlaveAddress,\n                             u16 numBytes, void* rx_data)\n{\n\tu16  i;\n\tu8* temp;\n\n\ttemp = (u8*)rx_data;\n\tbq34z100_i2c_start();\n\tbq34z100_i2c_send_byte(SlaveAddress + 1);\n\tfor (i = 0; i < numBytes; i++) {\n\t\tif (i == (numBytes - 1))\n\t\t\t*(temp) = bq34z100_i2c_rev_byte(BQ34Z100_NACK);\n\t\telse\n\t\t\t*(temp) = bq34z100_i2c_rev_byte(BQ34Z100_ACK);\n\t\ttemp++;\n\t}\n\tbq34z100_i2c_stop();\n}\n\n/**\n * @brief BQ34Z100 i2c初始化\n * @param NONE\n * @return NONE\n */\nvoid bq34z100_i2c_init(void)\n{\n\n\tGPIO_InitTypeDef  GPIO_InitStructure;\n\tGPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\n\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\n\tGPIO_Init(BQ34Z100_GPIO_SDA, &GPIO_InitStructure);\n\n\tGPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\n\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\n\tGPIO_Init(BQ34Z100_GPIO_SCL, &GPIO_InitStructure);\n}\n\n/**\n * @brief BQ34Z100寄存器读取\n * @param u8 port_switch 端口选择 1：电池1,2：电池2\n * @param u16 bytes 读取字节\n * @param void* rx_data 数据指针\n * @return NONE\n */\nvoid bq34z100_read_reg(u8 port_switch, u8 cmd, u16 bytes, void* rx_data)\n{\n\tu8 tx[1];\n\ttx[0] = cmd;\n\n\tif (port_switch == 1) {\n\t\tbq34z100_io_config(BATTERY_1_I2C_SCL_GPIO, BATTERY_1_I2C_SCL_PIN,\n\t\t                   BATTERY_1_I2C_SDA_GPIO, BATTERY_1_I2C_SDA_PIN);\n\t} else if (port_switch == 2) {\n\t\tbq34z100_io_config(BATTERY_2_I2C_SCL_GPIO, BATTERY_2_I2C_SCL_PIN,\n\t\t                   BATTERY_2_I2C_SDA_GPIO, BATTERY_2_I2C_SDA_PIN);\n\t} else {\n\t\treturn;\n\t}\n\tbq34z100_i2c_init();\n\tdelay_nus(200);\n\tbq34z100_i2c_write_block(BQ34Z100_ADDR, 1, 1, tx);\n\tbq34z100_i2c_read_block(BQ34Z100_ADDR, bytes, rx_data);\n}\n\n/**\n * @brief BQ34Z100 状态标识处理\n * @param u8 battery_num 电池号\n * @return NONE\n */\nvoid bq34z100_flag_process(u8 battery_num)\n{\n\n}\n\n/**\n * @brief BQ34Z100信息读取\n * @param u8 battery_num 电池号\n * @return NONE\n */\nvoid BQ34Z100_get_charge_state(u8 battery_num)\n{\n\tu8 tmp[2];\n\tstatic u8 step[2] = {0, 0};\n    \n    battery_t* battery;\n    \n    if (battery_num == 1)\n        battery = &battery_1;\n    else if (battery_num == 2)\n        battery = &battery_2;\n    else \n        return;\n    \n\tswitch (step[battery_num - 1]) {\n\tcase 0:\n\t\t// 温度 K\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_TEMPERATURE_LSB, 2, tmp);\n\t\tbattery->temperature = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"temperature:%d\\n\\n\", (battery->temperature - 2731) / 10);\n\t\tbreak;\n\n\tcase 1:\n\t\t// 电量百分比 0-100%\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_STATE_OF_CHARGE, 1, tmp);\n\t\tbattery->charge_state = tmp[0];\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"Percentage of electricity:%d \\n\\n\", battery->charge_state);\n\t\tbreak;\n\n\tcase 2:\n\t\t// 电池容量 mAh (充满电之后校准)\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_FULL_CHAGRE_CAP_LSB, 2, tmp);\n\t\tbattery->full_charge_cap = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"total capacity:%d mAh \\n\\n\", battery->full_charge_cap);\n\t\tbreak;\n\n\tcase 3:\n\t\t// 剩余电池容量 * 1 mAh\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_REMAIN_CAP_LSB, 2, tmp);\n\t\tbattery->remain_cap = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"remain capacity:%d mAh \\n\\n\", battery->remain_cap);\n\t\tbreak;\n\n\tcase 4:\n\t\t// 电压 mV\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_VOLTAGE_LSB, 2, tmp);\n\t\tbattery->voltage = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"voltage:%d mV \\n\\n\", battery->voltage);\n\t\tbreak;\n\n\tcase 5:\n\t\t// 电流 mA\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_CURRENT_LSB, 2, tmp);\n\t\tbattery->current = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"current:%d mA \\n\\n\", battery->current);\n\t\tbreak;\n\n\tcase 6:\n\t\t// 运行标志\n\t\tbq34z100_read_reg(battery_num, BQ34Z100_FLAGS_LSB, 2, tmp);\n\t\tbattery->flag = bytes_to_integer(tmp);\n\t\tprintf(\"[%d] \", battery_num);\n\t\tprintf(\"run flag:%x \\n\\n\", battery->flag);\n\t\tbreak;\n\n\tdefault:\n\n\t\tbreak;\n\t}\n    \n\t(step[battery_num - 1] > 6) ? (step[battery_num - 1] = 0) :\n                                   step[battery_num - 1]++;\n\t\n}\n\n```\n\n# 头文件\n\n```c\n#ifndef _BATTERY_MANAGE_H\n#define _BATTERY_MANAGE_H\n#include \"type.h\"\n#include \"stm32f10x.h\"\n#define BATTERY_1_I2C_SCL_GPIO  GPIOB\n#define BATTERY_1_I2C_SCL_PIN   GPIO_Pin_8\n\n#define BATTERY_1_I2C_SDA_GPIO  GPIOB\n#define BATTERY_1_I2C_SDA_PIN   GPIO_Pin_9\n\n#define BATTERY_2_I2C_SCL_GPIO  GPIOB\n#define BATTERY_2_I2C_SCL_PIN   GPIO_Pin_10\n\n#define BATTERY_2_I2C_SDA_GPIO  GPIOB\n#define BATTERY_2_I2C_SDA_PIN   GPIO_Pin_11\n\n#define BQ34Z100_ADDR 0xAA\n\n#define SDA_1() do{\\\n                    GPIO_InitTypeDef  GPIO_InitStructure;\\\n                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\\\n                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\\n                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\\\n                    GPIO_Init(BQ34Z100_GPIO_SDA, &GPIO_InitStructure);\\\n                 } while (0)\n\n#define SDA_0() do{\\\n                    GPIO_InitTypeDef  GPIO_InitStructure;\\\n                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\\\n                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\\n                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;\\\n                    GPIO_Init(BQ34Z100_GPIO_SDA, &GPIO_InitStructure);\\\n                    GPIO_ResetBits(BQ34Z100_GPIO_SDA, BQ34Z100_SDA_pin);\\\n                 } while (0)\n\n#define SCL_1() do{\\\n                    GPIO_InitTypeDef  GPIO_InitStructure;\\\n                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\\\n                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\\n                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\\\n                    GPIO_Init(BQ34Z100_GPIO_SCL, &GPIO_InitStructure);\\\n                 } while (0)\n\n#define SCL_0() do{\\\n                    GPIO_InitTypeDef  GPIO_InitStructure;\\\n                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\\\n                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\\n                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;\\\n                    GPIO_Init(BQ34Z100_GPIO_SCL, &GPIO_InitStructure);\\\n                    GPIO_ResetBits(BQ34Z100_GPIO_SCL, BQ34Z100_SCL_pin);\\\n                 } while (0)\n\n#define I2CDELAY()  delay_nus(5)\n#define BQ34Z100_NACK 0\n#define BQ34Z100_ACK 1\n\ntypedef struct {\n\tu16 charge_state;\n\tu16 remain_cap;\n\tu16 full_charge_cap;\n\tu16 voltage;\n\tu16 temperature;\n\tu16 current;\n\tu16 flag;\n} battery_t;\n\n#define BQ34Z100_CONTROL_LSB    0x00\n#define BQ34Z100_CONTROL_MSB    0x01\n\n#define BQ34Z100_STATE_OF_CHARGE    0x02\n#define BQ34Z100_MAX_ERROR      0x03\n\n#define BQ34Z100_REMAIN_CAP_LSB 0x04\n#define BQ34Z100_REMAIN_CAP_MSB 0x05\n\n#define BQ34Z100_FULL_CHAGRE_CAP_LSB 0x06\n#define BQ34Z100_FULL_CHAGRE_CAP_MSB 0x07\n\n#define BQ34Z100_VOLTAGE_LSB 0x08\n#define BQ34Z100_VOLTAGE_MSB 0x09\n\n#define BQ34Z100_AVA_CURRENT_LSB 0x0A\n#define BQ34Z100_AVA_CURRENT_MSB 0x0B\n\n#define BQ34Z100_TEMPERATURE_LSB 0x0C\n#define BQ34Z100_TEMPERATURE_MSB 0x0D\n\n#define BQ34Z100_FLAGS_LSB      0x0E\n#define BQ34Z100_FLAGS_MSB      0x0F\n\n#define BQ34Z100_CURRENT_LSB      0x10\n#define BQ34Z100_CURRENT_MSB      0x11\n\n#define BQ34Z100_FLAGSB_LSB      0x12\n#define BQ34Z100_FLAGSB_MSB      0x13\n\n#define LSB_BIT0    0x0001\n#define LSB_BIT1    0x0002\n#define LSB_BIT2    0x0004\n#define LSB_BIT3    0x0008\n#define LSB_BIT4    0x0010\n#define LSB_BIT5    0x0020\n#define LSB_BIT6    0x0040\n#define LSB_BIT7    0x0080\n\n#define MSB_BIT0    0x0100\n#define MSB_BIT1    0x0200\n#define MSB_BIT2    0x0400\n#define MSB_BIT3    0x0800\n#define MSB_BIT4    0x1000\n#define MSB_BIT5    0x2000\n#define MSB_BIT6    0x4000\n#define MSB_BIT7    0x8000\n\n#define FLAG_OTC        MSB_BIT7    // 充电过温\n#define FLAG_OTD        MSB_BIT6\n#define FLAG_BATHI      MSB_BIT5\n#define FLAG_BATLOW     MSB_BIT4\n#define FLAG_CHG_INH    MSB_BIT3\n#define FLAG_XCHG       MSB_BIT2\n#define FLAG_FC         MSB_BIT1\n#define FLAG_CHG        MSB_BIT0\n\n#define FLAG_OCVTAKEN   LSB_BIT7\n#define FLAG_RSVD0      LSB_BIT6\n#define FLAG_RSVD1      LSB_BIT5\n#define FLAG_CF         LSB_BIT4\n#define FLAG_RSVD2      LSB_BIT3\n#define FLAG_SOC1       LSB_BIT2\n#define FLAG_SOCF       LSB_BIT1\n#define FLAG_DSG        LSB_BIT0\n\nvoid BQ34Z100_get_charge_state(u8 battery_num);\nvoid battery_init(void);\n#endif\n\n```","slug":"SMT32_I2C","published":1,"updated":"2017-03-14T08:00:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9anw000q70g5p0f2xilg","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>总线拉低使用开漏输出、拉高配置为浮动输入以释放总线。同时因为此时为输入模式，ACK的检测可以很方便做到。</p>\n<h1 id=\"源文件\"><a href=\"#源文件\" class=\"headerlink\" title=\"源文件\"></a>源文件</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stm32f10x.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"battery_manage.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"delay.h\"</span></span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">battery_t</span> battery_1;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">battery_t</span> battery_2;</div><div class=\"line\"><span class=\"keyword\">static</span> GPIO_TypeDef* BQ34Z100_GPIO_SCL;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">uint16_t</span> BQ34Z100_SCL_pin;</div><div class=\"line\"><span class=\"keyword\">static</span> GPIO_TypeDef* BQ34Z100_GPIO_SDA;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">uint16_t</span> BQ34Z100_SDA_pin;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 字节转u16</div><div class=\"line\"> * @param u8* data 字节指针</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> u16 <span class=\"title\">bytes_to_integer</span><span class=\"params\">(u8* data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tu16 tmp;</div><div class=\"line\"></div><div class=\"line\">\ttmp = ((data[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xFF00</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> ((u16)(tmp + data[<span class=\"number\">0</span>]) &amp; <span class=\"number\">0x0000FFFF</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 IO配置</div><div class=\"line\"> * @param IO参数</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_io_config</span><span class=\"params\">(GPIO_TypeDef* GPIO_SCL, <span class=\"keyword\">uint16_t</span> SCL_pin,</span></span></div><div class=\"line\">                        GPIO_TypeDef* GPIO_SDA, <span class=\"keyword\">uint16_t</span> SDA_pin)</div><div class=\"line\">&#123;</div><div class=\"line\">\tBQ34Z100_GPIO_SCL = GPIO_SCL;</div><div class=\"line\">\tBQ34Z100_SCL_pin = SCL_pin;</div><div class=\"line\">\tBQ34Z100_GPIO_SDA = GPIO_SDA;</div><div class=\"line\">\tBQ34Z100_SDA_pin = SDA_pin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 I2C起始信号</div><div class=\"line\"> * @param NONE</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_start</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tSDA_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSCL_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSDA_0();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSCL_0();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 I2C停止信号</div><div class=\"line\"> * @param NONE</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_stop</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tSDA_0();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSCL_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSDA_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 I2C发送字节</div><div class=\"line\"> * @param u8 data 发送数据</div><div class=\"line\"> * @return ACK</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">u8 <span class=\"title\">bq34z100_i2c_send_byte</span><span class=\"params\">(u8 data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tu8 bits, temp, ack;</div><div class=\"line\">\tu16 wait_cnt;</div><div class=\"line\">\tSCL_0();</div><div class=\"line\">\ttemp = data;</div><div class=\"line\">\tbits = <span class=\"number\">0x08</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (bits != <span class=\"number\">0x00</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (temp &amp; <span class=\"number\">0x80</span>)</div><div class=\"line\">\t\t\tSDA_1();</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSDA_0();</div><div class=\"line\">\t\tI2CDELAY();</div><div class=\"line\">\t\tSCL_1();</div><div class=\"line\">\t\twait_cnt = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((BQ34Z100_GPIO_SCL-&gt;IDR &amp; BQ34Z100_SCL_pin) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\twait_cnt++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (wait_cnt &gt; <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\t\tbq34z100_i2c_stop();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> (<span class=\"number\">0</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tI2CDELAY();</div><div class=\"line\">\t\ttemp = (temp &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">\t\tSCL_0();</div><div class=\"line\">\t\tbits = (bits - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSDA_1();</div><div class=\"line\">\tSCL_1();</div><div class=\"line\">\twait_cnt = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> ((BQ34Z100_GPIO_SCL-&gt;IDR &amp; BQ34Z100_SCL_pin) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\twait_cnt++;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (wait_cnt &gt; <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\tbq34z100_i2c_stop();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> (<span class=\"number\">0</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tack = (((BQ34Z100_GPIO_SDA-&gt;IDR &amp; BQ34Z100_SDA_pin) == <span class=\"number\">0</span>) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</div><div class=\"line\">\tSCL_0();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ack)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 I2C接收字节</div><div class=\"line\"> * @param u8 ack 是否响应ACK</div><div class=\"line\"> * @return u8 data 接收数据</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">u8 <span class=\"title\">bq34z100_i2c_rev_byte</span><span class=\"params\">(u8 ack)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tu8 bits, data = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\tSDA_1();</div><div class=\"line\">\tbits = <span class=\"number\">0x08</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (bits &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tSCL_1();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((BQ34Z100_GPIO_SCL-&gt;IDR &amp; BQ34Z100_SCL_pin) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tI2CDELAY();</div><div class=\"line\">\t\tdata = (data &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (BQ34Z100_GPIO_SDA-&gt;IDR &amp; BQ34Z100_SDA_pin)</div><div class=\"line\">\t\t\tdata = (data + <span class=\"number\">1</span>);</div><div class=\"line\">\t\tSCL_0();</div><div class=\"line\">\t\tI2CDELAY();</div><div class=\"line\">\t\tbits = (bits - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ack)</div><div class=\"line\">\t\tSDA_0();</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tSDA_1();</div><div class=\"line\">\tSCL_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSCL_0();</div><div class=\"line\">\tSDA_1();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> (data);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 写入数据块</div><div class=\"line\"> * @param u8 SlaveAddress  设备地址</div><div class=\"line\"> * @param u16 numBytes 读取字节</div><div class=\"line\"> * @param void* rx_data 数据指针</div><div class=\"line\"> * @param unsigned char multi 是否多数据帧</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_write_block</span><span class=\"params\">(u8 SlaveAddress,</span></span></div><div class=\"line\">                              u16 numBytes, u8 multi,</div><div class=\"line\">                              <span class=\"keyword\">void</span>* TxData)</div><div class=\"line\">&#123;</div><div class=\"line\">\tu16  i;</div><div class=\"line\">\tu8* temp;</div><div class=\"line\"></div><div class=\"line\">\ttemp = (u8*)TxData;</div><div class=\"line\">\tbq34z100_i2c_start();</div><div class=\"line\">\tbq34z100_i2c_send_byte(SlaveAddress + <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; numBytes; i++) &#123;</div><div class=\"line\">\t\tbq34z100_i2c_send_byte(*(temp));</div><div class=\"line\">\t\ttemp++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (multi == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tbq34z100_i2c_stop();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 读取数据块</div><div class=\"line\"> * @param u8 SlaveAddress  设备地址</div><div class=\"line\"> * @param u16 numBytes 读取字节</div><div class=\"line\"> * @param void* rx_data 数据指针</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_read_block</span><span class=\"params\">(u8 SlaveAddress,</span></span></div><div class=\"line\">                             u16 numBytes, <span class=\"keyword\">void</span>* rx_data)</div><div class=\"line\">&#123;</div><div class=\"line\">\tu16  i;</div><div class=\"line\">\tu8* temp;</div><div class=\"line\"></div><div class=\"line\">\ttemp = (u8*)rx_data;</div><div class=\"line\">\tbq34z100_i2c_start();</div><div class=\"line\">\tbq34z100_i2c_send_byte(SlaveAddress + <span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; numBytes; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i == (numBytes - <span class=\"number\">1</span>))</div><div class=\"line\">\t\t\t*(temp) = bq34z100_i2c_rev_byte(BQ34Z100_NACK);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t*(temp) = bq34z100_i2c_rev_byte(BQ34Z100_ACK);</div><div class=\"line\">\t\ttemp++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tbq34z100_i2c_stop();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 i2c初始化</div><div class=\"line\"> * @param NONE</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\tGPIO_InitTypeDef  GPIO_InitStructure;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</div><div class=\"line\">\tGPIO_Init(BQ34Z100_GPIO_SDA, &amp;GPIO_InitStructure);</div><div class=\"line\"></div><div class=\"line\">\tGPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</div><div class=\"line\">\tGPIO_Init(BQ34Z100_GPIO_SCL, &amp;GPIO_InitStructure);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100寄存器读取</div><div class=\"line\"> * @param u8 port_switch 端口选择 1：电池1,2：电池2</div><div class=\"line\"> * @param u16 bytes 读取字节</div><div class=\"line\"> * @param void* rx_data 数据指针</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_read_reg</span><span class=\"params\">(u8 port_switch, u8 cmd, u16 bytes, <span class=\"keyword\">void</span>* rx_data)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tu8 tx[<span class=\"number\">1</span>];</div><div class=\"line\">\ttx[<span class=\"number\">0</span>] = cmd;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (port_switch == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\tbq34z100_io_config(BATTERY_1_I2C_SCL_GPIO, BATTERY_1_I2C_SCL_PIN,</div><div class=\"line\">\t\t                   BATTERY_1_I2C_SDA_GPIO, BATTERY_1_I2C_SDA_PIN);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (port_switch == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\tbq34z100_io_config(BATTERY_2_I2C_SCL_GPIO, BATTERY_2_I2C_SCL_PIN,</div><div class=\"line\">\t\t                   BATTERY_2_I2C_SDA_GPIO, BATTERY_2_I2C_SDA_PIN);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tbq34z100_i2c_init();</div><div class=\"line\">\tdelay_nus(<span class=\"number\">200</span>);</div><div class=\"line\">\tbq34z100_i2c_write_block(BQ34Z100_ADDR, <span class=\"number\">1</span>, <span class=\"number\">1</span>, tx);</div><div class=\"line\">\tbq34z100_i2c_read_block(BQ34Z100_ADDR, bytes, rx_data);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100 状态标识处理</div><div class=\"line\"> * @param u8 battery_num 电池号</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_flag_process</span><span class=\"params\">(u8 battery_num)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @brief BQ34Z100信息读取</div><div class=\"line\"> * @param u8 battery_num 电池号</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BQ34Z100_get_charge_state</span><span class=\"params\">(u8 battery_num)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tu8 tmp[<span class=\"number\">2</span>];</div><div class=\"line\">\t<span class=\"keyword\">static</span> u8 step[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">battery_t</span>* battery;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (battery_num == <span class=\"number\">1</span>)</div><div class=\"line\">        battery = &amp;battery_1;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (battery_num == <span class=\"number\">2</span>)</div><div class=\"line\">        battery = &amp;battery_2;</div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">switch</span> (step[battery_num - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 温度 K</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_TEMPERATURE_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;temperature = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"temperature:%d\\n\\n\"</span>, (battery-&gt;temperature - <span class=\"number\">2731</span>) / <span class=\"number\">10</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 电量百分比 0-100%</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_STATE_OF_CHARGE, <span class=\"number\">1</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;charge_state = tmp[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Percentage of electricity:%d \\n\\n\"</span>, battery-&gt;charge_state);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 电池容量 mAh (充满电之后校准)</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_FULL_CHAGRE_CAP_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;full_charge_cap = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"total capacity:%d mAh \\n\\n\"</span>, battery-&gt;full_charge_cap);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 剩余电池容量 * 1 mAh</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_REMAIN_CAP_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;remain_cap = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"remain capacity:%d mAh \\n\\n\"</span>, battery-&gt;remain_cap);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 电压 mV</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_VOLTAGE_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;voltage = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"voltage:%d mV \\n\\n\"</span>, battery-&gt;voltage);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 电流 mA</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_CURRENT_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;current = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"current:%d mA \\n\\n\"</span>, battery-&gt;current);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 运行标志</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_FLAGS_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;flag = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"run flag:%x \\n\\n\"</span>, battery-&gt;flag);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">default</span>:</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">    </div><div class=\"line\">\t(step[battery_num - <span class=\"number\">1</span>] &gt; <span class=\"number\">6</span>) ? (step[battery_num - <span class=\"number\">1</span>] = <span class=\"number\">0</span>) :</div><div class=\"line\">                                   step[battery_num - <span class=\"number\">1</span>]++;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _BATTERY_MANAGE_H</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _BATTERY_MANAGE_H</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"type.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stm32f10x.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_1_I2C_SCL_GPIO  GPIOB</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_1_I2C_SCL_PIN   GPIO_Pin_8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_1_I2C_SDA_GPIO  GPIOB</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_1_I2C_SDA_PIN   GPIO_Pin_9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_2_I2C_SCL_GPIO  GPIOB</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_2_I2C_SCL_PIN   GPIO_Pin_10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_2_I2C_SDA_GPIO  GPIOB</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_2_I2C_SDA_PIN   GPIO_Pin_11</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_ADDR 0xAA</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDA_1() do&#123;\\</span></div><div class=\"line\">                    GPIO_InitTypeDef  GPIO_InitStructure;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\\</div><div class=\"line\">                    GPIO_Init(BQ34Z100_GPIO_SDA, &amp;GPIO_InitStructure);\\</div><div class=\"line\">                 &#125; while (0)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDA_0() do&#123;\\</span></div><div class=\"line\">                    GPIO_InitTypeDef  GPIO_InitStructure;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;\\</div><div class=\"line\">                    GPIO_Init(BQ34Z100_GPIO_SDA, &amp;GPIO_InitStructure);\\</div><div class=\"line\">                    GPIO_ResetBits(BQ34Z100_GPIO_SDA, BQ34Z100_SDA_pin);\\</div><div class=\"line\">                 &#125; while (0)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SCL_1() do&#123;\\</span></div><div class=\"line\">                    GPIO_InitTypeDef  GPIO_InitStructure;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\\</div><div class=\"line\">                    GPIO_Init(BQ34Z100_GPIO_SCL, &amp;GPIO_InitStructure);\\</div><div class=\"line\">                 &#125; while (0)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SCL_0() do&#123;\\</span></div><div class=\"line\">                    GPIO_InitTypeDef  GPIO_InitStructure;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;\\</div><div class=\"line\">                    GPIO_Init(BQ34Z100_GPIO_SCL, &amp;GPIO_InitStructure);\\</div><div class=\"line\">                    GPIO_ResetBits(BQ34Z100_GPIO_SCL, BQ34Z100_SCL_pin);\\</div><div class=\"line\">                 &#125; while (0)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> I2CDELAY()  delay_nus(5)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_NACK 0</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_ACK 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tu16 charge_state;</div><div class=\"line\">\tu16 remain_cap;</div><div class=\"line\">\tu16 full_charge_cap;</div><div class=\"line\">\tu16 voltage;</div><div class=\"line\">\tu16 temperature;</div><div class=\"line\">\tu16 current;</div><div class=\"line\">\tu16 flag;</div><div class=\"line\">&#125; <span class=\"keyword\">battery_t</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_CONTROL_LSB    0x00</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_CONTROL_MSB    0x01</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_STATE_OF_CHARGE    0x02</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_MAX_ERROR      0x03</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_REMAIN_CAP_LSB 0x04</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_REMAIN_CAP_MSB 0x05</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FULL_CHAGRE_CAP_LSB 0x06</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FULL_CHAGRE_CAP_MSB 0x07</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_VOLTAGE_LSB 0x08</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_VOLTAGE_MSB 0x09</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_AVA_CURRENT_LSB 0x0A</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_AVA_CURRENT_MSB 0x0B</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_TEMPERATURE_LSB 0x0C</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_TEMPERATURE_MSB 0x0D</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FLAGS_LSB      0x0E</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FLAGS_MSB      0x0F</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_CURRENT_LSB      0x10</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_CURRENT_MSB      0x11</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FLAGSB_LSB      0x12</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FLAGSB_MSB      0x13</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT0    0x0001</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT1    0x0002</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT2    0x0004</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT3    0x0008</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT4    0x0010</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT5    0x0020</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT6    0x0040</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT7    0x0080</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT0    0x0100</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT1    0x0200</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT2    0x0400</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT3    0x0800</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT4    0x1000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT5    0x2000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT6    0x4000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT7    0x8000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_OTC        MSB_BIT7    <span class=\"comment\">// 充电过温</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_OTD        MSB_BIT6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_BATHI      MSB_BIT5</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_BATLOW     MSB_BIT4</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_CHG_INH    MSB_BIT3</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_XCHG       MSB_BIT2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_FC         MSB_BIT1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_CHG        MSB_BIT0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_OCVTAKEN   LSB_BIT7</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_RSVD0      LSB_BIT6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_RSVD1      LSB_BIT5</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_CF         LSB_BIT4</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_RSVD2      LSB_BIT3</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_SOC1       LSB_BIT2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_SOCF       LSB_BIT1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_DSG        LSB_BIT0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BQ34Z100_get_charge_state</span><span class=\"params\">(u8 battery_num)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">battery_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>总线拉低使用开漏输出、拉高配置为浮动输入以释放总线。同时因为此时为输入模式，ACK的检测可以很方便做到。</p>\n<h1 id=\"源文件\"><a href=\"#源文件\" class=\"headerlink\" title=\"源文件\"></a>源文件</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stm32f10x.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"battery_manage.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"delay.h\"</span></span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">battery_t</span> battery_1;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">battery_t</span> battery_2;</div><div class=\"line\"><span class=\"keyword\">static</span> GPIO_TypeDef* BQ34Z100_GPIO_SCL;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">uint16_t</span> BQ34Z100_SCL_pin;</div><div class=\"line\"><span class=\"keyword\">static</span> GPIO_TypeDef* BQ34Z100_GPIO_SDA;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">uint16_t</span> BQ34Z100_SDA_pin;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 字节转u16</div><div class=\"line\"> * @param u8* data 字节指针</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> u16 <span class=\"title\">bytes_to_integer</span><span class=\"params\">(u8* data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tu16 tmp;</div><div class=\"line\"></div><div class=\"line\">\ttmp = ((data[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xFF00</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> ((u16)(tmp + data[<span class=\"number\">0</span>]) &amp; <span class=\"number\">0x0000FFFF</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 IO配置</div><div class=\"line\"> * @param IO参数</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_io_config</span><span class=\"params\">(GPIO_TypeDef* GPIO_SCL, <span class=\"keyword\">uint16_t</span> SCL_pin,</div><div class=\"line\">                        GPIO_TypeDef* GPIO_SDA, <span class=\"keyword\">uint16_t</span> SDA_pin)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tBQ34Z100_GPIO_SCL = GPIO_SCL;</div><div class=\"line\">\tBQ34Z100_SCL_pin = SCL_pin;</div><div class=\"line\">\tBQ34Z100_GPIO_SDA = GPIO_SDA;</div><div class=\"line\">\tBQ34Z100_SDA_pin = SDA_pin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 I2C起始信号</div><div class=\"line\"> * @param NONE</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_start</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tSDA_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSCL_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSDA_0();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSCL_0();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 I2C停止信号</div><div class=\"line\"> * @param NONE</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_stop</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tSDA_0();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSCL_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSDA_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 I2C发送字节</div><div class=\"line\"> * @param u8 data 发送数据</div><div class=\"line\"> * @return ACK</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\">u8 <span class=\"title\">bq34z100_i2c_send_byte</span><span class=\"params\">(u8 data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tu8 bits, temp, ack;</div><div class=\"line\">\tu16 wait_cnt;</div><div class=\"line\">\tSCL_0();</div><div class=\"line\">\ttemp = data;</div><div class=\"line\">\tbits = <span class=\"number\">0x08</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (bits != <span class=\"number\">0x00</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (temp &amp; <span class=\"number\">0x80</span>)</div><div class=\"line\">\t\t\tSDA_1();</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\tSDA_0();</div><div class=\"line\">\t\tI2CDELAY();</div><div class=\"line\">\t\tSCL_1();</div><div class=\"line\">\t\twait_cnt = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((BQ34Z100_GPIO_SCL-&gt;IDR &amp; BQ34Z100_SCL_pin) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\twait_cnt++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (wait_cnt &gt; <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\t\tbq34z100_i2c_stop();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> (<span class=\"number\">0</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tI2CDELAY();</div><div class=\"line\">\t\ttemp = (temp &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">\t\tSCL_0();</div><div class=\"line\">\t\tbits = (bits - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSDA_1();</div><div class=\"line\">\tSCL_1();</div><div class=\"line\">\twait_cnt = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> ((BQ34Z100_GPIO_SCL-&gt;IDR &amp; BQ34Z100_SCL_pin) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\twait_cnt++;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (wait_cnt &gt; <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\tbq34z100_i2c_stop();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> (<span class=\"number\">0</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tack = (((BQ34Z100_GPIO_SDA-&gt;IDR &amp; BQ34Z100_SDA_pin) == <span class=\"number\">0</span>) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</div><div class=\"line\">\tSCL_0();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ack)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 I2C接收字节</div><div class=\"line\"> * @param u8 ack 是否响应ACK</div><div class=\"line\"> * @return u8 data 接收数据</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\">u8 <span class=\"title\">bq34z100_i2c_rev_byte</span><span class=\"params\">(u8 ack)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tu8 bits, data = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\tSDA_1();</div><div class=\"line\">\tbits = <span class=\"number\">0x08</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (bits &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tSCL_1();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((BQ34Z100_GPIO_SCL-&gt;IDR &amp; BQ34Z100_SCL_pin) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\tI2CDELAY();</div><div class=\"line\">\t\tdata = (data &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (BQ34Z100_GPIO_SDA-&gt;IDR &amp; BQ34Z100_SDA_pin)</div><div class=\"line\">\t\t\tdata = (data + <span class=\"number\">1</span>);</div><div class=\"line\">\t\tSCL_0();</div><div class=\"line\">\t\tI2CDELAY();</div><div class=\"line\">\t\tbits = (bits - <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ack)</div><div class=\"line\">\t\tSDA_0();</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tSDA_1();</div><div class=\"line\">\tSCL_1();</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">\tSCL_0();</div><div class=\"line\">\tSDA_1();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> (data);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 写入数据块</div><div class=\"line\"> * @param u8 SlaveAddress  设备地址</div><div class=\"line\"> * @param u16 numBytes 读取字节</div><div class=\"line\"> * @param void* rx_data 数据指针</div><div class=\"line\"> * @param unsigned char multi 是否多数据帧</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_write_block</span><span class=\"params\">(u8 SlaveAddress,</div><div class=\"line\">                              u16 numBytes, u8 multi,</div><div class=\"line\">                              <span class=\"keyword\">void</span>* TxData)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tu16  i;</div><div class=\"line\">\tu8* temp;</div><div class=\"line\"></div><div class=\"line\">\ttemp = (u8*)TxData;</div><div class=\"line\">\tbq34z100_i2c_start();</div><div class=\"line\">\tbq34z100_i2c_send_byte(SlaveAddress + <span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; numBytes; i++) &#123;</div><div class=\"line\">\t\tbq34z100_i2c_send_byte(*(temp));</div><div class=\"line\">\t\ttemp++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (multi == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tbq34z100_i2c_stop();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tI2CDELAY();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 读取数据块</div><div class=\"line\"> * @param u8 SlaveAddress  设备地址</div><div class=\"line\"> * @param u16 numBytes 读取字节</div><div class=\"line\"> * @param void* rx_data 数据指针</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_read_block</span><span class=\"params\">(u8 SlaveAddress,</div><div class=\"line\">                             u16 numBytes, <span class=\"keyword\">void</span>* rx_data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tu16  i;</div><div class=\"line\">\tu8* temp;</div><div class=\"line\"></div><div class=\"line\">\ttemp = (u8*)rx_data;</div><div class=\"line\">\tbq34z100_i2c_start();</div><div class=\"line\">\tbq34z100_i2c_send_byte(SlaveAddress + <span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; numBytes; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i == (numBytes - <span class=\"number\">1</span>))</div><div class=\"line\">\t\t\t*(temp) = bq34z100_i2c_rev_byte(BQ34Z100_NACK);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t*(temp) = bq34z100_i2c_rev_byte(BQ34Z100_ACK);</div><div class=\"line\">\t\ttemp++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tbq34z100_i2c_stop();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 i2c初始化</div><div class=\"line\"> * @param NONE</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_i2c_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tGPIO_InitTypeDef  GPIO_InitStructure;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</div><div class=\"line\">\tGPIO_Init(BQ34Z100_GPIO_SDA, &amp;GPIO_InitStructure);</div><div class=\"line\"></div><div class=\"line\">\tGPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</div><div class=\"line\">\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</div><div class=\"line\">\tGPIO_Init(BQ34Z100_GPIO_SCL, &amp;GPIO_InitStructure);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100寄存器读取</div><div class=\"line\"> * @param u8 port_switch 端口选择 1：电池1,2：电池2</div><div class=\"line\"> * @param u16 bytes 读取字节</div><div class=\"line\"> * @param void* rx_data 数据指针</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_read_reg</span><span class=\"params\">(u8 port_switch, u8 cmd, u16 bytes, <span class=\"keyword\">void</span>* rx_data)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tu8 tx[<span class=\"number\">1</span>];</div><div class=\"line\">\ttx[<span class=\"number\">0</span>] = cmd;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (port_switch == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\tbq34z100_io_config(BATTERY_1_I2C_SCL_GPIO, BATTERY_1_I2C_SCL_PIN,</div><div class=\"line\">\t\t                   BATTERY_1_I2C_SDA_GPIO, BATTERY_1_I2C_SDA_PIN);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (port_switch == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\tbq34z100_io_config(BATTERY_2_I2C_SCL_GPIO, BATTERY_2_I2C_SCL_PIN,</div><div class=\"line\">\t\t                   BATTERY_2_I2C_SDA_GPIO, BATTERY_2_I2C_SDA_PIN);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tbq34z100_i2c_init();</div><div class=\"line\">\tdelay_nus(<span class=\"number\">200</span>);</div><div class=\"line\">\tbq34z100_i2c_write_block(BQ34Z100_ADDR, <span class=\"number\">1</span>, <span class=\"number\">1</span>, tx);</div><div class=\"line\">\tbq34z100_i2c_read_block(BQ34Z100_ADDR, bytes, rx_data);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100 状态标识处理</div><div class=\"line\"> * @param u8 battery_num 电池号</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bq34z100_flag_process</span><span class=\"params\">(u8 battery_num)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @brief BQ34Z100信息读取</div><div class=\"line\"> * @param u8 battery_num 电池号</div><div class=\"line\"> * @return NONE</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BQ34Z100_get_charge_state</span><span class=\"params\">(u8 battery_num)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tu8 tmp[<span class=\"number\">2</span>];</div><div class=\"line\">\t<span class=\"keyword\">static</span> u8 step[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">battery_t</span>* battery;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (battery_num == <span class=\"number\">1</span>)</div><div class=\"line\">        battery = &amp;battery_1;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (battery_num == <span class=\"number\">2</span>)</div><div class=\"line\">        battery = &amp;battery_2;</div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">switch</span> (step[battery_num - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 温度 K</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_TEMPERATURE_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;temperature = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"temperature:%d\\n\\n\"</span>, (battery-&gt;temperature - <span class=\"number\">2731</span>) / <span class=\"number\">10</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 电量百分比 0-100%</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_STATE_OF_CHARGE, <span class=\"number\">1</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;charge_state = tmp[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Percentage of electricity:%d \\n\\n\"</span>, battery-&gt;charge_state);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 电池容量 mAh (充满电之后校准)</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_FULL_CHAGRE_CAP_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;full_charge_cap = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"total capacity:%d mAh \\n\\n\"</span>, battery-&gt;full_charge_cap);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 剩余电池容量 * 1 mAh</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_REMAIN_CAP_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;remain_cap = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"remain capacity:%d mAh \\n\\n\"</span>, battery-&gt;remain_cap);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 电压 mV</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_VOLTAGE_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;voltage = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"voltage:%d mV \\n\\n\"</span>, battery-&gt;voltage);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 电流 mA</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_CURRENT_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;current = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"current:%d mA \\n\\n\"</span>, battery-&gt;current);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">\t\t<span class=\"comment\">// 运行标志</span></div><div class=\"line\">\t\tbq34z100_read_reg(battery_num, BQ34Z100_FLAGS_LSB, <span class=\"number\">2</span>, tmp);</div><div class=\"line\">\t\tbattery-&gt;flag = bytes_to_integer(tmp);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[%d] \"</span>, battery_num);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"run flag:%x \\n\\n\"</span>, battery-&gt;flag);</div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">default</span>:</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">    </div><div class=\"line\">\t(step[battery_num - <span class=\"number\">1</span>] &gt; <span class=\"number\">6</span>) ? (step[battery_num - <span class=\"number\">1</span>] = <span class=\"number\">0</span>) :</div><div class=\"line\">                                   step[battery_num - <span class=\"number\">1</span>]++;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _BATTERY_MANAGE_H</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _BATTERY_MANAGE_H</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"type.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stm32f10x.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_1_I2C_SCL_GPIO  GPIOB</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_1_I2C_SCL_PIN   GPIO_Pin_8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_1_I2C_SDA_GPIO  GPIOB</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_1_I2C_SDA_PIN   GPIO_Pin_9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_2_I2C_SCL_GPIO  GPIOB</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_2_I2C_SCL_PIN   GPIO_Pin_10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_2_I2C_SDA_GPIO  GPIOB</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BATTERY_2_I2C_SDA_PIN   GPIO_Pin_11</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_ADDR 0xAA</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDA_1() do&#123;\\</div><div class=\"line\">                    GPIO_InitTypeDef  GPIO_InitStructure;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\\</div><div class=\"line\">                    GPIO_Init(BQ34Z100_GPIO_SDA, &amp;GPIO_InitStructure);\\</div><div class=\"line\">                 &#125; while (0)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDA_0() do&#123;\\</div><div class=\"line\">                    GPIO_InitTypeDef  GPIO_InitStructure;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SDA_pin;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;\\</div><div class=\"line\">                    GPIO_Init(BQ34Z100_GPIO_SDA, &amp;GPIO_InitStructure);\\</div><div class=\"line\">                    GPIO_ResetBits(BQ34Z100_GPIO_SDA, BQ34Z100_SDA_pin);\\</div><div class=\"line\">                 &#125; while (0)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SCL_1() do&#123;\\</div><div class=\"line\">                    GPIO_InitTypeDef  GPIO_InitStructure;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;\\</div><div class=\"line\">                    GPIO_Init(BQ34Z100_GPIO_SCL, &amp;GPIO_InitStructure);\\</div><div class=\"line\">                 &#125; while (0)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SCL_0() do&#123;\\</div><div class=\"line\">                    GPIO_InitTypeDef  GPIO_InitStructure;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Pin = BQ34Z100_SCL_pin;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\\</div><div class=\"line\">                    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;\\</div><div class=\"line\">                    GPIO_Init(BQ34Z100_GPIO_SCL, &amp;GPIO_InitStructure);\\</div><div class=\"line\">                    GPIO_ResetBits(BQ34Z100_GPIO_SCL, BQ34Z100_SCL_pin);\\</div><div class=\"line\">                 &#125; while (0)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> I2CDELAY()  delay_nus(5)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_NACK 0</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_ACK 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tu16 charge_state;</div><div class=\"line\">\tu16 remain_cap;</div><div class=\"line\">\tu16 full_charge_cap;</div><div class=\"line\">\tu16 voltage;</div><div class=\"line\">\tu16 temperature;</div><div class=\"line\">\tu16 current;</div><div class=\"line\">\tu16 flag;</div><div class=\"line\">&#125; <span class=\"keyword\">battery_t</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_CONTROL_LSB    0x00</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_CONTROL_MSB    0x01</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_STATE_OF_CHARGE    0x02</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_MAX_ERROR      0x03</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_REMAIN_CAP_LSB 0x04</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_REMAIN_CAP_MSB 0x05</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FULL_CHAGRE_CAP_LSB 0x06</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FULL_CHAGRE_CAP_MSB 0x07</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_VOLTAGE_LSB 0x08</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_VOLTAGE_MSB 0x09</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_AVA_CURRENT_LSB 0x0A</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_AVA_CURRENT_MSB 0x0B</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_TEMPERATURE_LSB 0x0C</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_TEMPERATURE_MSB 0x0D</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FLAGS_LSB      0x0E</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FLAGS_MSB      0x0F</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_CURRENT_LSB      0x10</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_CURRENT_MSB      0x11</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FLAGSB_LSB      0x12</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BQ34Z100_FLAGSB_MSB      0x13</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT0    0x0001</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT1    0x0002</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT2    0x0004</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT3    0x0008</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT4    0x0010</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT5    0x0020</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT6    0x0040</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LSB_BIT7    0x0080</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT0    0x0100</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT1    0x0200</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT2    0x0400</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT3    0x0800</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT4    0x1000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT5    0x2000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT6    0x4000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSB_BIT7    0x8000</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_OTC        MSB_BIT7    <span class=\"comment\">// 充电过温</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_OTD        MSB_BIT6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_BATHI      MSB_BIT5</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_BATLOW     MSB_BIT4</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_CHG_INH    MSB_BIT3</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_XCHG       MSB_BIT2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_FC         MSB_BIT1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_CHG        MSB_BIT0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_OCVTAKEN   LSB_BIT7</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_RSVD0      LSB_BIT6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_RSVD1      LSB_BIT5</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_CF         LSB_BIT4</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_RSVD2      LSB_BIT3</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_SOC1       LSB_BIT2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_SOCF       LSB_BIT1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_DSG        LSB_BIT0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BQ34Z100_get_charge_state</span><span class=\"params\">(u8 battery_num)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">battery_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>"},{"title":"STM8时钟系统(clock)","toc":true,"date":"2016-08-05T14:12:15.000Z","_content":"## STM8时钟结构(clock structure)\n<center>![STM8时钟结构](http://obd6jz6in.bkt.clouddn.com/STM8%E6%97%B6%E9%92%9F%E7%BB%93%E6%9E%84.jpg)</center>\n\n## 时钟分类\nSTM的时钟设计同时兼顾系统的鲁棒性及低功耗，共提供四类时钟,分别为高速外部时钟`HSE`、高速内部时钟`HSI`、低速内部时钟`LSI`、低速外部时钟`LSE`。\n\n### 高速外部时钟`HSE`\n可由以下两个时钟源产生:\n- 外部晶体/陶瓷振荡器\n- 外部用户时钟源（byPass）\n在外部晶体震荡稳定下来之后外部时钟寄存器`CLK_ECKCR`中的`HSERDY`标志位会由硬件置位，用户可查询该标志位判断`HSE`的状态，另外可通过`HSEON`位控制`HSE`的开关。\n\n### 高速内部时钟`HSI`\n- `HSI`由内部集成的RC振荡器产生的16MHz频率。在系统启动时，由硬件自动将系统时钟源切换为`HSI`的8分频，也就是系统起始时钟频率为8MHz。`HSI`具有低功耗、快速的起振时间的特性，但是相比由外部晶体提供时钟源的`HSE`，精度稍差。\n- `HSI`在出厂时是完成过校准的，用户也可以通过`CLK_HSICALR`寄存器校准`HSI`。\n- `HSI`另外一个特点是作为备用时钟源，当`CSS(clock security system)`检测到`HSE`晶体停振，会自动将系统时钟切换到`HSI`，已保证系统的稳定运行。\n当设置了`FHWU`快速唤醒功能时，MCU在从停止状态唤醒时会自动切换到`HSI`完成快速唤醒。\n\n### 低速外部时钟`LSE`\n由外接32768Hz的时钟源提供，主要为RTC提供高精度时钟源。\n\n### 低速内部时钟`LSI`\n`LSI`提供38KHz的时钟频率，可以在活跃停机下保持运行，给独立看门狗提供时钟频率。\n\n## CSS\n对于工业级产品，对稳定性要求很高，STM8的时钟机制可以提高系统的鲁棒性。`CSS`在`HSE`作为系统时钟时会一直处在监控状态，一旦`HSE`失效，硬件会自动切换到`HSI`，系统时钟分频系数不变。用户可以通过`CSSEN`设置`CSS`使能，一旦设置使能，知道系统复位，`CSS`将一直存在使能的状态且不可关闭。\n\n## 时钟中断\n时钟控制器可以在一定条件下产生如下中断和事件\n<center>![时钟中断](http://obd6jz6in.bkt.clouddn.com/%E6%97%B6%E9%92%9F%E4%B8%AD%E6%96%AD.jpg)</center>\n\n*以上只是简单的概要，详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)** ","source":"_posts/STM8-CLOCK.md","raw":"---\ntitle: STM8时钟系统(clock)\ntoc: true\ndate: 2016-08-05 14:12:15\ncategories: STM8\ntags: STM8\n---\n## STM8时钟结构(clock structure)\n<center>![STM8时钟结构](http://obd6jz6in.bkt.clouddn.com/STM8%E6%97%B6%E9%92%9F%E7%BB%93%E6%9E%84.jpg)</center>\n\n## 时钟分类\nSTM的时钟设计同时兼顾系统的鲁棒性及低功耗，共提供四类时钟,分别为高速外部时钟`HSE`、高速内部时钟`HSI`、低速内部时钟`LSI`、低速外部时钟`LSE`。\n\n### 高速外部时钟`HSE`\n可由以下两个时钟源产生:\n- 外部晶体/陶瓷振荡器\n- 外部用户时钟源（byPass）\n在外部晶体震荡稳定下来之后外部时钟寄存器`CLK_ECKCR`中的`HSERDY`标志位会由硬件置位，用户可查询该标志位判断`HSE`的状态，另外可通过`HSEON`位控制`HSE`的开关。\n\n### 高速内部时钟`HSI`\n- `HSI`由内部集成的RC振荡器产生的16MHz频率。在系统启动时，由硬件自动将系统时钟源切换为`HSI`的8分频，也就是系统起始时钟频率为8MHz。`HSI`具有低功耗、快速的起振时间的特性，但是相比由外部晶体提供时钟源的`HSE`，精度稍差。\n- `HSI`在出厂时是完成过校准的，用户也可以通过`CLK_HSICALR`寄存器校准`HSI`。\n- `HSI`另外一个特点是作为备用时钟源，当`CSS(clock security system)`检测到`HSE`晶体停振，会自动将系统时钟切换到`HSI`，已保证系统的稳定运行。\n当设置了`FHWU`快速唤醒功能时，MCU在从停止状态唤醒时会自动切换到`HSI`完成快速唤醒。\n\n### 低速外部时钟`LSE`\n由外接32768Hz的时钟源提供，主要为RTC提供高精度时钟源。\n\n### 低速内部时钟`LSI`\n`LSI`提供38KHz的时钟频率，可以在活跃停机下保持运行，给独立看门狗提供时钟频率。\n\n## CSS\n对于工业级产品，对稳定性要求很高，STM8的时钟机制可以提高系统的鲁棒性。`CSS`在`HSE`作为系统时钟时会一直处在监控状态，一旦`HSE`失效，硬件会自动切换到`HSI`，系统时钟分频系数不变。用户可以通过`CSSEN`设置`CSS`使能，一旦设置使能，知道系统复位，`CSS`将一直存在使能的状态且不可关闭。\n\n## 时钟中断\n时钟控制器可以在一定条件下产生如下中断和事件\n<center>![时钟中断](http://obd6jz6in.bkt.clouddn.com/%E6%97%B6%E9%92%9F%E4%B8%AD%E6%96%AD.jpg)</center>\n\n*以上只是简单的概要，详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)** ","slug":"STM8-CLOCK","published":1,"updated":"2016-08-19T08:07:09.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9any000u70g5zj3b71tm","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"STM8时钟结构-clock-structure\"><a href=\"#STM8时钟结构-clock-structure\" class=\"headerlink\" title=\"STM8时钟结构(clock structure)\"></a>STM8时钟结构(clock structure)</h2><center><img src=\"http://obd6jz6in.bkt.clouddn.com/STM8%E6%97%B6%E9%92%9F%E7%BB%93%E6%9E%84.jpg\" alt=\"STM8时钟结构\"></center>\n\n<h2 id=\"时钟分类\"><a href=\"#时钟分类\" class=\"headerlink\" title=\"时钟分类\"></a>时钟分类</h2><p>STM的时钟设计同时兼顾系统的鲁棒性及低功耗，共提供四类时钟,分别为高速外部时钟<code>HSE</code>、高速内部时钟<code>HSI</code>、低速内部时钟<code>LSI</code>、低速外部时钟<code>LSE</code>。</p>\n<h3 id=\"高速外部时钟HSE\"><a href=\"#高速外部时钟HSE\" class=\"headerlink\" title=\"高速外部时钟HSE\"></a>高速外部时钟<code>HSE</code></h3><p>可由以下两个时钟源产生:</p>\n<ul>\n<li>外部晶体/陶瓷振荡器</li>\n<li>外部用户时钟源（byPass）<br>在外部晶体震荡稳定下来之后外部时钟寄存器<code>CLK_ECKCR</code>中的<code>HSERDY</code>标志位会由硬件置位，用户可查询该标志位判断<code>HSE</code>的状态，另外可通过<code>HSEON</code>位控制<code>HSE</code>的开关。</li>\n</ul>\n<h3 id=\"高速内部时钟HSI\"><a href=\"#高速内部时钟HSI\" class=\"headerlink\" title=\"高速内部时钟HSI\"></a>高速内部时钟<code>HSI</code></h3><ul>\n<li><code>HSI</code>由内部集成的RC振荡器产生的16MHz频率。在系统启动时，由硬件自动将系统时钟源切换为<code>HSI</code>的8分频，也就是系统起始时钟频率为8MHz。<code>HSI</code>具有低功耗、快速的起振时间的特性，但是相比由外部晶体提供时钟源的<code>HSE</code>，精度稍差。</li>\n<li><code>HSI</code>在出厂时是完成过校准的，用户也可以通过<code>CLK_HSICALR</code>寄存器校准<code>HSI</code>。</li>\n<li><code>HSI</code>另外一个特点是作为备用时钟源，当<code>CSS(clock security system)</code>检测到<code>HSE</code>晶体停振，会自动将系统时钟切换到<code>HSI</code>，已保证系统的稳定运行。<br>当设置了<code>FHWU</code>快速唤醒功能时，MCU在从停止状态唤醒时会自动切换到<code>HSI</code>完成快速唤醒。</li>\n</ul>\n<h3 id=\"低速外部时钟LSE\"><a href=\"#低速外部时钟LSE\" class=\"headerlink\" title=\"低速外部时钟LSE\"></a>低速外部时钟<code>LSE</code></h3><p>由外接32768Hz的时钟源提供，主要为RTC提供高精度时钟源。</p>\n<h3 id=\"低速内部时钟LSI\"><a href=\"#低速内部时钟LSI\" class=\"headerlink\" title=\"低速内部时钟LSI\"></a>低速内部时钟<code>LSI</code></h3><p><code>LSI</code>提供38KHz的时钟频率，可以在活跃停机下保持运行，给独立看门狗提供时钟频率。</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p>对于工业级产品，对稳定性要求很高，STM8的时钟机制可以提高系统的鲁棒性。<code>CSS</code>在<code>HSE</code>作为系统时钟时会一直处在监控状态，一旦<code>HSE</code>失效，硬件会自动切换到<code>HSI</code>，系统时钟分频系数不变。用户可以通过<code>CSSEN</code>设置<code>CSS</code>使能，一旦设置使能，知道系统复位，<code>CSS</code>将一直存在使能的状态且不可关闭。</p>\n<h2 id=\"时钟中断\"><a href=\"#时钟中断\" class=\"headerlink\" title=\"时钟中断\"></a>时钟中断</h2><p>时钟控制器可以在一定条件下产生如下中断和事件</p>\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/%E6%97%B6%E9%92%9F%E4%B8%AD%E6%96%AD.jpg\" alt=\"时钟中断\"></center>\n\n<p><em>以上只是简单的概要，详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\" target=\"_blank\" rel=\"external\">STM8L 用户指南</a></strong> </p>\n","excerpt":"","more":"<h2 id=\"STM8时钟结构-clock-structure\"><a href=\"#STM8时钟结构-clock-structure\" class=\"headerlink\" title=\"STM8时钟结构(clock structure)\"></a>STM8时钟结构(clock structure)</h2><center><img src=\"http://obd6jz6in.bkt.clouddn.com/STM8%E6%97%B6%E9%92%9F%E7%BB%93%E6%9E%84.jpg\" alt=\"STM8时钟结构\"></center>\n\n<h2 id=\"时钟分类\"><a href=\"#时钟分类\" class=\"headerlink\" title=\"时钟分类\"></a>时钟分类</h2><p>STM的时钟设计同时兼顾系统的鲁棒性及低功耗，共提供四类时钟,分别为高速外部时钟<code>HSE</code>、高速内部时钟<code>HSI</code>、低速内部时钟<code>LSI</code>、低速外部时钟<code>LSE</code>。</p>\n<h3 id=\"高速外部时钟HSE\"><a href=\"#高速外部时钟HSE\" class=\"headerlink\" title=\"高速外部时钟HSE\"></a>高速外部时钟<code>HSE</code></h3><p>可由以下两个时钟源产生:</p>\n<ul>\n<li>外部晶体/陶瓷振荡器</li>\n<li>外部用户时钟源（byPass）<br>在外部晶体震荡稳定下来之后外部时钟寄存器<code>CLK_ECKCR</code>中的<code>HSERDY</code>标志位会由硬件置位，用户可查询该标志位判断<code>HSE</code>的状态，另外可通过<code>HSEON</code>位控制<code>HSE</code>的开关。</li>\n</ul>\n<h3 id=\"高速内部时钟HSI\"><a href=\"#高速内部时钟HSI\" class=\"headerlink\" title=\"高速内部时钟HSI\"></a>高速内部时钟<code>HSI</code></h3><ul>\n<li><code>HSI</code>由内部集成的RC振荡器产生的16MHz频率。在系统启动时，由硬件自动将系统时钟源切换为<code>HSI</code>的8分频，也就是系统起始时钟频率为8MHz。<code>HSI</code>具有低功耗、快速的起振时间的特性，但是相比由外部晶体提供时钟源的<code>HSE</code>，精度稍差。</li>\n<li><code>HSI</code>在出厂时是完成过校准的，用户也可以通过<code>CLK_HSICALR</code>寄存器校准<code>HSI</code>。</li>\n<li><code>HSI</code>另外一个特点是作为备用时钟源，当<code>CSS(clock security system)</code>检测到<code>HSE</code>晶体停振，会自动将系统时钟切换到<code>HSI</code>，已保证系统的稳定运行。<br>当设置了<code>FHWU</code>快速唤醒功能时，MCU在从停止状态唤醒时会自动切换到<code>HSI</code>完成快速唤醒。</li>\n</ul>\n<h3 id=\"低速外部时钟LSE\"><a href=\"#低速外部时钟LSE\" class=\"headerlink\" title=\"低速外部时钟LSE\"></a>低速外部时钟<code>LSE</code></h3><p>由外接32768Hz的时钟源提供，主要为RTC提供高精度时钟源。</p>\n<h3 id=\"低速内部时钟LSI\"><a href=\"#低速内部时钟LSI\" class=\"headerlink\" title=\"低速内部时钟LSI\"></a>低速内部时钟<code>LSI</code></h3><p><code>LSI</code>提供38KHz的时钟频率，可以在活跃停机下保持运行，给独立看门狗提供时钟频率。</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p>对于工业级产品，对稳定性要求很高，STM8的时钟机制可以提高系统的鲁棒性。<code>CSS</code>在<code>HSE</code>作为系统时钟时会一直处在监控状态，一旦<code>HSE</code>失效，硬件会自动切换到<code>HSI</code>，系统时钟分频系数不变。用户可以通过<code>CSSEN</code>设置<code>CSS</code>使能，一旦设置使能，知道系统复位，<code>CSS</code>将一直存在使能的状态且不可关闭。</p>\n<h2 id=\"时钟中断\"><a href=\"#时钟中断\" class=\"headerlink\" title=\"时钟中断\"></a>时钟中断</h2><p>时钟控制器可以在一定条件下产生如下中断和事件</p>\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/%E6%97%B6%E9%92%9F%E4%B8%AD%E6%96%AD.jpg\" alt=\"时钟中断\"></center>\n\n<p><em>以上只是简单的概要，详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\">STM8L 用户指南</a></strong> </p>\n"},{"title":"STM8通用IO(GPIO)","toc":true,"date":"2016-08-04T13:12:15.000Z","_content":"## 特性\n- 每个IO口可单独配置\n- 输入模式可配：上拉输入、悬浮输入\n- 输出模式可配：推挽输出、开漏输出\n- 输入输出数据寄存器独立\n- 外部中断独立使能\n- 输出斜率可控用以减小EMC噪声\n- 管脚复用\n- 1.6V-VddioMax直接IO状态稳定\n<!--more-->\n## 相关寄存器(Register)\n主要是6个寄存器`DDR、CR1、CR2、ODR、IDR`,全部为8位一个字节，每一位对应一个IO口。\n\n### DDR(date direction register)\n控制IO口输入输出方向，0-输入模式，1-输出模式。\n\n### CR1(port control register #1)\n- 输入模式\n\t- 0：悬浮输入\n\t- 1：输入上拉\n- 输出模式\n\t- 0：伪开漏输出\n\t- 1：推挽输出，输出斜率可调(CR2)\n\n### CR2(port control register #2)\n- 输入模式\n\t- 0：外部中断禁止\n\t- 1：外部中断使能\n- 输出模式\n\t- 0：输出最大速率2MHz，低速模式\n\t- 1：输出最大速率10MHz，高速模式\n\n### ODR(output date register)\n输出寄存器，忘改寄存器写入数据，可改变输出管脚电平状态。\n\n### IDR(input date register)\n输入寄存器，读取该寄存器可得到当前管脚电平状态。\n\n*以上只是简单的概要，详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)**","source":"_posts/STM8-GPIO.md","raw":"---\ntitle: STM8通用IO(GPIO)\ntoc: true\ndate: 2016-08-04 13:12:15\ncategories: STM8\ntags: STM8\n---\n## 特性\n- 每个IO口可单独配置\n- 输入模式可配：上拉输入、悬浮输入\n- 输出模式可配：推挽输出、开漏输出\n- 输入输出数据寄存器独立\n- 外部中断独立使能\n- 输出斜率可控用以减小EMC噪声\n- 管脚复用\n- 1.6V-VddioMax直接IO状态稳定\n<!--more-->\n## 相关寄存器(Register)\n主要是6个寄存器`DDR、CR1、CR2、ODR、IDR`,全部为8位一个字节，每一位对应一个IO口。\n\n### DDR(date direction register)\n控制IO口输入输出方向，0-输入模式，1-输出模式。\n\n### CR1(port control register #1)\n- 输入模式\n\t- 0：悬浮输入\n\t- 1：输入上拉\n- 输出模式\n\t- 0：伪开漏输出\n\t- 1：推挽输出，输出斜率可调(CR2)\n\n### CR2(port control register #2)\n- 输入模式\n\t- 0：外部中断禁止\n\t- 1：外部中断使能\n- 输出模式\n\t- 0：输出最大速率2MHz，低速模式\n\t- 1：输出最大速率10MHz，高速模式\n\n### ODR(output date register)\n输出寄存器，忘改寄存器写入数据，可改变输出管脚电平状态。\n\n### IDR(input date register)\n输入寄存器，读取该寄存器可得到当前管脚电平状态。\n\n*以上只是简单的概要，详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)**","slug":"STM8-GPIO","published":1,"updated":"2016-08-05T07:35:16.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9ao1000w70g5r3c09xyu","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>每个IO口可单独配置</li>\n<li>输入模式可配：上拉输入、悬浮输入</li>\n<li>输出模式可配：推挽输出、开漏输出</li>\n<li>输入输出数据寄存器独立</li>\n<li>外部中断独立使能</li>\n<li>输出斜率可控用以减小EMC噪声</li>\n<li>管脚复用</li>\n<li>1.6V-VddioMax直接IO状态稳定<a id=\"more\"></a>\n<h2 id=\"相关寄存器-Register\"><a href=\"#相关寄存器-Register\" class=\"headerlink\" title=\"相关寄存器(Register)\"></a>相关寄存器(Register)</h2>主要是6个寄存器<code>DDR、CR1、CR2、ODR、IDR</code>,全部为8位一个字节，每一位对应一个IO口。</li>\n</ul>\n<h3 id=\"DDR-date-direction-register\"><a href=\"#DDR-date-direction-register\" class=\"headerlink\" title=\"DDR(date direction register)\"></a>DDR(date direction register)</h3><p>控制IO口输入输出方向，0-输入模式，1-输出模式。</p>\n<h3 id=\"CR1-port-control-register-1\"><a href=\"#CR1-port-control-register-1\" class=\"headerlink\" title=\"CR1(port control register #1)\"></a>CR1(port control register #1)</h3><ul>\n<li>输入模式<ul>\n<li>0：悬浮输入</li>\n<li>1：输入上拉</li>\n</ul>\n</li>\n<li>输出模式<ul>\n<li>0：伪开漏输出</li>\n<li>1：推挽输出，输出斜率可调(CR2)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CR2-port-control-register-2\"><a href=\"#CR2-port-control-register-2\" class=\"headerlink\" title=\"CR2(port control register #2)\"></a>CR2(port control register #2)</h3><ul>\n<li>输入模式<ul>\n<li>0：外部中断禁止</li>\n<li>1：外部中断使能</li>\n</ul>\n</li>\n<li>输出模式<ul>\n<li>0：输出最大速率2MHz，低速模式</li>\n<li>1：输出最大速率10MHz，高速模式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ODR-output-date-register\"><a href=\"#ODR-output-date-register\" class=\"headerlink\" title=\"ODR(output date register)\"></a>ODR(output date register)</h3><p>输出寄存器，忘改寄存器写入数据，可改变输出管脚电平状态。</p>\n<h3 id=\"IDR-input-date-register\"><a href=\"#IDR-input-date-register\" class=\"headerlink\" title=\"IDR(input date register)\"></a>IDR(input date register)</h3><p>输入寄存器，读取该寄存器可得到当前管脚电平状态。</p>\n<p><em>以上只是简单的概要，详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\" target=\"_blank\" rel=\"external\">STM8L 用户指南</a></strong></p>\n","excerpt":"<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>每个IO口可单独配置</li>\n<li>输入模式可配：上拉输入、悬浮输入</li>\n<li>输出模式可配：推挽输出、开漏输出</li>\n<li>输入输出数据寄存器独立</li>\n<li>外部中断独立使能</li>\n<li>输出斜率可控用以减小EMC噪声</li>\n<li>管脚复用</li>\n<li>1.6V-VddioMax直接IO状态稳定","more":"<h2 id=\"相关寄存器-Register\"><a href=\"#相关寄存器-Register\" class=\"headerlink\" title=\"相关寄存器(Register)\"></a>相关寄存器(Register)</h2>主要是6个寄存器<code>DDR、CR1、CR2、ODR、IDR</code>,全部为8位一个字节，每一位对应一个IO口。</li>\n</ul>\n<h3 id=\"DDR-date-direction-register\"><a href=\"#DDR-date-direction-register\" class=\"headerlink\" title=\"DDR(date direction register)\"></a>DDR(date direction register)</h3><p>控制IO口输入输出方向，0-输入模式，1-输出模式。</p>\n<h3 id=\"CR1-port-control-register-1\"><a href=\"#CR1-port-control-register-1\" class=\"headerlink\" title=\"CR1(port control register #1)\"></a>CR1(port control register #1)</h3><ul>\n<li>输入模式<ul>\n<li>0：悬浮输入</li>\n<li>1：输入上拉</li>\n</ul>\n</li>\n<li>输出模式<ul>\n<li>0：伪开漏输出</li>\n<li>1：推挽输出，输出斜率可调(CR2)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CR2-port-control-register-2\"><a href=\"#CR2-port-control-register-2\" class=\"headerlink\" title=\"CR2(port control register #2)\"></a>CR2(port control register #2)</h3><ul>\n<li>输入模式<ul>\n<li>0：外部中断禁止</li>\n<li>1：外部中断使能</li>\n</ul>\n</li>\n<li>输出模式<ul>\n<li>0：输出最大速率2MHz，低速模式</li>\n<li>1：输出最大速率10MHz，高速模式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ODR-output-date-register\"><a href=\"#ODR-output-date-register\" class=\"headerlink\" title=\"ODR(output date register)\"></a>ODR(output date register)</h3><p>输出寄存器，忘改寄存器写入数据，可改变输出管脚电平状态。</p>\n<h3 id=\"IDR-input-date-register\"><a href=\"#IDR-input-date-register\" class=\"headerlink\" title=\"IDR(input date register)\"></a>IDR(input date register)</h3><p>输入寄存器，读取该寄存器可得到当前管脚电平状态。</p>\n<p><em>以上只是简单的概要，详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\">STM8L 用户指南</a></strong></p>"},{"title":"STM8内存(memory)","toc":true,"date":"2016-08-08T10:12:15.000Z","_content":"以低密度flash内存分配为例(高密度和中等密度只是内存分配及大小不同)，下图是内存映射图。\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/STM8%E4%BD%8E%E5%AF%86%E5%BA%A6Flash.jpg\"></center>\n和51单片机一样，STM8也是8位机16位地址总线宽度，设计最大寻址范围也是64Kb，每页128字节，IAP操作以页为单位。整个FLASH被分为数据EEPROM(`DATA EEPROM`)、配置选项(`OPTION BYTES`)、代码区(`CODE FLASH`)。\n\n### 数据EEPROM(`DATA EEPROM`)\n数据EEPROM可以用来存储一些应用数据，如软件版本号、公司或者组织信息、作者信息等等。初始时，为了保证数据安全，在IAP模式下这部分是写保护的。写保护可以通过MASS密码序列解除，此时可向EEPROM中写入数据。\n\n### 主程序代码区\n在UBC或者私有代码区(`PCODE`)里的程序执行完后跳转到存储在这里执行代码。这里一般存的是用户代码。\n\n### 配置选项(`OPTION BYTES`)\n这部分存储的是硬件配置代码，以字节为单位。主要会影响到硬件配置和内存的写保护。这部分的内容可以通过编程器在ICP条件下或者用户代码在IAP条件下改写，**UBC与PCODE不可以更改这部分内容**。\n\n### 用户启动代码区(`UBC`)\n这个区域里包含用户IAP升级程序和各类中断向量，芯片在复位时会从RESET中断跳转到执行bootloader代码(这部分代码ST官方提供，用户也可以编写自己的bootloader)。UBC无法通过IAP改写，因为UBC拥有一个更强的二级写保护，这个写保护无法通过MASS密码序列解锁。因此更改这部分的代码只能通过ICP模式(使用 SWIM 接口)。通过配置选项(`OPTION BYTES`)，可以设置UBC的大小(以页为单位)。\n\n### *私有代码区(`PCODE`)*\n这部分不是所有型号的STM8芯片都存在的，具体是否有这部分，请参阅所使用芯片的datesheet。PCODE用来存放一些用以驱动硬件的私有代码库。可以在ICP模式下通过`PCODESIZE`配置选项配置其打下，一旦配置完成无法擦除，相应的PCODE区的大小也就固定不可更改了。\n\n*以上只是一些简单的概要，详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)**","source":"_posts/STM8-Memory.md","raw":"---\ntitle: STM8内存(memory)\ntoc: true\ndate: 2016-08-08 10:12:15\ncategories: STM8\ntags: STM8\n---\n以低密度flash内存分配为例(高密度和中等密度只是内存分配及大小不同)，下图是内存映射图。\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/STM8%E4%BD%8E%E5%AF%86%E5%BA%A6Flash.jpg\"></center>\n和51单片机一样，STM8也是8位机16位地址总线宽度，设计最大寻址范围也是64Kb，每页128字节，IAP操作以页为单位。整个FLASH被分为数据EEPROM(`DATA EEPROM`)、配置选项(`OPTION BYTES`)、代码区(`CODE FLASH`)。\n\n### 数据EEPROM(`DATA EEPROM`)\n数据EEPROM可以用来存储一些应用数据，如软件版本号、公司或者组织信息、作者信息等等。初始时，为了保证数据安全，在IAP模式下这部分是写保护的。写保护可以通过MASS密码序列解除，此时可向EEPROM中写入数据。\n\n### 主程序代码区\n在UBC或者私有代码区(`PCODE`)里的程序执行完后跳转到存储在这里执行代码。这里一般存的是用户代码。\n\n### 配置选项(`OPTION BYTES`)\n这部分存储的是硬件配置代码，以字节为单位。主要会影响到硬件配置和内存的写保护。这部分的内容可以通过编程器在ICP条件下或者用户代码在IAP条件下改写，**UBC与PCODE不可以更改这部分内容**。\n\n### 用户启动代码区(`UBC`)\n这个区域里包含用户IAP升级程序和各类中断向量，芯片在复位时会从RESET中断跳转到执行bootloader代码(这部分代码ST官方提供，用户也可以编写自己的bootloader)。UBC无法通过IAP改写，因为UBC拥有一个更强的二级写保护，这个写保护无法通过MASS密码序列解锁。因此更改这部分的代码只能通过ICP模式(使用 SWIM 接口)。通过配置选项(`OPTION BYTES`)，可以设置UBC的大小(以页为单位)。\n\n### *私有代码区(`PCODE`)*\n这部分不是所有型号的STM8芯片都存在的，具体是否有这部分，请参阅所使用芯片的datesheet。PCODE用来存放一些用以驱动硬件的私有代码库。可以在ICP模式下通过`PCODESIZE`配置选项配置其打下，一旦配置完成无法擦除，相应的PCODE区的大小也就固定不可更改了。\n\n*以上只是一些简单的概要，详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)**","slug":"STM8-Memory","published":1,"updated":"2016-08-08T08:36:21.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9ao4001070g5s3dnaosu","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>以低密度flash内存分配为例(高密度和中等密度只是内存分配及大小不同)，下图是内存映射图。</p>\n<p><center><img src=\"http://obd6jz6in.bkt.clouddn.com/STM8%E4%BD%8E%E5%AF%86%E5%BA%A6Flash.jpg\"></center><br>和51单片机一样，STM8也是8位机16位地址总线宽度，设计最大寻址范围也是64Kb，每页128字节，IAP操作以页为单位。整个FLASH被分为数据EEPROM(<code>DATA EEPROM</code>)、配置选项(<code>OPTION BYTES</code>)、代码区(<code>CODE FLASH</code>)。</p>\n<h3 id=\"数据EEPROM-DATA-EEPROM\"><a href=\"#数据EEPROM-DATA-EEPROM\" class=\"headerlink\" title=\"数据EEPROM(DATA EEPROM)\"></a>数据EEPROM(<code>DATA EEPROM</code>)</h3><p>数据EEPROM可以用来存储一些应用数据，如软件版本号、公司或者组织信息、作者信息等等。初始时，为了保证数据安全，在IAP模式下这部分是写保护的。写保护可以通过MASS密码序列解除，此时可向EEPROM中写入数据。</p>\n<h3 id=\"主程序代码区\"><a href=\"#主程序代码区\" class=\"headerlink\" title=\"主程序代码区\"></a>主程序代码区</h3><p>在UBC或者私有代码区(<code>PCODE</code>)里的程序执行完后跳转到存储在这里执行代码。这里一般存的是用户代码。</p>\n<h3 id=\"配置选项-OPTION-BYTES\"><a href=\"#配置选项-OPTION-BYTES\" class=\"headerlink\" title=\"配置选项(OPTION BYTES)\"></a>配置选项(<code>OPTION BYTES</code>)</h3><p>这部分存储的是硬件配置代码，以字节为单位。主要会影响到硬件配置和内存的写保护。这部分的内容可以通过编程器在ICP条件下或者用户代码在IAP条件下改写，<strong>UBC与PCODE不可以更改这部分内容</strong>。</p>\n<h3 id=\"用户启动代码区-UBC\"><a href=\"#用户启动代码区-UBC\" class=\"headerlink\" title=\"用户启动代码区(UBC)\"></a>用户启动代码区(<code>UBC</code>)</h3><p>这个区域里包含用户IAP升级程序和各类中断向量，芯片在复位时会从RESET中断跳转到执行bootloader代码(这部分代码ST官方提供，用户也可以编写自己的bootloader)。UBC无法通过IAP改写，因为UBC拥有一个更强的二级写保护，这个写保护无法通过MASS密码序列解锁。因此更改这部分的代码只能通过ICP模式(使用 SWIM 接口)。通过配置选项(<code>OPTION BYTES</code>)，可以设置UBC的大小(以页为单位)。</p>\n<h3 id=\"私有代码区-PCODE\"><a href=\"#私有代码区-PCODE\" class=\"headerlink\" title=\"私有代码区(PCODE)\"></a><em>私有代码区(<code>PCODE</code>)</em></h3><p>这部分不是所有型号的STM8芯片都存在的，具体是否有这部分，请参阅所使用芯片的datesheet。PCODE用来存放一些用以驱动硬件的私有代码库。可以在ICP模式下通过<code>PCODESIZE</code>配置选项配置其打下，一旦配置完成无法擦除，相应的PCODE区的大小也就固定不可更改了。</p>\n<p><em>以上只是一些简单的概要，详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\" target=\"_blank\" rel=\"external\">STM8L 用户指南</a></strong></p>\n","excerpt":"","more":"<p>以低密度flash内存分配为例(高密度和中等密度只是内存分配及大小不同)，下图是内存映射图。</p>\n<p><center><img src=\"http://obd6jz6in.bkt.clouddn.com/STM8%E4%BD%8E%E5%AF%86%E5%BA%A6Flash.jpg\"></center><br>和51单片机一样，STM8也是8位机16位地址总线宽度，设计最大寻址范围也是64Kb，每页128字节，IAP操作以页为单位。整个FLASH被分为数据EEPROM(<code>DATA EEPROM</code>)、配置选项(<code>OPTION BYTES</code>)、代码区(<code>CODE FLASH</code>)。</p>\n<h3 id=\"数据EEPROM-DATA-EEPROM\"><a href=\"#数据EEPROM-DATA-EEPROM\" class=\"headerlink\" title=\"数据EEPROM(DATA EEPROM)\"></a>数据EEPROM(<code>DATA EEPROM</code>)</h3><p>数据EEPROM可以用来存储一些应用数据，如软件版本号、公司或者组织信息、作者信息等等。初始时，为了保证数据安全，在IAP模式下这部分是写保护的。写保护可以通过MASS密码序列解除，此时可向EEPROM中写入数据。</p>\n<h3 id=\"主程序代码区\"><a href=\"#主程序代码区\" class=\"headerlink\" title=\"主程序代码区\"></a>主程序代码区</h3><p>在UBC或者私有代码区(<code>PCODE</code>)里的程序执行完后跳转到存储在这里执行代码。这里一般存的是用户代码。</p>\n<h3 id=\"配置选项-OPTION-BYTES\"><a href=\"#配置选项-OPTION-BYTES\" class=\"headerlink\" title=\"配置选项(OPTION BYTES)\"></a>配置选项(<code>OPTION BYTES</code>)</h3><p>这部分存储的是硬件配置代码，以字节为单位。主要会影响到硬件配置和内存的写保护。这部分的内容可以通过编程器在ICP条件下或者用户代码在IAP条件下改写，<strong>UBC与PCODE不可以更改这部分内容</strong>。</p>\n<h3 id=\"用户启动代码区-UBC\"><a href=\"#用户启动代码区-UBC\" class=\"headerlink\" title=\"用户启动代码区(UBC)\"></a>用户启动代码区(<code>UBC</code>)</h3><p>这个区域里包含用户IAP升级程序和各类中断向量，芯片在复位时会从RESET中断跳转到执行bootloader代码(这部分代码ST官方提供，用户也可以编写自己的bootloader)。UBC无法通过IAP改写，因为UBC拥有一个更强的二级写保护，这个写保护无法通过MASS密码序列解锁。因此更改这部分的代码只能通过ICP模式(使用 SWIM 接口)。通过配置选项(<code>OPTION BYTES</code>)，可以设置UBC的大小(以页为单位)。</p>\n<h3 id=\"私有代码区-PCODE\"><a href=\"#私有代码区-PCODE\" class=\"headerlink\" title=\"私有代码区(PCODE)\"></a><em>私有代码区(<code>PCODE</code>)</em></h3><p>这部分不是所有型号的STM8芯片都存在的，具体是否有这部分，请参阅所使用芯片的datesheet。PCODE用来存放一些用以驱动硬件的私有代码库。可以在ICP模式下通过<code>PCODESIZE</code>配置选项配置其打下，一旦配置完成无法擦除，相应的PCODE区的大小也就固定不可更改了。</p>\n<p><em>以上只是一些简单的概要，详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\">STM8L 用户指南</a></strong></p>\n"},{"title":"STM8复位(reset)","toc":true,"date":"2016-08-08T14:12:15.000Z","_content":"一款芯片，复位的重要性我认为不亚于其他任何一个单元模块。同时，开发固件时，对芯片的复位条件、复位源、复位后的系统状态的掌握直接决定后面系统工作的可靠性。\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/%E5%A4%8D%E4%BD%8D.jpg\"></center>\n### 复位源\nSTM8复位源总共是6类，除了外部复位管脚提供的两种复位源(`NRST`和`SWIM REST`)，还有上下电(`POR\\PDR`)复位、独立看门狗(`IWDG`)复位、窗口看门狗(`WWDG`)复位、非法配置选项复位(`ILLOP`)。STM8的用户指南里对各个部分的外设的复位状态有明确的说明，例如大部分IO口复位之后都是浮动输入模式，但也有少数例外，使用时应该时刻注意复位状态对系统可能的影响。\n\n### 复位状态与正在复位状态\n当复位源触发芯片复位后，芯片将进入一个复位期，这段时间里，芯片处在正在复位状态，完成硬件的初始化(默认复位状态),随后将跳转到复位向量处。在正在复位状态下，因为硬件可能没有复位到\"复位状态\"，一些管脚的状态值可能会和手册中的\"复位值\"不同。\n\n### 复位管脚`NRST`\n当这个管脚上出现一个不低于300ns的低电平时，将产生复位新号。这个管脚同时可以当做普通IO来使用，以此来提高可利用IO口数量。处于安全考虑，通过向`RTS_CR`寄存器写入`0xD0`将复位管家配置成O口，只在复位之后得第一次设置时有效。\n\n### 上下电(`POR\\PDR`)复位\n当系统电源V<sub>DD</sub>上的电压从工作电压跌至低于下电阈值时产生下电复位，反之产生上电复位。并且在复位寄存器`RST_SR`中置起相应标志位。\n\n### 窗口看门狗(`WWDG`)复位\n这个看门狗必须在窗口内喂狗，否则当计数器减至`0x3F`时产生内部复位。\n\n### 独立看门狗(`IWDG`)复位\n减计数看门狗，设定的时间间隔内不喂狗，产生复位新号。\n\n*以上只是一些简单的概要，详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)**","source":"_posts/STM8-REST.md","raw":"---\ntitle: STM8复位(reset)\ntoc: true\ndate: 2016-08-08 14:12:15\ncategories: STM8\ntags: STM8\n---\n一款芯片，复位的重要性我认为不亚于其他任何一个单元模块。同时，开发固件时，对芯片的复位条件、复位源、复位后的系统状态的掌握直接决定后面系统工作的可靠性。\n<center><img src=\"http://obd6jz6in.bkt.clouddn.com/%E5%A4%8D%E4%BD%8D.jpg\"></center>\n### 复位源\nSTM8复位源总共是6类，除了外部复位管脚提供的两种复位源(`NRST`和`SWIM REST`)，还有上下电(`POR\\PDR`)复位、独立看门狗(`IWDG`)复位、窗口看门狗(`WWDG`)复位、非法配置选项复位(`ILLOP`)。STM8的用户指南里对各个部分的外设的复位状态有明确的说明，例如大部分IO口复位之后都是浮动输入模式，但也有少数例外，使用时应该时刻注意复位状态对系统可能的影响。\n\n### 复位状态与正在复位状态\n当复位源触发芯片复位后，芯片将进入一个复位期，这段时间里，芯片处在正在复位状态，完成硬件的初始化(默认复位状态),随后将跳转到复位向量处。在正在复位状态下，因为硬件可能没有复位到\"复位状态\"，一些管脚的状态值可能会和手册中的\"复位值\"不同。\n\n### 复位管脚`NRST`\n当这个管脚上出现一个不低于300ns的低电平时，将产生复位新号。这个管脚同时可以当做普通IO来使用，以此来提高可利用IO口数量。处于安全考虑，通过向`RTS_CR`寄存器写入`0xD0`将复位管家配置成O口，只在复位之后得第一次设置时有效。\n\n### 上下电(`POR\\PDR`)复位\n当系统电源V<sub>DD</sub>上的电压从工作电压跌至低于下电阈值时产生下电复位，反之产生上电复位。并且在复位寄存器`RST_SR`中置起相应标志位。\n\n### 窗口看门狗(`WWDG`)复位\n这个看门狗必须在窗口内喂狗，否则当计数器减至`0x3F`时产生内部复位。\n\n### 独立看门狗(`IWDG`)复位\n减计数看门狗，设定的时间间隔内不喂狗，产生复位新号。\n\n*以上只是一些简单的概要，详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)**","slug":"STM8-REST","published":1,"updated":"2016-08-08T08:38:33.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9ao6001270g57g4v8bn4","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>一款芯片，复位的重要性我认为不亚于其他任何一个单元模块。同时，开发固件时，对芯片的复位条件、复位源、复位后的系统状态的掌握直接决定后面系统工作的可靠性。</p>\n<p><center><img src=\"http://obd6jz6in.bkt.clouddn.com/%E5%A4%8D%E4%BD%8D.jpg\"></center></p>\n<h3 id=\"复位源\"><a href=\"#复位源\" class=\"headerlink\" title=\"复位源\"></a>复位源</h3><p>STM8复位源总共是6类，除了外部复位管脚提供的两种复位源(<code>NRST</code>和<code>SWIM REST</code>)，还有上下电(<code>POR\\PDR</code>)复位、独立看门狗(<code>IWDG</code>)复位、窗口看门狗(<code>WWDG</code>)复位、非法配置选项复位(<code>ILLOP</code>)。STM8的用户指南里对各个部分的外设的复位状态有明确的说明，例如大部分IO口复位之后都是浮动输入模式，但也有少数例外，使用时应该时刻注意复位状态对系统可能的影响。</p>\n<h3 id=\"复位状态与正在复位状态\"><a href=\"#复位状态与正在复位状态\" class=\"headerlink\" title=\"复位状态与正在复位状态\"></a>复位状态与正在复位状态</h3><p>当复位源触发芯片复位后，芯片将进入一个复位期，这段时间里，芯片处在正在复位状态，完成硬件的初始化(默认复位状态),随后将跳转到复位向量处。在正在复位状态下，因为硬件可能没有复位到”复位状态”，一些管脚的状态值可能会和手册中的”复位值”不同。</p>\n<h3 id=\"复位管脚NRST\"><a href=\"#复位管脚NRST\" class=\"headerlink\" title=\"复位管脚NRST\"></a>复位管脚<code>NRST</code></h3><p>当这个管脚上出现一个不低于300ns的低电平时，将产生复位新号。这个管脚同时可以当做普通IO来使用，以此来提高可利用IO口数量。处于安全考虑，通过向<code>RTS_CR</code>寄存器写入<code>0xD0</code>将复位管家配置成O口，只在复位之后得第一次设置时有效。</p>\n<h3 id=\"上下电-POR-PDR-复位\"><a href=\"#上下电-POR-PDR-复位\" class=\"headerlink\" title=\"上下电(POR\\PDR)复位\"></a>上下电(<code>POR\\PDR</code>)复位</h3><p>当系统电源V<sub>DD</sub>上的电压从工作电压跌至低于下电阈值时产生下电复位，反之产生上电复位。并且在复位寄存器<code>RST_SR</code>中置起相应标志位。</p>\n<h3 id=\"窗口看门狗-WWDG-复位\"><a href=\"#窗口看门狗-WWDG-复位\" class=\"headerlink\" title=\"窗口看门狗(WWDG)复位\"></a>窗口看门狗(<code>WWDG</code>)复位</h3><p>这个看门狗必须在窗口内喂狗，否则当计数器减至<code>0x3F</code>时产生内部复位。</p>\n<h3 id=\"独立看门狗-IWDG-复位\"><a href=\"#独立看门狗-IWDG-复位\" class=\"headerlink\" title=\"独立看门狗(IWDG)复位\"></a>独立看门狗(<code>IWDG</code>)复位</h3><p>减计数看门狗，设定的时间间隔内不喂狗，产生复位新号。</p>\n<p><em>以上只是一些简单的概要，详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\" target=\"_blank\" rel=\"external\">STM8L 用户指南</a></strong></p>\n","excerpt":"","more":"<p>一款芯片，复位的重要性我认为不亚于其他任何一个单元模块。同时，开发固件时，对芯片的复位条件、复位源、复位后的系统状态的掌握直接决定后面系统工作的可靠性。</p>\n<p><center><img src=\"http://obd6jz6in.bkt.clouddn.com/%E5%A4%8D%E4%BD%8D.jpg\"></center></p>\n<h3 id=\"复位源\"><a href=\"#复位源\" class=\"headerlink\" title=\"复位源\"></a>复位源</h3><p>STM8复位源总共是6类，除了外部复位管脚提供的两种复位源(<code>NRST</code>和<code>SWIM REST</code>)，还有上下电(<code>POR\\PDR</code>)复位、独立看门狗(<code>IWDG</code>)复位、窗口看门狗(<code>WWDG</code>)复位、非法配置选项复位(<code>ILLOP</code>)。STM8的用户指南里对各个部分的外设的复位状态有明确的说明，例如大部分IO口复位之后都是浮动输入模式，但也有少数例外，使用时应该时刻注意复位状态对系统可能的影响。</p>\n<h3 id=\"复位状态与正在复位状态\"><a href=\"#复位状态与正在复位状态\" class=\"headerlink\" title=\"复位状态与正在复位状态\"></a>复位状态与正在复位状态</h3><p>当复位源触发芯片复位后，芯片将进入一个复位期，这段时间里，芯片处在正在复位状态，完成硬件的初始化(默认复位状态),随后将跳转到复位向量处。在正在复位状态下，因为硬件可能没有复位到”复位状态”，一些管脚的状态值可能会和手册中的”复位值”不同。</p>\n<h3 id=\"复位管脚NRST\"><a href=\"#复位管脚NRST\" class=\"headerlink\" title=\"复位管脚NRST\"></a>复位管脚<code>NRST</code></h3><p>当这个管脚上出现一个不低于300ns的低电平时，将产生复位新号。这个管脚同时可以当做普通IO来使用，以此来提高可利用IO口数量。处于安全考虑，通过向<code>RTS_CR</code>寄存器写入<code>0xD0</code>将复位管家配置成O口，只在复位之后得第一次设置时有效。</p>\n<h3 id=\"上下电-POR-PDR-复位\"><a href=\"#上下电-POR-PDR-复位\" class=\"headerlink\" title=\"上下电(POR\\PDR)复位\"></a>上下电(<code>POR\\PDR</code>)复位</h3><p>当系统电源V<sub>DD</sub>上的电压从工作电压跌至低于下电阈值时产生下电复位，反之产生上电复位。并且在复位寄存器<code>RST_SR</code>中置起相应标志位。</p>\n<h3 id=\"窗口看门狗-WWDG-复位\"><a href=\"#窗口看门狗-WWDG-复位\" class=\"headerlink\" title=\"窗口看门狗(WWDG)复位\"></a>窗口看门狗(<code>WWDG</code>)复位</h3><p>这个看门狗必须在窗口内喂狗，否则当计数器减至<code>0x3F</code>时产生内部复位。</p>\n<h3 id=\"独立看门狗-IWDG-复位\"><a href=\"#独立看门狗-IWDG-复位\" class=\"headerlink\" title=\"独立看门狗(IWDG)复位\"></a>独立看门狗(<code>IWDG</code>)复位</h3><p>减计数看门狗，设定的时间间隔内不喂狗，产生复位新号。</p>\n<p><em>以上只是一些简单的概要，详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\">STM8L 用户指南</a></strong></p>\n"},{"title":"STM8概述","toc":true,"date":"2016-08-04T11:32:15.000Z","_content":"## 特性\n> - 电源电压范围：1.8V-3.6V\n- 低功耗：\n\t- 五种低功耗模式\n\t- 动态功耗：与时钟频率相关 200uA/MHz+330uA\n\t- IO漏电流：50nA\n\t- 从停止模式唤醒仅需4.7uS\n- 先进的STM8内核\n\t- 哈佛结构\n\t- 可达到16MIPS\n\t- 多达40个外部中断源\n- 丰富的外设\n\t- DMA\n\t- LCD\n\t- RTC\n\t- ADC\n\t- TIMER\n\t- CLOCK MANAGEMENT\n\t- ...\n\n## <a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/04/STM8/STM8%E4%B9%8BGPIO/\" >GPIO </a>\n## <a href=\"\" >REST </a>\n## <a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/05/STM8/STM8%E4%B9%8BCLOCK/\" >CLOCK </a>\n## <a href=\"\" >Memory </a>\n\n以上只是一些我认为是重点的部分的简单的概要，很多操作都可以通过ST公司提供的库函数完成，这些库函数结构合理使用方便，用户完全可以拿过来使用，因此很多操作的细节了解下就好了，出了BUG知道一个方向去解决，其他的交给库函数吧。\n*详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)**","source":"_posts/STM8-Summarize.md","raw":"---\ntitle: STM8概述\ntoc: true\ndate: 2016-08-04 11:32:15\ncategories: STM8\ntags: STM8\n---\n## 特性\n> - 电源电压范围：1.8V-3.6V\n- 低功耗：\n\t- 五种低功耗模式\n\t- 动态功耗：与时钟频率相关 200uA/MHz+330uA\n\t- IO漏电流：50nA\n\t- 从停止模式唤醒仅需4.7uS\n- 先进的STM8内核\n\t- 哈佛结构\n\t- 可达到16MIPS\n\t- 多达40个外部中断源\n- 丰富的外设\n\t- DMA\n\t- LCD\n\t- RTC\n\t- ADC\n\t- TIMER\n\t- CLOCK MANAGEMENT\n\t- ...\n\n## <a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/04/STM8/STM8%E4%B9%8BGPIO/\" >GPIO </a>\n## <a href=\"\" >REST </a>\n## <a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/05/STM8/STM8%E4%B9%8BCLOCK/\" >CLOCK </a>\n## <a href=\"\" >Memory </a>\n\n以上只是一些我认为是重点的部分的简单的概要，很多操作都可以通过ST公司提供的库函数完成，这些库函数结构合理使用方便，用户完全可以拿过来使用，因此很多操作的细节了解下就好了，出了BUG知道一个方向去解决，其他的交给库函数吧。\n*详细细节见* **[STM8L 用户指南](http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)**","slug":"STM8-Summarize","published":1,"updated":"2016-08-08T08:05:27.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9ao7001470g5jt38ne69","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><blockquote>\n<ul>\n<li>电源电压范围：1.8V-3.6V</li>\n<li>低功耗：<ul>\n<li>五种低功耗模式</li>\n<li>动态功耗：与时钟频率相关 200uA/MHz+330uA</li>\n<li>IO漏电流：50nA</li>\n<li>从停止模式唤醒仅需4.7uS</li>\n</ul>\n</li>\n<li>先进的STM8内核<ul>\n<li>哈佛结构</li>\n<li>可达到16MIPS</li>\n<li>多达40个外部中断源</li>\n</ul>\n</li>\n<li>丰富的外设<ul>\n<li>DMA</li>\n<li>LCD</li>\n<li>RTC</li>\n<li>ADC</li>\n<li>TIMER</li>\n<li>CLOCK MANAGEMENT</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"GPIO\"><a href=\"#GPIO\" class=\"headerlink\" title=\"GPIO \"></a><a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/04/STM8/STM8%E4%B9%8BGPIO/\">GPIO </a></h2><h2 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST \"></a><a href=\"\">REST </a></h2><h2 id=\"CLOCK\"><a href=\"#CLOCK\" class=\"headerlink\" title=\"CLOCK \"></a><a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/05/STM8/STM8%E4%B9%8BCLOCK/\">CLOCK </a></h2><h2 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory \"></a><a href=\"\">Memory </a></h2><p>以上只是一些我认为是重点的部分的简单的概要，很多操作都可以通过ST公司提供的库函数完成，这些库函数结构合理使用方便，用户完全可以拿过来使用，因此很多操作的细节了解下就好了，出了BUG知道一个方向去解决，其他的交给库函数吧。<br><em>详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\" target=\"_blank\" rel=\"external\">STM8L 用户指南</a></strong></p>\n","excerpt":"","more":"<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><blockquote>\n<ul>\n<li>电源电压范围：1.8V-3.6V</li>\n<li>低功耗：<ul>\n<li>五种低功耗模式</li>\n<li>动态功耗：与时钟频率相关 200uA/MHz+330uA</li>\n<li>IO漏电流：50nA</li>\n<li>从停止模式唤醒仅需4.7uS</li>\n</ul>\n</li>\n<li>先进的STM8内核<ul>\n<li>哈佛结构</li>\n<li>可达到16MIPS</li>\n<li>多达40个外部中断源</li>\n</ul>\n</li>\n<li>丰富的外设<ul>\n<li>DMA</li>\n<li>LCD</li>\n<li>RTC</li>\n<li>ADC</li>\n<li>TIMER</li>\n<li>CLOCK MANAGEMENT</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"GPIO\"><a href=\"#GPIO\" class=\"headerlink\" title=\"GPIO \"></a><a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/04/STM8/STM8%E4%B9%8BGPIO/\" >GPIO </a></h2><h2 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST \"></a><a href=\"\" >REST </a></h2><h2 id=\"CLOCK\"><a href=\"#CLOCK\" class=\"headerlink\" title=\"CLOCK \"></a><a href=\"http://www.xn--4gqa63c686ta68iba.ren/2016/08/05/STM8/STM8%E4%B9%8BCLOCK/\" >CLOCK </a></h2><h2 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory \"></a><a href=\"\" >Memory </a></h2><p>以上只是一些我认为是重点的部分的简单的概要，很多操作都可以通过ST公司提供的库函数完成，这些库函数结构合理使用方便，用户完全可以拿过来使用，因此很多操作的细节了解下就好了，出了BUG知道一个方向去解决，其他的交给库函数吧。<br><em>详细细节见</em> <strong><a href=\"http://obd6jz6in.bkt.clouddn.com/STM8L%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\">STM8L 用户指南</a></strong></p>\n"},{"title":"TTL电平,CMOS电平,OC门,OD门基础知识","toc":true,"date":"2016-08-08T18:10:05.000Z","_content":"\n转载: [TTL电平,CMOS电平,OC门,OD门基础知识](http://blog.csdn.net/qq258711519/article/details/10957253)\n\n## TTL\nTTL集成电路的主要型式为晶体管－晶体管逻辑门（transistor-transistor logic gate），TTL大部分都采用5V电源。\n1. 输出高电平Uoh和输出低电平Uol\n\tUoh≥2.4V,Uol≤0.4V\n2. 输入高电平和输入低电平\n\tUih≥2.0V，Uil≤0.8V\n\n## CMOS\nCMOS电路是电压控制器件，输入电阻极大，对于干扰信号十分敏感，因此不用的输入端不应开路，接到地或者电源上。CMOS电路的优点是噪声容限较宽，静态功耗很小。\n\n1. 输出高电平Uoh和输出低电平Uol\n\tUoh≈VCC，Uol≈GND\n\n2. 输入高电平Uoh和输入低电平Uol\n\tUih≥0.7VCC,Uil≤0.2VCC （VCC为电源电压，GND为地）\n\n从上面可以看出:\n在同样5V电源电压情况下，COMS电路可以直接驱动TTL，因为CMOS的输出高电平大于2.0V,输出低电平小于0.8V；而TTL电路则不能直接 驱动CMOS电路，TTL的输出高电平为大于2.4V，如果落在2.4V～3.5V之间，则CMOS电路就不能检测到高电平，低电平小于0.4V满足要 求，所以在TTL电路驱动COMS电路时需要加上拉电阻。如果出现不同电压电源的情况，也可以通过上面的方法进行判断。\n如果电路中出现3.3V的COMS电路去驱动5V CMOS电路的情况，如3.3V单片机去驱动74HC,这种情况有以下几种方法解决，最简单的就是直接将74HC换成74HCT（74系列的输入输出在下 面有介绍）的芯片，因为3.3V CMOS 可以直接驱动5V的TTL电路；或者加电压转换芯片；还有就是把单片机的I/O口设为开漏，然后加上拉电阻到5V，这种情况下得根据实际情况调整电阻的大 小，以保证信号的上升沿时间。\n\n## 74系列简介\n\n74系列可以说是我们平时接触的最多的芯片，74系列中分为很多种，而我们平时用得最多的应该是以下几种：74LS，74HC，74HCT这三种，这三种系列在电平方面的区别如下：\n\n|     型号    | 输入电平      | 输出电平  |\n| ----------- |:-------------:| ---------:|\n| 74LS        | TTL电平       | TTL电平   |\n| 74HC        | COMS电平      | COMS电平  |\n| 74HCT       | TTL电平       | COMS电平  |\n\n\n## TTL和CMOS电平\n\n### TTL电平(什么是TTL电平)\n输出高电平>2.4V,输出低电平<0.4V。在室温下，一般输出高电平是3.5V，输出低电平是0.2V。最小输入高电平和低电平：输入高电平>=2.0V，输入低电平<=0.8V，噪声容限是0.4V。\n\n### CMOS电平 \n\"1\"逻辑电平电压接近于电源电压，\"0\"逻辑电平接近于0V。而且具有很宽的噪声容限。\n\n### 电平转换电路 \n因为TTL和COMS的高低电平的值不一样（ttl 5v<＝＝>cmos 3.3v），所以互相连接时需要电平的转换：就是用两个电阻对电平分压，没有什么高深的东西。\n\n### OC门\n即集电极开路门电路，OD门，即漏极开路门电路，必须外界上拉电阻和电源才能将开关电平作为高低电平用。否则它一般只作为开关大电压和大电流负载，所以又叫做驱动门电路。\n\n### TTL和COMS电路比较\n- TTL电路是电流控制器件，而CMOS电路是电压控制器件。 \n- TTL电路的速度快，传输延迟时间短(5-10ns)，但是功耗大。COMS电路的速度慢，传输延迟时间长(25-50ns),但功耗低。COMS电路本身的功耗与输入信号的脉冲频率有关，频率越高，芯片集越热，这是正常现象。 \n- COMS电路的锁定效应： \n\tCOMS电路由于输入太大的电流，内部的电流急剧增大，除非切断电源，电流一直在增大。这种效应就是锁定效应。当产生锁定效应时，COMS的内部电流能达到40mA以上，很容易烧毁芯片。 \n\t防御措施： \n- 在输入端和输出端加钳位电路，使输入和输出不超过不超过规定电压。 \n- 芯片的电源输入端加去耦电路，防止VDD端出现瞬间的高压。 \n- 在VDD和外电源之间加限流电阻，即使有大的电流也不让它进去。 \n- 当系统由几个电源分别供电时，开关要按下列顺序：开启时，先开启COMS路得电 源，再开启输入信号和负载的电源；关闭时，先关闭输入信号和负载的电源，再关闭COMS电路的电源。\n\n### COMS电路的使用注意事项 \n- COMS电路时电压控制器件，它的输入总抗很大，对干扰信号的捕捉能力很强。所以，不用的管脚不要悬空，要接上拉电阻或者下拉电阻，给它一个恒定的电平。 \n- 输入端接低内阻的信号源时，要在输入端和信号源之间要串联限流电阻，使输入的电流限制在1mA之内。 \n- 当接长信号传输线时，在COMS电路端接匹配电阻。 \n- 当输入端接大电容时，应该在输入端和电容间接保护电阻。电阻值为R=V0/1mA.V0是外界电容上的电压。 \n- COMS的输入电流超过1mA，就有可能烧坏COMS。\n\n### TTL门电路中输入端负载特性(输入端带电阻特殊情况的处理)\n- 悬空时相当于输入端接高电平。因为这时可以看作是输入端接一个无穷大的电阻。 \n- 在门电路输入端串联10K电阻后再输入低电平，输入端出呈现的是高电平而不是低电平。因为由TTL门电路的输入端负载特性可知，只有在输入端接的串联电阻小于910欧时，它输入来的低电平信号才能被门电路识别出来，串联电阻再大的话输入端就一直呈现高电平。这个一定要注意。COMS门电路就不用考虑这些了。\n\nTTL电路有集电极开路OC门，MOS管也有和集电极对应的漏极开路的OD门，它的输出就叫做开漏输出。OC门在截止时有漏电流输出，那就是漏电流，为什么有漏电流呢？那是因为当三极管截止的时候，它的基极电流约等于0，但是并不是真正的为0，经过三极管的集电极的电流也就不是真正的 0，而是约0。而这个就是漏电流。\n\n开漏输出：OC门的输出就是开漏输出；OD门的输出也是开漏输出。它可以吸收很大的电流，但是不能向外输出的电流。所以，为了能输入和输出电流，它使用的时候要跟电源和上拉电阻一齐用。OD门一般作为输出缓冲/驱动器、电平转换器以及满足吸收大负载电流的需要。\n\n### 什么叫做图腾柱，它与开漏电路有什么区别\n\nTTL集成电路中，输出有接上拉三极管的输出叫做图腾柱输出，没有的叫做OC门。因为TTL就是一个三级关，图腾柱也就是两个三级管推挽相连。所以推挽就是图腾。一般图腾式输出，高电平400UA，低电平8MA\nCMOS 器件不用的输入端必须连到高电平或低电平, 这是因为 CMOS 是高输入阻抗器件, 理想状态是没有输入电流的. 如果不用的输入引脚悬空, 很容易感应到干扰信号, 影响芯片的逻辑运行, 甚至静电积累永久性的击穿这个输入端, 造成芯片失效.另外, 只有 4000 系列的 CMOS 器件可以工作在15伏电源下, 74HC, 74HCT 等都只能工作在 5伏电源下, 现在已经有工作在 3伏和 2.5伏电源下的 CMOS 逻辑电路芯片了.\n\nCMOS逻辑电平范围比较大，范围在3～15V，比如4000系列当5V供电时，输出在4.6以上为高电平，输出在0.05V以下为低电平。输入在3.5V以上为高电平，输入在1.5V以下为低电平。\n而对于TTL芯片，供电范围在0～5V，常见都是5V，如74系列5V供电，输出在2.7V以上为高电平，输出在 0.5V以下为低电平，输入在2V以上为高电平，在0.8V以下为低电平。因此，CMOS电路与 TTL电路就有一个电平转换的问题，使两者电平域值能匹配。\n有关逻辑电平的一些概念 ：\n要了解逻辑电平的内容，首先要知道以下几个概念的含义：\n\n输入高电平（Vih）：保证逻辑门的输入为高电平时所允许的最小输入高电平，当输入电平高于Vih时，则认为输入电平为高电平。 \n输入低电平（Vil）：保证逻辑门的输入为低电平时所允许的最大输入低电平，当输入电平低于Vil时，则认为输入电平为低电平。 \n输出高电平（Voh）：保证逻辑门的输出为高电平时的输出电平的最小值，逻辑门的输出为高电平时的电平值都必须大于此Voh。 \n输出低电平（Vol）：保证逻辑门的输出为低电平时的输出电平的最大值，逻辑门的输出为低电平时的电平值都必须小于此Vol。 \n阀值电平(Vt)：数字电路芯片都存在一个阈值电平，就是电路刚刚勉强能翻转动作时的电平。它是一个界于Vil、Vih之间的电压值，对于CMOS电路 的阈值电平，基本上是二分之一的电源电压值，但要保证稳定的输 出，则必须要求输入高电平> Vih，输入低电平<Vil，而如果输入电平在阈值上下，也就是Vil～Vih这个区域，电路的输出会处于不稳定状态。 \n对于一般的逻辑电平，以上参数的关系如下： \n\tVoh > Vih > Vt > Vil > Vol \n\tIoh：逻辑门输出为高电平时的负载电流（为拉电流）。 \n\tIol：逻辑门输出为低电平时的负载电流（为灌电流）。 \n\tIih：逻辑门输入为高电平时的电流（为灌电流）。 \n\tIil：逻辑门输入为低电平时的电流（为拉电流）。\n\n门电路输出极在集成单元内不接负载电阻而直接引出作为输出端，这种形式的门称为开路门。开路的TTL、CMOS、ECL门分别称为集电极开路（OC）、 漏极开路（OD）、发射极开路（OE），使用时应审查是否接上拉电阻（OC、OD门）或下拉电阻（OE门），以及电阻阻值是否合适。对于集电极开路 （OC）门，其上拉电阻阻值RL应满足下面条件：\n\t- RL < （VCC－Voh）/（n*Ioh＋m*Iih）\n\t- RL > （VCC－Vol）/（Iol＋m*Iil）\n其中n：线与的开路门数；m：被驱动的输入端数。\n\n### 常用的逻辑电平\n\n逻辑电平：有TTL、CMOS、LVTTL、ECL、PECL、GTL；RS232、RS422、LVDS等。 \n其中TTL和CMOS的逻辑电平按典型电压可分为四类：5V系列（5V TTL和5V CMOS）、3.3V系列，2.5V系列和1.8V系列。 \n5V TTL和5V CMOS逻辑电平是通用的逻辑电平。 \n3.3V及以下的逻辑电平被称为低电压逻辑电平，常用的为LVTTL电平。 \n低电压的逻辑电平还有2.5V和1.8V两种。 \nECL/PECL和LVDS是差分输入输出。\nRS-422/485和RS-232是串口的接口标准，RS-422/485是差分输入输出，RS-232是单端输入输出。 \nOC门，又称集电极开路（漏极开路）与非门门电路，Open Collector（Open Drain）。\n\n### 为什么引入OC门\n\n实际使用中,有时需要两个或两个以上与非门的输出端连接在同一条导线上，将这些与非门上的数据（状态电平）用同一条导线输送出去。因此，需要一种新的与非门电路--OC门来实现“线与逻辑”。OC门主要用于3个方面:实现与或非逻辑，用做电平转换，用做驱动器。由于OC门电路的输出管的集电极悬空，使用时需外接一个上拉电阻Rp到电源VCC。OC门使用上拉电阻以输出高电平，此外为了加大输出引脚的驱动能力，上拉电阻阻值的选择原则，从降低功耗及芯片的灌电流能力考虑应当足够大；从确保足够的驱动电流考虑应当足够小。线与逻辑，即两个输出端（包括两个以上）直接互连就可以实现“AND”的逻辑功能。在总线传输等实际应用中需要多个门的输出端并联连接使用，而一般 TTL门输出端并不能直接并接使用，否则这些门的输出管之间由于低阻抗形成很大的短路电流（灌电流），而烧坏器件。在硬件上，可用OC门或三态门（ST 门）来实现。用OC门实现线与，应同时在输出端口应加一个上拉电阻。三态门（ST门）主要用在应用于多个门输出共享数据总线，为避免多个门输出同时占用数据总线，这些门的使能信号（EN）中只允许有一个为有效电平（如高电平），由于三态门的输出是推拉式的低阻输出，且不需接上拉（负载）电阻，所以开关速度比OC门快，常用三态门作为输出缓冲器\n\n### 什么是OC、OD？\n\n集电极开路门(集电极开路 OC 或漏极开路 OD)\nOpen-Drain是漏极开路输出的意思，相当于集电极开路(Open-Collector)输出，即TTL中的集电极开路（OC）输出。一般用于线或、线与，也有的用于电流驱动。Open-Drain是对MOS管而言，Open-Collector是对双极型管而言，在用法上没啥区别。\n\n开漏形式的电路有以下几个特点：\n- 利用外部电路的驱动能力，减少IC内部的驱动。 或驱动比芯片电源电压高的负载.\n- 可以将多个开漏输出的Pin，连接到一条线上。通过一只上拉电阻，在不增加任何器件的情况下，形成“与逻辑”关系。这也是I2C，SMBus等总线 判断总线占用状态的原理。如果作为图腾输出必须接上拉电阻。接容性负载时，下降延是芯片内的晶体管，是有源驱动，速度较快；上升延是无源的外接电阻，速度慢。如果要求速度高电阻选择要小，功耗会大。所以负载电阻的选择要兼顾功耗和速度。\n- 可以利用改变上拉电源的电压，改变传输电平。例如加上上拉电阻就可以提供TTL/CMOS电平输出等。\n- 开漏Pin不连接外部的上拉电阻，则只能输出低电平。一般来说，开漏是用来连接不同电平的器件，匹配电平用的。\n\n正常的CMOS输出级是上、下两个管子，把上面的管子去掉就是OPEN-DRAIN了。这种输出的主要目的有两个：电平转换和线与。\n由于漏级开路，所以后级电路必须接一上拉电阻，上拉电阻的电源电压就可以决定输出电平。这样你就可以进行任意电平的转换了。\n线与功能主要用于有多个电路对同一信号进行拉低操作的场合，如果本电路不想拉低，就输出高电平，因为OPEN-DRAIN上面的管子被拿掉，高电平是靠外接的上拉电阻实现的。（而正常的CMOS输出级，如果出现一个输出为高另外一个为低时，等于电源短路。）OPEN-DRAIN提供了灵活的输出方式，但是也有其弱点，就是带来上升沿的延时。因为上升沿是通过外接上拉无源电阻对负载充电，所以当电阻选择小时延时就小，但功耗大；反之延时大功耗小。所以如果对延时有要求，则建议用下降沿输出。","source":"_posts/TTL-CMOS.md","raw":"---\ntitle: TTL电平,CMOS电平,OC门,OD门基础知识\ntoc: true\ndate: 2016-08-08 18:10:05\ncategories: others\ntags: 数字电路\n---\n\n转载: [TTL电平,CMOS电平,OC门,OD门基础知识](http://blog.csdn.net/qq258711519/article/details/10957253)\n\n## TTL\nTTL集成电路的主要型式为晶体管－晶体管逻辑门（transistor-transistor logic gate），TTL大部分都采用5V电源。\n1. 输出高电平Uoh和输出低电平Uol\n\tUoh≥2.4V,Uol≤0.4V\n2. 输入高电平和输入低电平\n\tUih≥2.0V，Uil≤0.8V\n\n## CMOS\nCMOS电路是电压控制器件，输入电阻极大，对于干扰信号十分敏感，因此不用的输入端不应开路，接到地或者电源上。CMOS电路的优点是噪声容限较宽，静态功耗很小。\n\n1. 输出高电平Uoh和输出低电平Uol\n\tUoh≈VCC，Uol≈GND\n\n2. 输入高电平Uoh和输入低电平Uol\n\tUih≥0.7VCC,Uil≤0.2VCC （VCC为电源电压，GND为地）\n\n从上面可以看出:\n在同样5V电源电压情况下，COMS电路可以直接驱动TTL，因为CMOS的输出高电平大于2.0V,输出低电平小于0.8V；而TTL电路则不能直接 驱动CMOS电路，TTL的输出高电平为大于2.4V，如果落在2.4V～3.5V之间，则CMOS电路就不能检测到高电平，低电平小于0.4V满足要 求，所以在TTL电路驱动COMS电路时需要加上拉电阻。如果出现不同电压电源的情况，也可以通过上面的方法进行判断。\n如果电路中出现3.3V的COMS电路去驱动5V CMOS电路的情况，如3.3V单片机去驱动74HC,这种情况有以下几种方法解决，最简单的就是直接将74HC换成74HCT（74系列的输入输出在下 面有介绍）的芯片，因为3.3V CMOS 可以直接驱动5V的TTL电路；或者加电压转换芯片；还有就是把单片机的I/O口设为开漏，然后加上拉电阻到5V，这种情况下得根据实际情况调整电阻的大 小，以保证信号的上升沿时间。\n\n## 74系列简介\n\n74系列可以说是我们平时接触的最多的芯片，74系列中分为很多种，而我们平时用得最多的应该是以下几种：74LS，74HC，74HCT这三种，这三种系列在电平方面的区别如下：\n\n|     型号    | 输入电平      | 输出电平  |\n| ----------- |:-------------:| ---------:|\n| 74LS        | TTL电平       | TTL电平   |\n| 74HC        | COMS电平      | COMS电平  |\n| 74HCT       | TTL电平       | COMS电平  |\n\n\n## TTL和CMOS电平\n\n### TTL电平(什么是TTL电平)\n输出高电平>2.4V,输出低电平<0.4V。在室温下，一般输出高电平是3.5V，输出低电平是0.2V。最小输入高电平和低电平：输入高电平>=2.0V，输入低电平<=0.8V，噪声容限是0.4V。\n\n### CMOS电平 \n\"1\"逻辑电平电压接近于电源电压，\"0\"逻辑电平接近于0V。而且具有很宽的噪声容限。\n\n### 电平转换电路 \n因为TTL和COMS的高低电平的值不一样（ttl 5v<＝＝>cmos 3.3v），所以互相连接时需要电平的转换：就是用两个电阻对电平分压，没有什么高深的东西。\n\n### OC门\n即集电极开路门电路，OD门，即漏极开路门电路，必须外界上拉电阻和电源才能将开关电平作为高低电平用。否则它一般只作为开关大电压和大电流负载，所以又叫做驱动门电路。\n\n### TTL和COMS电路比较\n- TTL电路是电流控制器件，而CMOS电路是电压控制器件。 \n- TTL电路的速度快，传输延迟时间短(5-10ns)，但是功耗大。COMS电路的速度慢，传输延迟时间长(25-50ns),但功耗低。COMS电路本身的功耗与输入信号的脉冲频率有关，频率越高，芯片集越热，这是正常现象。 \n- COMS电路的锁定效应： \n\tCOMS电路由于输入太大的电流，内部的电流急剧增大，除非切断电源，电流一直在增大。这种效应就是锁定效应。当产生锁定效应时，COMS的内部电流能达到40mA以上，很容易烧毁芯片。 \n\t防御措施： \n- 在输入端和输出端加钳位电路，使输入和输出不超过不超过规定电压。 \n- 芯片的电源输入端加去耦电路，防止VDD端出现瞬间的高压。 \n- 在VDD和外电源之间加限流电阻，即使有大的电流也不让它进去。 \n- 当系统由几个电源分别供电时，开关要按下列顺序：开启时，先开启COMS路得电 源，再开启输入信号和负载的电源；关闭时，先关闭输入信号和负载的电源，再关闭COMS电路的电源。\n\n### COMS电路的使用注意事项 \n- COMS电路时电压控制器件，它的输入总抗很大，对干扰信号的捕捉能力很强。所以，不用的管脚不要悬空，要接上拉电阻或者下拉电阻，给它一个恒定的电平。 \n- 输入端接低内阻的信号源时，要在输入端和信号源之间要串联限流电阻，使输入的电流限制在1mA之内。 \n- 当接长信号传输线时，在COMS电路端接匹配电阻。 \n- 当输入端接大电容时，应该在输入端和电容间接保护电阻。电阻值为R=V0/1mA.V0是外界电容上的电压。 \n- COMS的输入电流超过1mA，就有可能烧坏COMS。\n\n### TTL门电路中输入端负载特性(输入端带电阻特殊情况的处理)\n- 悬空时相当于输入端接高电平。因为这时可以看作是输入端接一个无穷大的电阻。 \n- 在门电路输入端串联10K电阻后再输入低电平，输入端出呈现的是高电平而不是低电平。因为由TTL门电路的输入端负载特性可知，只有在输入端接的串联电阻小于910欧时，它输入来的低电平信号才能被门电路识别出来，串联电阻再大的话输入端就一直呈现高电平。这个一定要注意。COMS门电路就不用考虑这些了。\n\nTTL电路有集电极开路OC门，MOS管也有和集电极对应的漏极开路的OD门，它的输出就叫做开漏输出。OC门在截止时有漏电流输出，那就是漏电流，为什么有漏电流呢？那是因为当三极管截止的时候，它的基极电流约等于0，但是并不是真正的为0，经过三极管的集电极的电流也就不是真正的 0，而是约0。而这个就是漏电流。\n\n开漏输出：OC门的输出就是开漏输出；OD门的输出也是开漏输出。它可以吸收很大的电流，但是不能向外输出的电流。所以，为了能输入和输出电流，它使用的时候要跟电源和上拉电阻一齐用。OD门一般作为输出缓冲/驱动器、电平转换器以及满足吸收大负载电流的需要。\n\n### 什么叫做图腾柱，它与开漏电路有什么区别\n\nTTL集成电路中，输出有接上拉三极管的输出叫做图腾柱输出，没有的叫做OC门。因为TTL就是一个三级关，图腾柱也就是两个三级管推挽相连。所以推挽就是图腾。一般图腾式输出，高电平400UA，低电平8MA\nCMOS 器件不用的输入端必须连到高电平或低电平, 这是因为 CMOS 是高输入阻抗器件, 理想状态是没有输入电流的. 如果不用的输入引脚悬空, 很容易感应到干扰信号, 影响芯片的逻辑运行, 甚至静电积累永久性的击穿这个输入端, 造成芯片失效.另外, 只有 4000 系列的 CMOS 器件可以工作在15伏电源下, 74HC, 74HCT 等都只能工作在 5伏电源下, 现在已经有工作在 3伏和 2.5伏电源下的 CMOS 逻辑电路芯片了.\n\nCMOS逻辑电平范围比较大，范围在3～15V，比如4000系列当5V供电时，输出在4.6以上为高电平，输出在0.05V以下为低电平。输入在3.5V以上为高电平，输入在1.5V以下为低电平。\n而对于TTL芯片，供电范围在0～5V，常见都是5V，如74系列5V供电，输出在2.7V以上为高电平，输出在 0.5V以下为低电平，输入在2V以上为高电平，在0.8V以下为低电平。因此，CMOS电路与 TTL电路就有一个电平转换的问题，使两者电平域值能匹配。\n有关逻辑电平的一些概念 ：\n要了解逻辑电平的内容，首先要知道以下几个概念的含义：\n\n输入高电平（Vih）：保证逻辑门的输入为高电平时所允许的最小输入高电平，当输入电平高于Vih时，则认为输入电平为高电平。 \n输入低电平（Vil）：保证逻辑门的输入为低电平时所允许的最大输入低电平，当输入电平低于Vil时，则认为输入电平为低电平。 \n输出高电平（Voh）：保证逻辑门的输出为高电平时的输出电平的最小值，逻辑门的输出为高电平时的电平值都必须大于此Voh。 \n输出低电平（Vol）：保证逻辑门的输出为低电平时的输出电平的最大值，逻辑门的输出为低电平时的电平值都必须小于此Vol。 \n阀值电平(Vt)：数字电路芯片都存在一个阈值电平，就是电路刚刚勉强能翻转动作时的电平。它是一个界于Vil、Vih之间的电压值，对于CMOS电路 的阈值电平，基本上是二分之一的电源电压值，但要保证稳定的输 出，则必须要求输入高电平> Vih，输入低电平<Vil，而如果输入电平在阈值上下，也就是Vil～Vih这个区域，电路的输出会处于不稳定状态。 \n对于一般的逻辑电平，以上参数的关系如下： \n\tVoh > Vih > Vt > Vil > Vol \n\tIoh：逻辑门输出为高电平时的负载电流（为拉电流）。 \n\tIol：逻辑门输出为低电平时的负载电流（为灌电流）。 \n\tIih：逻辑门输入为高电平时的电流（为灌电流）。 \n\tIil：逻辑门输入为低电平时的电流（为拉电流）。\n\n门电路输出极在集成单元内不接负载电阻而直接引出作为输出端，这种形式的门称为开路门。开路的TTL、CMOS、ECL门分别称为集电极开路（OC）、 漏极开路（OD）、发射极开路（OE），使用时应审查是否接上拉电阻（OC、OD门）或下拉电阻（OE门），以及电阻阻值是否合适。对于集电极开路 （OC）门，其上拉电阻阻值RL应满足下面条件：\n\t- RL < （VCC－Voh）/（n*Ioh＋m*Iih）\n\t- RL > （VCC－Vol）/（Iol＋m*Iil）\n其中n：线与的开路门数；m：被驱动的输入端数。\n\n### 常用的逻辑电平\n\n逻辑电平：有TTL、CMOS、LVTTL、ECL、PECL、GTL；RS232、RS422、LVDS等。 \n其中TTL和CMOS的逻辑电平按典型电压可分为四类：5V系列（5V TTL和5V CMOS）、3.3V系列，2.5V系列和1.8V系列。 \n5V TTL和5V CMOS逻辑电平是通用的逻辑电平。 \n3.3V及以下的逻辑电平被称为低电压逻辑电平，常用的为LVTTL电平。 \n低电压的逻辑电平还有2.5V和1.8V两种。 \nECL/PECL和LVDS是差分输入输出。\nRS-422/485和RS-232是串口的接口标准，RS-422/485是差分输入输出，RS-232是单端输入输出。 \nOC门，又称集电极开路（漏极开路）与非门门电路，Open Collector（Open Drain）。\n\n### 为什么引入OC门\n\n实际使用中,有时需要两个或两个以上与非门的输出端连接在同一条导线上，将这些与非门上的数据（状态电平）用同一条导线输送出去。因此，需要一种新的与非门电路--OC门来实现“线与逻辑”。OC门主要用于3个方面:实现与或非逻辑，用做电平转换，用做驱动器。由于OC门电路的输出管的集电极悬空，使用时需外接一个上拉电阻Rp到电源VCC。OC门使用上拉电阻以输出高电平，此外为了加大输出引脚的驱动能力，上拉电阻阻值的选择原则，从降低功耗及芯片的灌电流能力考虑应当足够大；从确保足够的驱动电流考虑应当足够小。线与逻辑，即两个输出端（包括两个以上）直接互连就可以实现“AND”的逻辑功能。在总线传输等实际应用中需要多个门的输出端并联连接使用，而一般 TTL门输出端并不能直接并接使用，否则这些门的输出管之间由于低阻抗形成很大的短路电流（灌电流），而烧坏器件。在硬件上，可用OC门或三态门（ST 门）来实现。用OC门实现线与，应同时在输出端口应加一个上拉电阻。三态门（ST门）主要用在应用于多个门输出共享数据总线，为避免多个门输出同时占用数据总线，这些门的使能信号（EN）中只允许有一个为有效电平（如高电平），由于三态门的输出是推拉式的低阻输出，且不需接上拉（负载）电阻，所以开关速度比OC门快，常用三态门作为输出缓冲器\n\n### 什么是OC、OD？\n\n集电极开路门(集电极开路 OC 或漏极开路 OD)\nOpen-Drain是漏极开路输出的意思，相当于集电极开路(Open-Collector)输出，即TTL中的集电极开路（OC）输出。一般用于线或、线与，也有的用于电流驱动。Open-Drain是对MOS管而言，Open-Collector是对双极型管而言，在用法上没啥区别。\n\n开漏形式的电路有以下几个特点：\n- 利用外部电路的驱动能力，减少IC内部的驱动。 或驱动比芯片电源电压高的负载.\n- 可以将多个开漏输出的Pin，连接到一条线上。通过一只上拉电阻，在不增加任何器件的情况下，形成“与逻辑”关系。这也是I2C，SMBus等总线 判断总线占用状态的原理。如果作为图腾输出必须接上拉电阻。接容性负载时，下降延是芯片内的晶体管，是有源驱动，速度较快；上升延是无源的外接电阻，速度慢。如果要求速度高电阻选择要小，功耗会大。所以负载电阻的选择要兼顾功耗和速度。\n- 可以利用改变上拉电源的电压，改变传输电平。例如加上上拉电阻就可以提供TTL/CMOS电平输出等。\n- 开漏Pin不连接外部的上拉电阻，则只能输出低电平。一般来说，开漏是用来连接不同电平的器件，匹配电平用的。\n\n正常的CMOS输出级是上、下两个管子，把上面的管子去掉就是OPEN-DRAIN了。这种输出的主要目的有两个：电平转换和线与。\n由于漏级开路，所以后级电路必须接一上拉电阻，上拉电阻的电源电压就可以决定输出电平。这样你就可以进行任意电平的转换了。\n线与功能主要用于有多个电路对同一信号进行拉低操作的场合，如果本电路不想拉低，就输出高电平，因为OPEN-DRAIN上面的管子被拿掉，高电平是靠外接的上拉电阻实现的。（而正常的CMOS输出级，如果出现一个输出为高另外一个为低时，等于电源短路。）OPEN-DRAIN提供了灵活的输出方式，但是也有其弱点，就是带来上升沿的延时。因为上升沿是通过外接上拉无源电阻对负载充电，所以当电阻选择小时延时就小，但功耗大；反之延时大功耗小。所以如果对延时有要求，则建议用下降沿输出。","slug":"TTL-CMOS","published":1,"updated":"2016-08-08T10:38:43.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9aob001870g5aj96rrbe","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>转载: <a href=\"http://blog.csdn.net/qq258711519/article/details/10957253\" target=\"_blank\" rel=\"external\">TTL电平,CMOS电平,OC门,OD门基础知识</a></p>\n<h2 id=\"TTL\"><a href=\"#TTL\" class=\"headerlink\" title=\"TTL\"></a>TTL</h2><p>TTL集成电路的主要型式为晶体管－晶体管逻辑门（transistor-transistor logic gate），TTL大部分都采用5V电源。</p>\n<ol>\n<li>输出高电平Uoh和输出低电平Uol<br> Uoh≥2.4V,Uol≤0.4V</li>\n<li>输入高电平和输入低电平<br> Uih≥2.0V，Uil≤0.8V</li>\n</ol>\n<h2 id=\"CMOS\"><a href=\"#CMOS\" class=\"headerlink\" title=\"CMOS\"></a>CMOS</h2><p>CMOS电路是电压控制器件，输入电阻极大，对于干扰信号十分敏感，因此不用的输入端不应开路，接到地或者电源上。CMOS电路的优点是噪声容限较宽，静态功耗很小。</p>\n<ol>\n<li><p>输出高电平Uoh和输出低电平Uol<br> Uoh≈VCC，Uol≈GND</p>\n</li>\n<li><p>输入高电平Uoh和输入低电平Uol<br> Uih≥0.7VCC,Uil≤0.2VCC （VCC为电源电压，GND为地）</p>\n</li>\n</ol>\n<p>从上面可以看出:<br>在同样5V电源电压情况下，COMS电路可以直接驱动TTL，因为CMOS的输出高电平大于2.0V,输出低电平小于0.8V；而TTL电路则不能直接 驱动CMOS电路，TTL的输出高电平为大于2.4V，如果落在2.4V～3.5V之间，则CMOS电路就不能检测到高电平，低电平小于0.4V满足要 求，所以在TTL电路驱动COMS电路时需要加上拉电阻。如果出现不同电压电源的情况，也可以通过上面的方法进行判断。<br>如果电路中出现3.3V的COMS电路去驱动5V CMOS电路的情况，如3.3V单片机去驱动74HC,这种情况有以下几种方法解决，最简单的就是直接将74HC换成74HCT（74系列的输入输出在下 面有介绍）的芯片，因为3.3V CMOS 可以直接驱动5V的TTL电路；或者加电压转换芯片；还有就是把单片机的I/O口设为开漏，然后加上拉电阻到5V，这种情况下得根据实际情况调整电阻的大 小，以保证信号的上升沿时间。</p>\n<h2 id=\"74系列简介\"><a href=\"#74系列简介\" class=\"headerlink\" title=\"74系列简介\"></a>74系列简介</h2><p>74系列可以说是我们平时接触的最多的芯片，74系列中分为很多种，而我们平时用得最多的应该是以下几种：74LS，74HC，74HCT这三种，这三种系列在电平方面的区别如下：</p>\n<table>\n<thead>\n<tr>\n<th>型号</th>\n<th style=\"text-align:center\">输入电平</th>\n<th style=\"text-align:right\">输出电平</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>74LS</td>\n<td style=\"text-align:center\">TTL电平</td>\n<td style=\"text-align:right\">TTL电平</td>\n</tr>\n<tr>\n<td>74HC</td>\n<td style=\"text-align:center\">COMS电平</td>\n<td style=\"text-align:right\">COMS电平</td>\n</tr>\n<tr>\n<td>74HCT</td>\n<td style=\"text-align:center\">TTL电平</td>\n<td style=\"text-align:right\">COMS电平</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TTL和CMOS电平\"><a href=\"#TTL和CMOS电平\" class=\"headerlink\" title=\"TTL和CMOS电平\"></a>TTL和CMOS电平</h2><h3 id=\"TTL电平-什么是TTL电平\"><a href=\"#TTL电平-什么是TTL电平\" class=\"headerlink\" title=\"TTL电平(什么是TTL电平)\"></a>TTL电平(什么是TTL电平)</h3><p>输出高电平&gt;2.4V,输出低电平<0.4v。在室温下，一般输出高电平是3.5v，输出低电平是0.2v。最小输入高电平和低电平：输入高电平>=2.0V，输入低电平&lt;=0.8V，噪声容限是0.4V。</0.4v。在室温下，一般输出高电平是3.5v，输出低电平是0.2v。最小输入高电平和低电平：输入高电平></p>\n<h3 id=\"CMOS电平\"><a href=\"#CMOS电平\" class=\"headerlink\" title=\"CMOS电平\"></a>CMOS电平</h3><p>“1”逻辑电平电压接近于电源电压，”0”逻辑电平接近于0V。而且具有很宽的噪声容限。</p>\n<h3 id=\"电平转换电路\"><a href=\"#电平转换电路\" class=\"headerlink\" title=\"电平转换电路\"></a>电平转换电路</h3><p>因为TTL和COMS的高低电平的值不一样（ttl 5v&lt;＝＝&gt;cmos 3.3v），所以互相连接时需要电平的转换：就是用两个电阻对电平分压，没有什么高深的东西。</p>\n<h3 id=\"OC门\"><a href=\"#OC门\" class=\"headerlink\" title=\"OC门\"></a>OC门</h3><p>即集电极开路门电路，OD门，即漏极开路门电路，必须外界上拉电阻和电源才能将开关电平作为高低电平用。否则它一般只作为开关大电压和大电流负载，所以又叫做驱动门电路。</p>\n<h3 id=\"TTL和COMS电路比较\"><a href=\"#TTL和COMS电路比较\" class=\"headerlink\" title=\"TTL和COMS电路比较\"></a>TTL和COMS电路比较</h3><ul>\n<li>TTL电路是电流控制器件，而CMOS电路是电压控制器件。 </li>\n<li>TTL电路的速度快，传输延迟时间短(5-10ns)，但是功耗大。COMS电路的速度慢，传输延迟时间长(25-50ns),但功耗低。COMS电路本身的功耗与输入信号的脉冲频率有关，频率越高，芯片集越热，这是正常现象。 </li>\n<li>COMS电路的锁定效应：<br>  COMS电路由于输入太大的电流，内部的电流急剧增大，除非切断电源，电流一直在增大。这种效应就是锁定效应。当产生锁定效应时，COMS的内部电流能达到40mA以上，很容易烧毁芯片。<br>  防御措施： </li>\n<li>在输入端和输出端加钳位电路，使输入和输出不超过不超过规定电压。 </li>\n<li>芯片的电源输入端加去耦电路，防止VDD端出现瞬间的高压。 </li>\n<li>在VDD和外电源之间加限流电阻，即使有大的电流也不让它进去。 </li>\n<li>当系统由几个电源分别供电时，开关要按下列顺序：开启时，先开启COMS路得电 源，再开启输入信号和负载的电源；关闭时，先关闭输入信号和负载的电源，再关闭COMS电路的电源。</li>\n</ul>\n<h3 id=\"COMS电路的使用注意事项\"><a href=\"#COMS电路的使用注意事项\" class=\"headerlink\" title=\"COMS电路的使用注意事项\"></a>COMS电路的使用注意事项</h3><ul>\n<li>COMS电路时电压控制器件，它的输入总抗很大，对干扰信号的捕捉能力很强。所以，不用的管脚不要悬空，要接上拉电阻或者下拉电阻，给它一个恒定的电平。 </li>\n<li>输入端接低内阻的信号源时，要在输入端和信号源之间要串联限流电阻，使输入的电流限制在1mA之内。 </li>\n<li>当接长信号传输线时，在COMS电路端接匹配电阻。 </li>\n<li>当输入端接大电容时，应该在输入端和电容间接保护电阻。电阻值为R=V0/1mA.V0是外界电容上的电压。 </li>\n<li>COMS的输入电流超过1mA，就有可能烧坏COMS。</li>\n</ul>\n<h3 id=\"TTL门电路中输入端负载特性-输入端带电阻特殊情况的处理\"><a href=\"#TTL门电路中输入端负载特性-输入端带电阻特殊情况的处理\" class=\"headerlink\" title=\"TTL门电路中输入端负载特性(输入端带电阻特殊情况的处理)\"></a>TTL门电路中输入端负载特性(输入端带电阻特殊情况的处理)</h3><ul>\n<li>悬空时相当于输入端接高电平。因为这时可以看作是输入端接一个无穷大的电阻。 </li>\n<li>在门电路输入端串联10K电阻后再输入低电平，输入端出呈现的是高电平而不是低电平。因为由TTL门电路的输入端负载特性可知，只有在输入端接的串联电阻小于910欧时，它输入来的低电平信号才能被门电路识别出来，串联电阻再大的话输入端就一直呈现高电平。这个一定要注意。COMS门电路就不用考虑这些了。</li>\n</ul>\n<p>TTL电路有集电极开路OC门，MOS管也有和集电极对应的漏极开路的OD门，它的输出就叫做开漏输出。OC门在截止时有漏电流输出，那就是漏电流，为什么有漏电流呢？那是因为当三极管截止的时候，它的基极电流约等于0，但是并不是真正的为0，经过三极管的集电极的电流也就不是真正的 0，而是约0。而这个就是漏电流。</p>\n<p>开漏输出：OC门的输出就是开漏输出；OD门的输出也是开漏输出。它可以吸收很大的电流，但是不能向外输出的电流。所以，为了能输入和输出电流，它使用的时候要跟电源和上拉电阻一齐用。OD门一般作为输出缓冲/驱动器、电平转换器以及满足吸收大负载电流的需要。</p>\n<h3 id=\"什么叫做图腾柱，它与开漏电路有什么区别\"><a href=\"#什么叫做图腾柱，它与开漏电路有什么区别\" class=\"headerlink\" title=\"什么叫做图腾柱，它与开漏电路有什么区别\"></a>什么叫做图腾柱，它与开漏电路有什么区别</h3><p>TTL集成电路中，输出有接上拉三极管的输出叫做图腾柱输出，没有的叫做OC门。因为TTL就是一个三级关，图腾柱也就是两个三级管推挽相连。所以推挽就是图腾。一般图腾式输出，高电平400UA，低电平8MA<br>CMOS 器件不用的输入端必须连到高电平或低电平, 这是因为 CMOS 是高输入阻抗器件, 理想状态是没有输入电流的. 如果不用的输入引脚悬空, 很容易感应到干扰信号, 影响芯片的逻辑运行, 甚至静电积累永久性的击穿这个输入端, 造成芯片失效.另外, 只有 4000 系列的 CMOS 器件可以工作在15伏电源下, 74HC, 74HCT 等都只能工作在 5伏电源下, 现在已经有工作在 3伏和 2.5伏电源下的 CMOS 逻辑电路芯片了.</p>\n<p>CMOS逻辑电平范围比较大，范围在3～15V，比如4000系列当5V供电时，输出在4.6以上为高电平，输出在0.05V以下为低电平。输入在3.5V以上为高电平，输入在1.5V以下为低电平。<br>而对于TTL芯片，供电范围在0～5V，常见都是5V，如74系列5V供电，输出在2.7V以上为高电平，输出在 0.5V以下为低电平，输入在2V以上为高电平，在0.8V以下为低电平。因此，CMOS电路与 TTL电路就有一个电平转换的问题，使两者电平域值能匹配。<br>有关逻辑电平的一些概念 ：<br>要了解逻辑电平的内容，首先要知道以下几个概念的含义：</p>\n<p>输入高电平（Vih）：保证逻辑门的输入为高电平时所允许的最小输入高电平，当输入电平高于Vih时，则认为输入电平为高电平。<br>输入低电平（Vil）：保证逻辑门的输入为低电平时所允许的最大输入低电平，当输入电平低于Vil时，则认为输入电平为低电平。<br>输出高电平（Voh）：保证逻辑门的输出为高电平时的输出电平的最小值，逻辑门的输出为高电平时的电平值都必须大于此Voh。<br>输出低电平（Vol）：保证逻辑门的输出为低电平时的输出电平的最大值，逻辑门的输出为低电平时的电平值都必须小于此Vol。<br>阀值电平(Vt)：数字电路芯片都存在一个阈值电平，就是电路刚刚勉强能翻转动作时的电平。它是一个界于Vil、Vih之间的电压值，对于CMOS电路 的阈值电平，基本上是二分之一的电源电压值，但要保证稳定的输 出，则必须要求输入高电平&gt; Vih，输入低电平<vil，而如果输入电平在阈值上下，也就是vil～vih这个区域，电路的输出会处于不稳定状态。 对于一般的逻辑电平，以上参数的关系如下：=\"\" voh=\"\"> Vih &gt; Vt &gt; Vil &gt; Vol<br>    Ioh：逻辑门输出为高电平时的负载电流（为拉电流）。<br>    Iol：逻辑门输出为低电平时的负载电流（为灌电流）。<br>    Iih：逻辑门输入为高电平时的电流（为灌电流）。<br>    Iil：逻辑门输入为低电平时的电流（为拉电流）。</vil，而如果输入电平在阈值上下，也就是vil～vih这个区域，电路的输出会处于不稳定状态。></p>\n<p>门电路输出极在集成单元内不接负载电阻而直接引出作为输出端，这种形式的门称为开路门。开路的TTL、CMOS、ECL门分别称为集电极开路（OC）、 漏极开路（OD）、发射极开路（OE），使用时应审查是否接上拉电阻（OC、OD门）或下拉电阻（OE门），以及电阻阻值是否合适。对于集电极开路 （OC）门，其上拉电阻阻值RL应满足下面条件：</p>\n<pre><code>- RL &lt; （VCC－Voh）/（n*Ioh＋m*Iih）\n- RL &gt; （VCC－Vol）/（Iol＋m*Iil）\n</code></pre><p>其中n：线与的开路门数；m：被驱动的输入端数。</p>\n<h3 id=\"常用的逻辑电平\"><a href=\"#常用的逻辑电平\" class=\"headerlink\" title=\"常用的逻辑电平\"></a>常用的逻辑电平</h3><p>逻辑电平：有TTL、CMOS、LVTTL、ECL、PECL、GTL；RS232、RS422、LVDS等。<br>其中TTL和CMOS的逻辑电平按典型电压可分为四类：5V系列（5V TTL和5V CMOS）、3.3V系列，2.5V系列和1.8V系列。<br>5V TTL和5V CMOS逻辑电平是通用的逻辑电平。<br>3.3V及以下的逻辑电平被称为低电压逻辑电平，常用的为LVTTL电平。<br>低电压的逻辑电平还有2.5V和1.8V两种。<br>ECL/PECL和LVDS是差分输入输出。<br>RS-422/485和RS-232是串口的接口标准，RS-422/485是差分输入输出，RS-232是单端输入输出。<br>OC门，又称集电极开路（漏极开路）与非门门电路，Open Collector（Open Drain）。</p>\n<h3 id=\"为什么引入OC门\"><a href=\"#为什么引入OC门\" class=\"headerlink\" title=\"为什么引入OC门\"></a>为什么引入OC门</h3><p>实际使用中,有时需要两个或两个以上与非门的输出端连接在同一条导线上，将这些与非门上的数据（状态电平）用同一条导线输送出去。因此，需要一种新的与非门电路–OC门来实现“线与逻辑”。OC门主要用于3个方面:实现与或非逻辑，用做电平转换，用做驱动器。由于OC门电路的输出管的集电极悬空，使用时需外接一个上拉电阻Rp到电源VCC。OC门使用上拉电阻以输出高电平，此外为了加大输出引脚的驱动能力，上拉电阻阻值的选择原则，从降低功耗及芯片的灌电流能力考虑应当足够大；从确保足够的驱动电流考虑应当足够小。线与逻辑，即两个输出端（包括两个以上）直接互连就可以实现“AND”的逻辑功能。在总线传输等实际应用中需要多个门的输出端并联连接使用，而一般 TTL门输出端并不能直接并接使用，否则这些门的输出管之间由于低阻抗形成很大的短路电流（灌电流），而烧坏器件。在硬件上，可用OC门或三态门（ST 门）来实现。用OC门实现线与，应同时在输出端口应加一个上拉电阻。三态门（ST门）主要用在应用于多个门输出共享数据总线，为避免多个门输出同时占用数据总线，这些门的使能信号（EN）中只允许有一个为有效电平（如高电平），由于三态门的输出是推拉式的低阻输出，且不需接上拉（负载）电阻，所以开关速度比OC门快，常用三态门作为输出缓冲器</p>\n<h3 id=\"什么是OC、OD？\"><a href=\"#什么是OC、OD？\" class=\"headerlink\" title=\"什么是OC、OD？\"></a>什么是OC、OD？</h3><p>集电极开路门(集电极开路 OC 或漏极开路 OD)<br>Open-Drain是漏极开路输出的意思，相当于集电极开路(Open-Collector)输出，即TTL中的集电极开路（OC）输出。一般用于线或、线与，也有的用于电流驱动。Open-Drain是对MOS管而言，Open-Collector是对双极型管而言，在用法上没啥区别。</p>\n<p>开漏形式的电路有以下几个特点：</p>\n<ul>\n<li>利用外部电路的驱动能力，减少IC内部的驱动。 或驱动比芯片电源电压高的负载.</li>\n<li>可以将多个开漏输出的Pin，连接到一条线上。通过一只上拉电阻，在不增加任何器件的情况下，形成“与逻辑”关系。这也是I2C，SMBus等总线 判断总线占用状态的原理。如果作为图腾输出必须接上拉电阻。接容性负载时，下降延是芯片内的晶体管，是有源驱动，速度较快；上升延是无源的外接电阻，速度慢。如果要求速度高电阻选择要小，功耗会大。所以负载电阻的选择要兼顾功耗和速度。</li>\n<li>可以利用改变上拉电源的电压，改变传输电平。例如加上上拉电阻就可以提供TTL/CMOS电平输出等。</li>\n<li>开漏Pin不连接外部的上拉电阻，则只能输出低电平。一般来说，开漏是用来连接不同电平的器件，匹配电平用的。</li>\n</ul>\n<p>正常的CMOS输出级是上、下两个管子，把上面的管子去掉就是OPEN-DRAIN了。这种输出的主要目的有两个：电平转换和线与。<br>由于漏级开路，所以后级电路必须接一上拉电阻，上拉电阻的电源电压就可以决定输出电平。这样你就可以进行任意电平的转换了。<br>线与功能主要用于有多个电路对同一信号进行拉低操作的场合，如果本电路不想拉低，就输出高电平，因为OPEN-DRAIN上面的管子被拿掉，高电平是靠外接的上拉电阻实现的。（而正常的CMOS输出级，如果出现一个输出为高另外一个为低时，等于电源短路。）OPEN-DRAIN提供了灵活的输出方式，但是也有其弱点，就是带来上升沿的延时。因为上升沿是通过外接上拉无源电阻对负载充电，所以当电阻选择小时延时就小，但功耗大；反之延时大功耗小。所以如果对延时有要求，则建议用下降沿输出。</p>\n","excerpt":"","more":"<p>转载: <a href=\"http://blog.csdn.net/qq258711519/article/details/10957253\">TTL电平,CMOS电平,OC门,OD门基础知识</a></p>\n<h2 id=\"TTL\"><a href=\"#TTL\" class=\"headerlink\" title=\"TTL\"></a>TTL</h2><p>TTL集成电路的主要型式为晶体管－晶体管逻辑门（transistor-transistor logic gate），TTL大部分都采用5V电源。</p>\n<ol>\n<li>输出高电平Uoh和输出低电平Uol<br> Uoh≥2.4V,Uol≤0.4V</li>\n<li>输入高电平和输入低电平<br> Uih≥2.0V，Uil≤0.8V</li>\n</ol>\n<h2 id=\"CMOS\"><a href=\"#CMOS\" class=\"headerlink\" title=\"CMOS\"></a>CMOS</h2><p>CMOS电路是电压控制器件，输入电阻极大，对于干扰信号十分敏感，因此不用的输入端不应开路，接到地或者电源上。CMOS电路的优点是噪声容限较宽，静态功耗很小。</p>\n<ol>\n<li><p>输出高电平Uoh和输出低电平Uol<br> Uoh≈VCC，Uol≈GND</p>\n</li>\n<li><p>输入高电平Uoh和输入低电平Uol<br> Uih≥0.7VCC,Uil≤0.2VCC （VCC为电源电压，GND为地）</p>\n</li>\n</ol>\n<p>从上面可以看出:<br>在同样5V电源电压情况下，COMS电路可以直接驱动TTL，因为CMOS的输出高电平大于2.0V,输出低电平小于0.8V；而TTL电路则不能直接 驱动CMOS电路，TTL的输出高电平为大于2.4V，如果落在2.4V～3.5V之间，则CMOS电路就不能检测到高电平，低电平小于0.4V满足要 求，所以在TTL电路驱动COMS电路时需要加上拉电阻。如果出现不同电压电源的情况，也可以通过上面的方法进行判断。<br>如果电路中出现3.3V的COMS电路去驱动5V CMOS电路的情况，如3.3V单片机去驱动74HC,这种情况有以下几种方法解决，最简单的就是直接将74HC换成74HCT（74系列的输入输出在下 面有介绍）的芯片，因为3.3V CMOS 可以直接驱动5V的TTL电路；或者加电压转换芯片；还有就是把单片机的I/O口设为开漏，然后加上拉电阻到5V，这种情况下得根据实际情况调整电阻的大 小，以保证信号的上升沿时间。</p>\n<h2 id=\"74系列简介\"><a href=\"#74系列简介\" class=\"headerlink\" title=\"74系列简介\"></a>74系列简介</h2><p>74系列可以说是我们平时接触的最多的芯片，74系列中分为很多种，而我们平时用得最多的应该是以下几种：74LS，74HC，74HCT这三种，这三种系列在电平方面的区别如下：</p>\n<table>\n<thead>\n<tr>\n<th>型号</th>\n<th style=\"text-align:center\">输入电平</th>\n<th style=\"text-align:right\">输出电平</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>74LS</td>\n<td style=\"text-align:center\">TTL电平</td>\n<td style=\"text-align:right\">TTL电平</td>\n</tr>\n<tr>\n<td>74HC</td>\n<td style=\"text-align:center\">COMS电平</td>\n<td style=\"text-align:right\">COMS电平</td>\n</tr>\n<tr>\n<td>74HCT</td>\n<td style=\"text-align:center\">TTL电平</td>\n<td style=\"text-align:right\">COMS电平</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TTL和CMOS电平\"><a href=\"#TTL和CMOS电平\" class=\"headerlink\" title=\"TTL和CMOS电平\"></a>TTL和CMOS电平</h2><h3 id=\"TTL电平-什么是TTL电平\"><a href=\"#TTL电平-什么是TTL电平\" class=\"headerlink\" title=\"TTL电平(什么是TTL电平)\"></a>TTL电平(什么是TTL电平)</h3><p>输出高电平&gt;2.4V,输出低电平<0.4V。在室温下，一般输出高电平是3.5V，输出低电平是0.2V。最小输入高电平和低电平：输入高电平>=2.0V，输入低电平&lt;=0.8V，噪声容限是0.4V。</p>\n<h3 id=\"CMOS电平\"><a href=\"#CMOS电平\" class=\"headerlink\" title=\"CMOS电平\"></a>CMOS电平</h3><p>“1”逻辑电平电压接近于电源电压，”0”逻辑电平接近于0V。而且具有很宽的噪声容限。</p>\n<h3 id=\"电平转换电路\"><a href=\"#电平转换电路\" class=\"headerlink\" title=\"电平转换电路\"></a>电平转换电路</h3><p>因为TTL和COMS的高低电平的值不一样（ttl 5v&lt;＝＝&gt;cmos 3.3v），所以互相连接时需要电平的转换：就是用两个电阻对电平分压，没有什么高深的东西。</p>\n<h3 id=\"OC门\"><a href=\"#OC门\" class=\"headerlink\" title=\"OC门\"></a>OC门</h3><p>即集电极开路门电路，OD门，即漏极开路门电路，必须外界上拉电阻和电源才能将开关电平作为高低电平用。否则它一般只作为开关大电压和大电流负载，所以又叫做驱动门电路。</p>\n<h3 id=\"TTL和COMS电路比较\"><a href=\"#TTL和COMS电路比较\" class=\"headerlink\" title=\"TTL和COMS电路比较\"></a>TTL和COMS电路比较</h3><ul>\n<li>TTL电路是电流控制器件，而CMOS电路是电压控制器件。 </li>\n<li>TTL电路的速度快，传输延迟时间短(5-10ns)，但是功耗大。COMS电路的速度慢，传输延迟时间长(25-50ns),但功耗低。COMS电路本身的功耗与输入信号的脉冲频率有关，频率越高，芯片集越热，这是正常现象。 </li>\n<li>COMS电路的锁定效应：<br>  COMS电路由于输入太大的电流，内部的电流急剧增大，除非切断电源，电流一直在增大。这种效应就是锁定效应。当产生锁定效应时，COMS的内部电流能达到40mA以上，很容易烧毁芯片。<br>  防御措施： </li>\n<li>在输入端和输出端加钳位电路，使输入和输出不超过不超过规定电压。 </li>\n<li>芯片的电源输入端加去耦电路，防止VDD端出现瞬间的高压。 </li>\n<li>在VDD和外电源之间加限流电阻，即使有大的电流也不让它进去。 </li>\n<li>当系统由几个电源分别供电时，开关要按下列顺序：开启时，先开启COMS路得电 源，再开启输入信号和负载的电源；关闭时，先关闭输入信号和负载的电源，再关闭COMS电路的电源。</li>\n</ul>\n<h3 id=\"COMS电路的使用注意事项\"><a href=\"#COMS电路的使用注意事项\" class=\"headerlink\" title=\"COMS电路的使用注意事项\"></a>COMS电路的使用注意事项</h3><ul>\n<li>COMS电路时电压控制器件，它的输入总抗很大，对干扰信号的捕捉能力很强。所以，不用的管脚不要悬空，要接上拉电阻或者下拉电阻，给它一个恒定的电平。 </li>\n<li>输入端接低内阻的信号源时，要在输入端和信号源之间要串联限流电阻，使输入的电流限制在1mA之内。 </li>\n<li>当接长信号传输线时，在COMS电路端接匹配电阻。 </li>\n<li>当输入端接大电容时，应该在输入端和电容间接保护电阻。电阻值为R=V0/1mA.V0是外界电容上的电压。 </li>\n<li>COMS的输入电流超过1mA，就有可能烧坏COMS。</li>\n</ul>\n<h3 id=\"TTL门电路中输入端负载特性-输入端带电阻特殊情况的处理\"><a href=\"#TTL门电路中输入端负载特性-输入端带电阻特殊情况的处理\" class=\"headerlink\" title=\"TTL门电路中输入端负载特性(输入端带电阻特殊情况的处理)\"></a>TTL门电路中输入端负载特性(输入端带电阻特殊情况的处理)</h3><ul>\n<li>悬空时相当于输入端接高电平。因为这时可以看作是输入端接一个无穷大的电阻。 </li>\n<li>在门电路输入端串联10K电阻后再输入低电平，输入端出呈现的是高电平而不是低电平。因为由TTL门电路的输入端负载特性可知，只有在输入端接的串联电阻小于910欧时，它输入来的低电平信号才能被门电路识别出来，串联电阻再大的话输入端就一直呈现高电平。这个一定要注意。COMS门电路就不用考虑这些了。</li>\n</ul>\n<p>TTL电路有集电极开路OC门，MOS管也有和集电极对应的漏极开路的OD门，它的输出就叫做开漏输出。OC门在截止时有漏电流输出，那就是漏电流，为什么有漏电流呢？那是因为当三极管截止的时候，它的基极电流约等于0，但是并不是真正的为0，经过三极管的集电极的电流也就不是真正的 0，而是约0。而这个就是漏电流。</p>\n<p>开漏输出：OC门的输出就是开漏输出；OD门的输出也是开漏输出。它可以吸收很大的电流，但是不能向外输出的电流。所以，为了能输入和输出电流，它使用的时候要跟电源和上拉电阻一齐用。OD门一般作为输出缓冲/驱动器、电平转换器以及满足吸收大负载电流的需要。</p>\n<h3 id=\"什么叫做图腾柱，它与开漏电路有什么区别\"><a href=\"#什么叫做图腾柱，它与开漏电路有什么区别\" class=\"headerlink\" title=\"什么叫做图腾柱，它与开漏电路有什么区别\"></a>什么叫做图腾柱，它与开漏电路有什么区别</h3><p>TTL集成电路中，输出有接上拉三极管的输出叫做图腾柱输出，没有的叫做OC门。因为TTL就是一个三级关，图腾柱也就是两个三级管推挽相连。所以推挽就是图腾。一般图腾式输出，高电平400UA，低电平8MA<br>CMOS 器件不用的输入端必须连到高电平或低电平, 这是因为 CMOS 是高输入阻抗器件, 理想状态是没有输入电流的. 如果不用的输入引脚悬空, 很容易感应到干扰信号, 影响芯片的逻辑运行, 甚至静电积累永久性的击穿这个输入端, 造成芯片失效.另外, 只有 4000 系列的 CMOS 器件可以工作在15伏电源下, 74HC, 74HCT 等都只能工作在 5伏电源下, 现在已经有工作在 3伏和 2.5伏电源下的 CMOS 逻辑电路芯片了.</p>\n<p>CMOS逻辑电平范围比较大，范围在3～15V，比如4000系列当5V供电时，输出在4.6以上为高电平，输出在0.05V以下为低电平。输入在3.5V以上为高电平，输入在1.5V以下为低电平。<br>而对于TTL芯片，供电范围在0～5V，常见都是5V，如74系列5V供电，输出在2.7V以上为高电平，输出在 0.5V以下为低电平，输入在2V以上为高电平，在0.8V以下为低电平。因此，CMOS电路与 TTL电路就有一个电平转换的问题，使两者电平域值能匹配。<br>有关逻辑电平的一些概念 ：<br>要了解逻辑电平的内容，首先要知道以下几个概念的含义：</p>\n<p>输入高电平（Vih）：保证逻辑门的输入为高电平时所允许的最小输入高电平，当输入电平高于Vih时，则认为输入电平为高电平。<br>输入低电平（Vil）：保证逻辑门的输入为低电平时所允许的最大输入低电平，当输入电平低于Vil时，则认为输入电平为低电平。<br>输出高电平（Voh）：保证逻辑门的输出为高电平时的输出电平的最小值，逻辑门的输出为高电平时的电平值都必须大于此Voh。<br>输出低电平（Vol）：保证逻辑门的输出为低电平时的输出电平的最大值，逻辑门的输出为低电平时的电平值都必须小于此Vol。<br>阀值电平(Vt)：数字电路芯片都存在一个阈值电平，就是电路刚刚勉强能翻转动作时的电平。它是一个界于Vil、Vih之间的电压值，对于CMOS电路 的阈值电平，基本上是二分之一的电源电压值，但要保证稳定的输 出，则必须要求输入高电平&gt; Vih，输入低电平<Vil，而如果输入电平在阈值上下，也就是Vil～Vih这个区域，电路的输出会处于不稳定状态。 \n对于一般的逻辑电平，以上参数的关系如下： \n    Voh > Vih &gt; Vt &gt; Vil &gt; Vol<br>    Ioh：逻辑门输出为高电平时的负载电流（为拉电流）。<br>    Iol：逻辑门输出为低电平时的负载电流（为灌电流）。<br>    Iih：逻辑门输入为高电平时的电流（为灌电流）。<br>    Iil：逻辑门输入为低电平时的电流（为拉电流）。</p>\n<p>门电路输出极在集成单元内不接负载电阻而直接引出作为输出端，这种形式的门称为开路门。开路的TTL、CMOS、ECL门分别称为集电极开路（OC）、 漏极开路（OD）、发射极开路（OE），使用时应审查是否接上拉电阻（OC、OD门）或下拉电阻（OE门），以及电阻阻值是否合适。对于集电极开路 （OC）门，其上拉电阻阻值RL应满足下面条件：</p>\n<pre><code>- RL &lt; （VCC－Voh）/（n*Ioh＋m*Iih）\n- RL &gt; （VCC－Vol）/（Iol＋m*Iil）\n</code></pre><p>其中n：线与的开路门数；m：被驱动的输入端数。</p>\n<h3 id=\"常用的逻辑电平\"><a href=\"#常用的逻辑电平\" class=\"headerlink\" title=\"常用的逻辑电平\"></a>常用的逻辑电平</h3><p>逻辑电平：有TTL、CMOS、LVTTL、ECL、PECL、GTL；RS232、RS422、LVDS等。<br>其中TTL和CMOS的逻辑电平按典型电压可分为四类：5V系列（5V TTL和5V CMOS）、3.3V系列，2.5V系列和1.8V系列。<br>5V TTL和5V CMOS逻辑电平是通用的逻辑电平。<br>3.3V及以下的逻辑电平被称为低电压逻辑电平，常用的为LVTTL电平。<br>低电压的逻辑电平还有2.5V和1.8V两种。<br>ECL/PECL和LVDS是差分输入输出。<br>RS-422/485和RS-232是串口的接口标准，RS-422/485是差分输入输出，RS-232是单端输入输出。<br>OC门，又称集电极开路（漏极开路）与非门门电路，Open Collector（Open Drain）。</p>\n<h3 id=\"为什么引入OC门\"><a href=\"#为什么引入OC门\" class=\"headerlink\" title=\"为什么引入OC门\"></a>为什么引入OC门</h3><p>实际使用中,有时需要两个或两个以上与非门的输出端连接在同一条导线上，将这些与非门上的数据（状态电平）用同一条导线输送出去。因此，需要一种新的与非门电路–OC门来实现“线与逻辑”。OC门主要用于3个方面:实现与或非逻辑，用做电平转换，用做驱动器。由于OC门电路的输出管的集电极悬空，使用时需外接一个上拉电阻Rp到电源VCC。OC门使用上拉电阻以输出高电平，此外为了加大输出引脚的驱动能力，上拉电阻阻值的选择原则，从降低功耗及芯片的灌电流能力考虑应当足够大；从确保足够的驱动电流考虑应当足够小。线与逻辑，即两个输出端（包括两个以上）直接互连就可以实现“AND”的逻辑功能。在总线传输等实际应用中需要多个门的输出端并联连接使用，而一般 TTL门输出端并不能直接并接使用，否则这些门的输出管之间由于低阻抗形成很大的短路电流（灌电流），而烧坏器件。在硬件上，可用OC门或三态门（ST 门）来实现。用OC门实现线与，应同时在输出端口应加一个上拉电阻。三态门（ST门）主要用在应用于多个门输出共享数据总线，为避免多个门输出同时占用数据总线，这些门的使能信号（EN）中只允许有一个为有效电平（如高电平），由于三态门的输出是推拉式的低阻输出，且不需接上拉（负载）电阻，所以开关速度比OC门快，常用三态门作为输出缓冲器</p>\n<h3 id=\"什么是OC、OD？\"><a href=\"#什么是OC、OD？\" class=\"headerlink\" title=\"什么是OC、OD？\"></a>什么是OC、OD？</h3><p>集电极开路门(集电极开路 OC 或漏极开路 OD)<br>Open-Drain是漏极开路输出的意思，相当于集电极开路(Open-Collector)输出，即TTL中的集电极开路（OC）输出。一般用于线或、线与，也有的用于电流驱动。Open-Drain是对MOS管而言，Open-Collector是对双极型管而言，在用法上没啥区别。</p>\n<p>开漏形式的电路有以下几个特点：</p>\n<ul>\n<li>利用外部电路的驱动能力，减少IC内部的驱动。 或驱动比芯片电源电压高的负载.</li>\n<li>可以将多个开漏输出的Pin，连接到一条线上。通过一只上拉电阻，在不增加任何器件的情况下，形成“与逻辑”关系。这也是I2C，SMBus等总线 判断总线占用状态的原理。如果作为图腾输出必须接上拉电阻。接容性负载时，下降延是芯片内的晶体管，是有源驱动，速度较快；上升延是无源的外接电阻，速度慢。如果要求速度高电阻选择要小，功耗会大。所以负载电阻的选择要兼顾功耗和速度。</li>\n<li>可以利用改变上拉电源的电压，改变传输电平。例如加上上拉电阻就可以提供TTL/CMOS电平输出等。</li>\n<li>开漏Pin不连接外部的上拉电阻，则只能输出低电平。一般来说，开漏是用来连接不同电平的器件，匹配电平用的。</li>\n</ul>\n<p>正常的CMOS输出级是上、下两个管子，把上面的管子去掉就是OPEN-DRAIN了。这种输出的主要目的有两个：电平转换和线与。<br>由于漏级开路，所以后级电路必须接一上拉电阻，上拉电阻的电源电压就可以决定输出电平。这样你就可以进行任意电平的转换了。<br>线与功能主要用于有多个电路对同一信号进行拉低操作的场合，如果本电路不想拉低，就输出高电平，因为OPEN-DRAIN上面的管子被拿掉，高电平是靠外接的上拉电阻实现的。（而正常的CMOS输出级，如果出现一个输出为高另外一个为低时，等于电源短路。）OPEN-DRAIN提供了灵活的输出方式，但是也有其弱点，就是带来上升沿的延时。因为上升沿是通过外接上拉无源电阻对负载充电，所以当电阻选择小时延时就小，但功耗大；反之延时大功耗小。所以如果对延时有要求，则建议用下降沿输出。</p>\n"},{"title":"bootloader使用注意事项","date":"2016-07-13T17:53:26.000Z","toc":true,"_content":"## keil 链接选项\n<center>![keil config](http://o9kzgz0kz.bkt.clouddn.com/kei%E8%AE%BE%E7%BD%AE.jpg)</center>\n<!--more-->\n\n```C\n// 全局设置\n#define D_FLAGADDR      0xFFF0\t\t\t\t\t\t\t// 存储全局升级标志（可选）\n#define D_MCU           D_V98XX\t\t\t\t\t\t\t// MCU类型\n#define D_FRAMELEN  \t16\t\t\t\t\t\t\t    // 每帧的数据长度\n#define D_ADRESSMODE    D_ABSOLUTE\t\t\t\t\t    // 寻址模式\n#define D_READCHECK\t\tD_FALSE\t\t\t\t\t\t    // 读出比对\n#define D_TIMETH        (30)                            // *50ms\n// note* bootloader位于flash中的最后10k_(10或20页)(0xD800-0xFFFF),其中0xFE00页用于保存用户程序的入口地址\n#if (D_MCU == D_V98XX)\n    #define D_SECTORSUM\t\t0x6c\t\t\t\t\t\t// 128-20页\n    #define D_SECTORSIZE\t0x200 \t\t\t\t\t\t// 每页大小，V98xx是512个字节 中颖7012是1024个字节\n#endif\n#if (D_MCU == D_SH7012)\n    #define D_SECTORSUM\t\t0x36 \t\t\t\t\t\t// 64-10页\n    #define D_SECTORSIZE/\t0x400 \t\t\t\t\t\t// 每页大小，V98xx是512个字节 中颖7012是1024个字节\n#endif\n\n#define D_FRAMENUM\t\t(D_SECTORSIZE/D_FRAMELEN)\t    // 传输一页数据需要的总帧数\n```\n\n其中<code>D_FLAGADDR</code>是作为升级标志的全局标志位，位于<code>xdata</code>区，在用户程序接受到升级指令后需要将该位置写入数据<code>0x55</code>。后续增加对IO口的支持。\n\n## 关于中断处理\n> 由于IAP的机制要求中断进行响应，而C51程序中的代码首页放置的就是STARTUP与各个中断入口的地址，一旦对首页0000-0200的512字节进行擦除或者写操作，就会导致IAP中断无法响应MCU一直处于挂起状态，所以为了避免这种情况必须保证首页不被擦除或改写，因此提前将中断入口地址固定，保证后面升级的程序中断入口地址不变。否则中断程序的跳转将指向错误的地址，同时为每个中断函数预留了一定的空间，方便用户添加简单的中断处理代码。\n\n为了实现这点，必须将IAP所在的中断进行中断跳转处理，这会导致中断在响应的时候会慢至少一个`LJMP`指令，但是对于目前主频达到十几兆的增强型51来说是可以忽略不计的。\n\n### 如何实现\n因为IAP中断不可擦出，中断服务函数同样应该位于不可擦出段，因此可将该段代码定位在bootloader代码的开始。在IAP中断服务函数中跳转至中断映射代码，同样中断映射代码的函数地址同样需要固定，但是是可擦出的。\n\n- 0x0000-0x03FF: 中断向量表\n- 0x0400-0x05FF: 512字节的出厂参数，单片机正常工作所必须的参数，不用于用户代码。\n- 0x0600-0xD4FF: 用户代码\n- 0xD500-0xD6FF: 中断映射代码\n- 0xD700-0xD7FF: 启动代码\n- 0xD800-0xFFFF: bootloader代码\n\n## 中断服务函数绝对定位地址\n\n```C\n     EXINT0SEG    =0xC500-0xC5FF\n     TIMER0SEG    =0xC600-0xCBFF\n     EXINT1SEG    =0xCC00-0xCCFF\n     TIMER1SEG    =0xCD00-0xCDFF\n     TIMER2SEG    =0xCE00-0xCEFF\n     UART1SEG     =0xCF00-0xD1FF\n    *UARTCFSEG    =0xD200-0xD3FF\n     UARTRTCSEG   =0xD400-0xD4FF\n     PLLEXINT3SEG =0xD500-0xD5FF\n     TIMERASEG    =0xD600-0xD6FF\n     POWERSEG     =0xD700-0xD7FF\n```\n**其中，UARTCFSEG实际并不是由中断向量直接指向，而是中断服务函数的一个子函数，因为UARTCF中断包含IAP中断，所以这部分的代码处在不可擦除区**。\n\n## **非常重要的一点**\n\n因为bootloader是和用户代码放在同一个工程下，对于常量尤其是函数内部的字符串常量，编译器在编译的时候可能会把这部分常量放进用户代码区，导致升级之后这部分变量会被更改。解决方法：\n\n- 尽量少使用常量尤其是字符串常量\n- bootloader代码中使用的所有变量，不要使用默认初始值也不要使用声明的同时赋值的用法；","source":"_posts/bootloader-Caution.md","raw":"---\ntitle: bootloader使用注意事项\ndate: 2016-07-13 17:53:26\ntoc: true\ncategories: bootloader\ntags: 嵌入式 单片机\n---\n## keil 链接选项\n<center>![keil config](http://o9kzgz0kz.bkt.clouddn.com/kei%E8%AE%BE%E7%BD%AE.jpg)</center>\n<!--more-->\n\n```C\n// 全局设置\n#define D_FLAGADDR      0xFFF0\t\t\t\t\t\t\t// 存储全局升级标志（可选）\n#define D_MCU           D_V98XX\t\t\t\t\t\t\t// MCU类型\n#define D_FRAMELEN  \t16\t\t\t\t\t\t\t    // 每帧的数据长度\n#define D_ADRESSMODE    D_ABSOLUTE\t\t\t\t\t    // 寻址模式\n#define D_READCHECK\t\tD_FALSE\t\t\t\t\t\t    // 读出比对\n#define D_TIMETH        (30)                            // *50ms\n// note* bootloader位于flash中的最后10k_(10或20页)(0xD800-0xFFFF),其中0xFE00页用于保存用户程序的入口地址\n#if (D_MCU == D_V98XX)\n    #define D_SECTORSUM\t\t0x6c\t\t\t\t\t\t// 128-20页\n    #define D_SECTORSIZE\t0x200 \t\t\t\t\t\t// 每页大小，V98xx是512个字节 中颖7012是1024个字节\n#endif\n#if (D_MCU == D_SH7012)\n    #define D_SECTORSUM\t\t0x36 \t\t\t\t\t\t// 64-10页\n    #define D_SECTORSIZE/\t0x400 \t\t\t\t\t\t// 每页大小，V98xx是512个字节 中颖7012是1024个字节\n#endif\n\n#define D_FRAMENUM\t\t(D_SECTORSIZE/D_FRAMELEN)\t    // 传输一页数据需要的总帧数\n```\n\n其中<code>D_FLAGADDR</code>是作为升级标志的全局标志位，位于<code>xdata</code>区，在用户程序接受到升级指令后需要将该位置写入数据<code>0x55</code>。后续增加对IO口的支持。\n\n## 关于中断处理\n> 由于IAP的机制要求中断进行响应，而C51程序中的代码首页放置的就是STARTUP与各个中断入口的地址，一旦对首页0000-0200的512字节进行擦除或者写操作，就会导致IAP中断无法响应MCU一直处于挂起状态，所以为了避免这种情况必须保证首页不被擦除或改写，因此提前将中断入口地址固定，保证后面升级的程序中断入口地址不变。否则中断程序的跳转将指向错误的地址，同时为每个中断函数预留了一定的空间，方便用户添加简单的中断处理代码。\n\n为了实现这点，必须将IAP所在的中断进行中断跳转处理，这会导致中断在响应的时候会慢至少一个`LJMP`指令，但是对于目前主频达到十几兆的增强型51来说是可以忽略不计的。\n\n### 如何实现\n因为IAP中断不可擦出，中断服务函数同样应该位于不可擦出段，因此可将该段代码定位在bootloader代码的开始。在IAP中断服务函数中跳转至中断映射代码，同样中断映射代码的函数地址同样需要固定，但是是可擦出的。\n\n- 0x0000-0x03FF: 中断向量表\n- 0x0400-0x05FF: 512字节的出厂参数，单片机正常工作所必须的参数，不用于用户代码。\n- 0x0600-0xD4FF: 用户代码\n- 0xD500-0xD6FF: 中断映射代码\n- 0xD700-0xD7FF: 启动代码\n- 0xD800-0xFFFF: bootloader代码\n\n## 中断服务函数绝对定位地址\n\n```C\n     EXINT0SEG    =0xC500-0xC5FF\n     TIMER0SEG    =0xC600-0xCBFF\n     EXINT1SEG    =0xCC00-0xCCFF\n     TIMER1SEG    =0xCD00-0xCDFF\n     TIMER2SEG    =0xCE00-0xCEFF\n     UART1SEG     =0xCF00-0xD1FF\n    *UARTCFSEG    =0xD200-0xD3FF\n     UARTRTCSEG   =0xD400-0xD4FF\n     PLLEXINT3SEG =0xD500-0xD5FF\n     TIMERASEG    =0xD600-0xD6FF\n     POWERSEG     =0xD700-0xD7FF\n```\n**其中，UARTCFSEG实际并不是由中断向量直接指向，而是中断服务函数的一个子函数，因为UARTCF中断包含IAP中断，所以这部分的代码处在不可擦除区**。\n\n## **非常重要的一点**\n\n因为bootloader是和用户代码放在同一个工程下，对于常量尤其是函数内部的字符串常量，编译器在编译的时候可能会把这部分常量放进用户代码区，导致升级之后这部分变量会被更改。解决方法：\n\n- 尽量少使用常量尤其是字符串常量\n- bootloader代码中使用的所有变量，不要使用默认初始值也不要使用声明的同时赋值的用法；","slug":"bootloader-Caution","published":1,"updated":"2016-09-14T03:05:25.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9aoc001a70g5gisxv664","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"keil-链接选项\"><a href=\"#keil-链接选项\" class=\"headerlink\" title=\"keil 链接选项\"></a>keil 链接选项</h2><p><center><img src=\"http://o9kzgz0kz.bkt.clouddn.com/kei%E8%AE%BE%E7%BD%AE.jpg\" alt=\"keil config\"></center><br><a id=\"more\"></a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 全局设置</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_FLAGADDR      0xFFF0\t\t\t\t\t\t\t<span class=\"comment\">// 存储全局升级标志（可选）</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_MCU           D_V98XX\t\t\t\t\t\t\t<span class=\"comment\">// MCU类型</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_FRAMELEN  \t16\t\t\t\t\t\t\t    <span class=\"comment\">// 每帧的数据长度</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_ADRESSMODE    D_ABSOLUTE\t\t\t\t\t    <span class=\"comment\">// 寻址模式</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_READCHECK\t\tD_FALSE\t\t\t\t\t\t    <span class=\"comment\">// 读出比对</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_TIMETH        (30)                            <span class=\"comment\">// *50ms</span></span></div><div class=\"line\"><span class=\"comment\">// note* bootloader位于flash中的最后10k_(10或20页)(0xD800-0xFFFF),其中0xFE00页用于保存用户程序的入口地址</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> (D_MCU == D_V98XX)</span></div><div class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_SECTORSUM\t\t0x6c\t\t\t\t\t\t<span class=\"comment\">// 128-20页</span></span></div><div class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_SECTORSIZE\t0x200 \t\t\t\t\t\t<span class=\"comment\">// 每页大小，V98xx是512个字节 中颖7012是1024个字节</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> (D_MCU == D_SH7012)</span></div><div class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_SECTORSUM\t\t0x36 \t\t\t\t\t\t<span class=\"comment\">// 64-10页</span></span></div><div class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_SECTORSIZE/\t0x400 \t\t\t\t\t\t<span class=\"comment\">// 每页大小，V98xx是512个字节 中颖7012是1024个字节</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_FRAMENUM\t\t(D_SECTORSIZE/D_FRAMELEN)\t    <span class=\"comment\">// 传输一页数据需要的总帧数</span></span></div></pre></td></tr></table></figure>\n<p>其中<code>D_FLAGADDR</code>是作为升级标志的全局标志位，位于<code>xdata</code>区，在用户程序接受到升级指令后需要将该位置写入数据<code>0x55</code>。后续增加对IO口的支持。</p>\n<h2 id=\"关于中断处理\"><a href=\"#关于中断处理\" class=\"headerlink\" title=\"关于中断处理\"></a>关于中断处理</h2><blockquote>\n<p>由于IAP的机制要求中断进行响应，而C51程序中的代码首页放置的就是STARTUP与各个中断入口的地址，一旦对首页0000-0200的512字节进行擦除或者写操作，就会导致IAP中断无法响应MCU一直处于挂起状态，所以为了避免这种情况必须保证首页不被擦除或改写，因此提前将中断入口地址固定，保证后面升级的程序中断入口地址不变。否则中断程序的跳转将指向错误的地址，同时为每个中断函数预留了一定的空间，方便用户添加简单的中断处理代码。</p>\n</blockquote>\n<p>为了实现这点，必须将IAP所在的中断进行中断跳转处理，这会导致中断在响应的时候会慢至少一个<code>LJMP</code>指令，但是对于目前主频达到十几兆的增强型51来说是可以忽略不计的。</p>\n<h3 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h3><p>因为IAP中断不可擦出，中断服务函数同样应该位于不可擦出段，因此可将该段代码定位在bootloader代码的开始。在IAP中断服务函数中跳转至中断映射代码，同样中断映射代码的函数地址同样需要固定，但是是可擦出的。</p>\n<ul>\n<li>0x0000-0x03FF: 中断向量表</li>\n<li>0x0400-0x05FF: 512字节的出厂参数，单片机正常工作所必须的参数，不用于用户代码。</li>\n<li>0x0600-0xD4FF: 用户代码</li>\n<li>0xD500-0xD6FF: 中断映射代码</li>\n<li>0xD700-0xD7FF: 启动代码</li>\n<li>0xD800-0xFFFF: bootloader代码</li>\n</ul>\n<h2 id=\"中断服务函数绝对定位地址\"><a href=\"#中断服务函数绝对定位地址\" class=\"headerlink\" title=\"中断服务函数绝对定位地址\"></a>中断服务函数绝对定位地址</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> EXINT0SEG    =<span class=\"number\">0xC500</span><span class=\"number\">-0xC5FF</span></div><div class=\"line\"> TIMER0SEG    =<span class=\"number\">0xC600</span><span class=\"number\">-0xCBFF</span></div><div class=\"line\"> EXINT1SEG    =<span class=\"number\">0xCC00</span><span class=\"number\">-0xCCFF</span></div><div class=\"line\"> TIMER1SEG    =<span class=\"number\">0xCD00</span><span class=\"number\">-0xCDFF</span></div><div class=\"line\"> TIMER2SEG    =<span class=\"number\">0xCE00</span><span class=\"number\">-0xCEFF</span></div><div class=\"line\"> UART1SEG     =<span class=\"number\">0xCF00</span><span class=\"number\">-0xD1FF</span></div><div class=\"line\">*UARTCFSEG    =<span class=\"number\">0xD200</span><span class=\"number\">-0xD3FF</span></div><div class=\"line\"> UARTRTCSEG   =<span class=\"number\">0xD400</span><span class=\"number\">-0xD4FF</span></div><div class=\"line\"> PLLEXINT3SEG =<span class=\"number\">0xD500</span><span class=\"number\">-0xD5FF</span></div><div class=\"line\"> TIMERASEG    =<span class=\"number\">0xD600</span><span class=\"number\">-0xD6FF</span></div><div class=\"line\"> POWERSEG     =<span class=\"number\">0xD700</span><span class=\"number\">-0xD7FF</span></div></pre></td></tr></table></figure>\n<p><strong>其中，UARTCFSEG实际并不是由中断向量直接指向，而是中断服务函数的一个子函数，因为UARTCF中断包含IAP中断，所以这部分的代码处在不可擦除区</strong>。</p>\n<h2 id=\"非常重要的一点\"><a href=\"#非常重要的一点\" class=\"headerlink\" title=\"非常重要的一点\"></a><strong>非常重要的一点</strong></h2><p>因为bootloader是和用户代码放在同一个工程下，对于常量尤其是函数内部的字符串常量，编译器在编译的时候可能会把这部分常量放进用户代码区，导致升级之后这部分变量会被更改。解决方法：</p>\n<ul>\n<li>尽量少使用常量尤其是字符串常量</li>\n<li>bootloader代码中使用的所有变量，不要使用默认初始值也不要使用声明的同时赋值的用法；</li>\n</ul>\n","excerpt":"<h2 id=\"keil-链接选项\"><a href=\"#keil-链接选项\" class=\"headerlink\" title=\"keil 链接选项\"></a>keil 链接选项</h2><p><center><img src=\"http://o9kzgz0kz.bkt.clouddn.com/kei%E8%AE%BE%E7%BD%AE.jpg\" alt=\"keil config\"></center><br>","more":"</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 全局设置</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_FLAGADDR      0xFFF0\t\t\t\t\t\t\t<span class=\"comment\">// 存储全局升级标志（可选）</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_MCU           D_V98XX\t\t\t\t\t\t\t<span class=\"comment\">// MCU类型</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_FRAMELEN  \t16\t\t\t\t\t\t\t    <span class=\"comment\">// 每帧的数据长度</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_ADRESSMODE    D_ABSOLUTE\t\t\t\t\t    <span class=\"comment\">// 寻址模式</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_READCHECK\t\tD_FALSE\t\t\t\t\t\t    <span class=\"comment\">// 读出比对</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_TIMETH        (30)                            <span class=\"comment\">// *50ms</span></span></div><div class=\"line\"><span class=\"comment\">// note* bootloader位于flash中的最后10k_(10或20页)(0xD800-0xFFFF),其中0xFE00页用于保存用户程序的入口地址</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> (D_MCU == D_V98XX)</span></div><div class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_SECTORSUM\t\t0x6c\t\t\t\t\t\t<span class=\"comment\">// 128-20页</span></span></div><div class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_SECTORSIZE\t0x200 \t\t\t\t\t\t<span class=\"comment\">// 每页大小，V98xx是512个字节 中颖7012是1024个字节</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> (D_MCU == D_SH7012)</span></div><div class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_SECTORSUM\t\t0x36 \t\t\t\t\t\t<span class=\"comment\">// 64-10页</span></span></div><div class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_SECTORSIZE/\t0x400 \t\t\t\t\t\t<span class=\"comment\">// 每页大小，V98xx是512个字节 中颖7012是1024个字节</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D_FRAMENUM\t\t(D_SECTORSIZE/D_FRAMELEN)\t    <span class=\"comment\">// 传输一页数据需要的总帧数</span></span></div></pre></td></tr></table></figure>\n<p>其中<code>D_FLAGADDR</code>是作为升级标志的全局标志位，位于<code>xdata</code>区，在用户程序接受到升级指令后需要将该位置写入数据<code>0x55</code>。后续增加对IO口的支持。</p>\n<h2 id=\"关于中断处理\"><a href=\"#关于中断处理\" class=\"headerlink\" title=\"关于中断处理\"></a>关于中断处理</h2><blockquote>\n<p>由于IAP的机制要求中断进行响应，而C51程序中的代码首页放置的就是STARTUP与各个中断入口的地址，一旦对首页0000-0200的512字节进行擦除或者写操作，就会导致IAP中断无法响应MCU一直处于挂起状态，所以为了避免这种情况必须保证首页不被擦除或改写，因此提前将中断入口地址固定，保证后面升级的程序中断入口地址不变。否则中断程序的跳转将指向错误的地址，同时为每个中断函数预留了一定的空间，方便用户添加简单的中断处理代码。</p>\n</blockquote>\n<p>为了实现这点，必须将IAP所在的中断进行中断跳转处理，这会导致中断在响应的时候会慢至少一个<code>LJMP</code>指令，但是对于目前主频达到十几兆的增强型51来说是可以忽略不计的。</p>\n<h3 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h3><p>因为IAP中断不可擦出，中断服务函数同样应该位于不可擦出段，因此可将该段代码定位在bootloader代码的开始。在IAP中断服务函数中跳转至中断映射代码，同样中断映射代码的函数地址同样需要固定，但是是可擦出的。</p>\n<ul>\n<li>0x0000-0x03FF: 中断向量表</li>\n<li>0x0400-0x05FF: 512字节的出厂参数，单片机正常工作所必须的参数，不用于用户代码。</li>\n<li>0x0600-0xD4FF: 用户代码</li>\n<li>0xD500-0xD6FF: 中断映射代码</li>\n<li>0xD700-0xD7FF: 启动代码</li>\n<li>0xD800-0xFFFF: bootloader代码</li>\n</ul>\n<h2 id=\"中断服务函数绝对定位地址\"><a href=\"#中断服务函数绝对定位地址\" class=\"headerlink\" title=\"中断服务函数绝对定位地址\"></a>中断服务函数绝对定位地址</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> EXINT0SEG    =<span class=\"number\">0xC500</span><span class=\"number\">-0xC5FF</span></div><div class=\"line\"> TIMER0SEG    =<span class=\"number\">0xC600</span><span class=\"number\">-0xCBFF</span></div><div class=\"line\"> EXINT1SEG    =<span class=\"number\">0xCC00</span><span class=\"number\">-0xCCFF</span></div><div class=\"line\"> TIMER1SEG    =<span class=\"number\">0xCD00</span><span class=\"number\">-0xCDFF</span></div><div class=\"line\"> TIMER2SEG    =<span class=\"number\">0xCE00</span><span class=\"number\">-0xCEFF</span></div><div class=\"line\"> UART1SEG     =<span class=\"number\">0xCF00</span><span class=\"number\">-0xD1FF</span></div><div class=\"line\">*UARTCFSEG    =<span class=\"number\">0xD200</span><span class=\"number\">-0xD3FF</span></div><div class=\"line\"> UARTRTCSEG   =<span class=\"number\">0xD400</span><span class=\"number\">-0xD4FF</span></div><div class=\"line\"> PLLEXINT3SEG =<span class=\"number\">0xD500</span><span class=\"number\">-0xD5FF</span></div><div class=\"line\"> TIMERASEG    =<span class=\"number\">0xD600</span><span class=\"number\">-0xD6FF</span></div><div class=\"line\"> POWERSEG     =<span class=\"number\">0xD700</span><span class=\"number\">-0xD7FF</span></div></pre></td></tr></table></figure>\n<p><strong>其中，UARTCFSEG实际并不是由中断向量直接指向，而是中断服务函数的一个子函数，因为UARTCF中断包含IAP中断，所以这部分的代码处在不可擦除区</strong>。</p>\n<h2 id=\"非常重要的一点\"><a href=\"#非常重要的一点\" class=\"headerlink\" title=\"非常重要的一点\"></a><strong>非常重要的一点</strong></h2><p>因为bootloader是和用户代码放在同一个工程下，对于常量尤其是函数内部的字符串常量，编译器在编译的时候可能会把这部分常量放进用户代码区，导致升级之后这部分变量会被更改。解决方法：</p>\n<ul>\n<li>尽量少使用常量尤其是字符串常量</li>\n<li>bootloader代码中使用的所有变量，不要使用默认初始值也不要使用声明的同时赋值的用法；</li>\n</ul>"},{"title":"可以间接消抖的按键长按短按识别","date":"2016-09-18T16:29:07.000Z","_content":"\n按键按下时触发按键计时，按键释放结束计时，计时时间T<sub>key</sub> < T<sub>short</sub> 时，判为短按。T<sub>key</sub> > T<sub>long</sub>时，判为长按。按键在触发时需要消除抖动，抖动本质上也是一次极短的短按，因此可以根据短按时间来消除抖动。定时器定时扫描端口，源代码如下：\n\n```C\n    if (D_keyDown())                       \n    {\n        if (x_key.keyTmCnt < D_maxCntNum)\n        {\n            x_key.keyTmCnt++;\n        }\n        \n        if (x_key.keyTmCnt >= D_timeShortKey)    /* 大于D_minTimeFilter判为有效按键,短按 */\n        {\n            x_key.shortKeyFlag = D_TRUE;\n        }\n        \n        if (x_key.keyTmCnt >= D_timeLongKey)     /* 长按 */\n        {\n            x_key.keyState = D_keyPushLong;\n            if (x_key.shortKeyFlag == D_TRUE)\n            {\n                x_key.shortKeyFlag = D_FALSE;    /* 清楚短按标志，防止误触发，很重要 */\n            }\n        }\n    }\n    else\n    {\n        x_key.keyTmCnt = 0;\n        if (x_key.shortKeyFlag == D_TRUE)       \n        {\n            x_key.shortKeyFlag = D_FALSE;\n            x_key.keyState = D_keyPushShort;\n        }\n    }\n```","source":"_posts/keyLongOrShort.md","raw":"---\ntitle: 可以间接消抖的按键长按短按识别\ndate: 2016-09-18 16:29:07\ntags: 按键识别\ncategories: 单片机\n---\n\n按键按下时触发按键计时，按键释放结束计时，计时时间T<sub>key</sub> < T<sub>short</sub> 时，判为短按。T<sub>key</sub> > T<sub>long</sub>时，判为长按。按键在触发时需要消除抖动，抖动本质上也是一次极短的短按，因此可以根据短按时间来消除抖动。定时器定时扫描端口，源代码如下：\n\n```C\n    if (D_keyDown())                       \n    {\n        if (x_key.keyTmCnt < D_maxCntNum)\n        {\n            x_key.keyTmCnt++;\n        }\n        \n        if (x_key.keyTmCnt >= D_timeShortKey)    /* 大于D_minTimeFilter判为有效按键,短按 */\n        {\n            x_key.shortKeyFlag = D_TRUE;\n        }\n        \n        if (x_key.keyTmCnt >= D_timeLongKey)     /* 长按 */\n        {\n            x_key.keyState = D_keyPushLong;\n            if (x_key.shortKeyFlag == D_TRUE)\n            {\n                x_key.shortKeyFlag = D_FALSE;    /* 清楚短按标志，防止误触发，很重要 */\n            }\n        }\n    }\n    else\n    {\n        x_key.keyTmCnt = 0;\n        if (x_key.shortKeyFlag == D_TRUE)       \n        {\n            x_key.shortKeyFlag = D_FALSE;\n            x_key.keyState = D_keyPushShort;\n        }\n    }\n```","slug":"keyLongOrShort","published":1,"updated":"2016-09-18T09:09:57.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9aof001d70g5qaa0fpwd","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>按键按下时触发按键计时，按键释放结束计时，计时时间T<sub>key</sub> &lt; T<sub>short</sub> 时，判为短按。T<sub>key</sub> &gt; T<sub>long</sub>时，判为长按。按键在触发时需要消除抖动，抖动本质上也是一次极短的短按，因此可以根据短按时间来消除抖动。定时器定时扫描端口，源代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (D_keyDown())                       </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x_key.keyTmCnt &lt; D_maxCntNum)</div><div class=\"line\">    &#123;</div><div class=\"line\">        x_key.keyTmCnt++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (x_key.keyTmCnt &gt;= D_timeShortKey)    <span class=\"comment\">/* 大于D_minTimeFilter判为有效按键,短按 */</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        x_key.shortKeyFlag = D_TRUE;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (x_key.keyTmCnt &gt;= D_timeLongKey)     <span class=\"comment\">/* 长按 */</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        x_key.keyState = D_keyPushLong;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x_key.shortKeyFlag == D_TRUE)</div><div class=\"line\">        &#123;</div><div class=\"line\">            x_key.shortKeyFlag = D_FALSE;    <span class=\"comment\">/* 清楚短按标志，防止误触发，很重要 */</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">    x_key.keyTmCnt = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x_key.shortKeyFlag == D_TRUE)       </div><div class=\"line\">    &#123;</div><div class=\"line\">        x_key.shortKeyFlag = D_FALSE;</div><div class=\"line\">        x_key.keyState = D_keyPushShort;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>按键按下时触发按键计时，按键释放结束计时，计时时间T<sub>key</sub> &lt; T<sub>short</sub> 时，判为短按。T<sub>key</sub> &gt; T<sub>long</sub>时，判为长按。按键在触发时需要消除抖动，抖动本质上也是一次极短的短按，因此可以根据短按时间来消除抖动。定时器定时扫描端口，源代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (D_keyDown())                       </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x_key.keyTmCnt &lt; D_maxCntNum)</div><div class=\"line\">    &#123;</div><div class=\"line\">        x_key.keyTmCnt++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (x_key.keyTmCnt &gt;= D_timeShortKey)    <span class=\"comment\">/* 大于D_minTimeFilter判为有效按键,短按 */</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        x_key.shortKeyFlag = D_TRUE;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (x_key.keyTmCnt &gt;= D_timeLongKey)     <span class=\"comment\">/* 长按 */</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        x_key.keyState = D_keyPushLong;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x_key.shortKeyFlag == D_TRUE)</div><div class=\"line\">        &#123;</div><div class=\"line\">            x_key.shortKeyFlag = D_FALSE;    <span class=\"comment\">/* 清楚短按标志，防止误触发，很重要 */</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">    x_key.keyTmCnt = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x_key.shortKeyFlag == D_TRUE)       </div><div class=\"line\">    &#123;</div><div class=\"line\">        x_key.shortKeyFlag = D_FALSE;</div><div class=\"line\">        x_key.keyState = D_keyPushShort;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"freeRTOS中文文档","date":"2016-08-29T14:36:05.000Z","sticky":true,"_content":"\n<center><h1> freeRTOS中文文档 V0.0.1 <h1/><center/>\n\n## 文档由来\n\n因为最近在学习freeRTOS，官方没有中文站点，另外由于服务器原因，[freeRTOS.net]()这个中文站点已经很久没法访问了。因此索性边学边翻译，方便自己学习的同时，为国内的小伙伴们做些点点贡献。因水平有限，其中难免会出现翻译不准确的地方，欢迎斧正。\n\n## 文档地址\n[freeRTOS中文文档](http://www.xn--4gqa63c686ta68iba.ren/freeRTOS/)\n\n## 进度记录\n\n- 2016.09.09 进阶部分完成\n- 2016.08.29 软件定时器，完成入门部分\n- 2016.08.28 通信机制和事件组\n- 2016.08.26 任务与协程\n- 2016.08.25 freeRTOS简介\n- 2016.08.25 创建\n\n\n## 项目托管\n\n[GitHub](https://github.com/tangguocheng/freeRTOS_Document)\n\n[个人博客](http://www.tgcjin.xin/freeRTOS/)\n\n## 不足之处\n\n因为原版英文中有很多专业性的描述，并且这个翻译也是在一边学一边记录的过程下产生的，有些理解的不透彻的地方，我会直接贴出英文原文，方便后期再仔细斟酌如何翻译，即使如此，文中仍然可能(甚至是肯定的)会出现一些片面的、不准确的翻译。因此，这个中文文档只能作为一个参考，英文能力好的，还是推荐阅读英文原版。\n\n## 进度安排\n\n因为还在工作，无法保证进度，不定时更新。见谅。可关注我的[个人博客](www.tgcjin.xin)，除了托管在gitHub上，博客上也会有一份备份。\n\n## 参考资料\n\n- [freeRTOS官网](wwww.freertos.org)\n\n## license\n\n再次声明，虽然很多地方增加了自己的理解和为了方便理解使用更加形象的描述，但是所有内容仍然非原创，全部从官方英文站点翻译整理而来，而此翻译文档遵循以下协议：\n\n<div align=\"center\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/4.0/80x15.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>进行许可。</div>\n","source":"_posts/freeRTOS-CN.md","raw":"---\ntitle: freeRTOS中文文档\ndate: 2016-08-29 14:36:05\ntags: freeRTOS 中文文档\nsticky: true\n---\n\n<center><h1> freeRTOS中文文档 V0.0.1 <h1/><center/>\n\n## 文档由来\n\n因为最近在学习freeRTOS，官方没有中文站点，另外由于服务器原因，[freeRTOS.net]()这个中文站点已经很久没法访问了。因此索性边学边翻译，方便自己学习的同时，为国内的小伙伴们做些点点贡献。因水平有限，其中难免会出现翻译不准确的地方，欢迎斧正。\n\n## 文档地址\n[freeRTOS中文文档](http://www.xn--4gqa63c686ta68iba.ren/freeRTOS/)\n\n## 进度记录\n\n- 2016.09.09 进阶部分完成\n- 2016.08.29 软件定时器，完成入门部分\n- 2016.08.28 通信机制和事件组\n- 2016.08.26 任务与协程\n- 2016.08.25 freeRTOS简介\n- 2016.08.25 创建\n\n\n## 项目托管\n\n[GitHub](https://github.com/tangguocheng/freeRTOS_Document)\n\n[个人博客](http://www.tgcjin.xin/freeRTOS/)\n\n## 不足之处\n\n因为原版英文中有很多专业性的描述，并且这个翻译也是在一边学一边记录的过程下产生的，有些理解的不透彻的地方，我会直接贴出英文原文，方便后期再仔细斟酌如何翻译，即使如此，文中仍然可能(甚至是肯定的)会出现一些片面的、不准确的翻译。因此，这个中文文档只能作为一个参考，英文能力好的，还是推荐阅读英文原版。\n\n## 进度安排\n\n因为还在工作，无法保证进度，不定时更新。见谅。可关注我的[个人博客](www.tgcjin.xin)，除了托管在gitHub上，博客上也会有一份备份。\n\n## 参考资料\n\n- [freeRTOS官网](wwww.freertos.org)\n\n## license\n\n再次声明，虽然很多地方增加了自己的理解和为了方便理解使用更加形象的描述，但是所有内容仍然非原创，全部从官方英文站点翻译整理而来，而此翻译文档遵循以下协议：\n\n<div align=\"center\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/4.0/80x15.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>进行许可。</div>\n","slug":"freeRTOS-CN","published":1,"updated":"2017-04-06T00:48:19.000Z","_id":"cj0aj9aog001g70g5mh0oiau7","comments":1,"layout":"post","photos":[],"link":"","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><center><h1> freeRTOS中文文档 V0.0.1 <h1><center></center></h1></h1></center></p>\n<h2 id=\"文档由来\"><a href=\"#文档由来\" class=\"headerlink\" title=\"文档由来\"></a>文档由来</h2><p>因为最近在学习freeRTOS，官方没有中文站点，另外由于服务器原因，<a href=\"\">freeRTOS.net</a>这个中文站点已经很久没法访问了。因此索性边学边翻译，方便自己学习的同时，为国内的小伙伴们做些点点贡献。因水平有限，其中难免会出现翻译不准确的地方，欢迎斧正。</p>\n<h2 id=\"文档地址\"><a href=\"#文档地址\" class=\"headerlink\" title=\"文档地址\"></a>文档地址</h2><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/freeRTOS/\">freeRTOS中文文档</a></p>\n<h2 id=\"进度记录\"><a href=\"#进度记录\" class=\"headerlink\" title=\"进度记录\"></a>进度记录</h2><ul>\n<li>2016.09.09 进阶部分完成</li>\n<li>2016.08.29 软件定时器，完成入门部分</li>\n<li>2016.08.28 通信机制和事件组</li>\n<li>2016.08.26 任务与协程</li>\n<li>2016.08.25 freeRTOS简介</li>\n<li>2016.08.25 创建</li>\n</ul>\n<h2 id=\"项目托管\"><a href=\"#项目托管\" class=\"headerlink\" title=\"项目托管\"></a>项目托管</h2><p><a href=\"https://github.com/tangguocheng/freeRTOS_Document\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n<p><a href=\"http://www.tgcjin.xin/freeRTOS/\" target=\"_blank\" rel=\"external\">个人博客</a></p>\n<h2 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h2><p>因为原版英文中有很多专业性的描述，并且这个翻译也是在一边学一边记录的过程下产生的，有些理解的不透彻的地方，我会直接贴出英文原文，方便后期再仔细斟酌如何翻译，即使如此，文中仍然可能(甚至是肯定的)会出现一些片面的、不准确的翻译。因此，这个中文文档只能作为一个参考，英文能力好的，还是推荐阅读英文原版。</p>\n<h2 id=\"进度安排\"><a href=\"#进度安排\" class=\"headerlink\" title=\"进度安排\"></a>进度安排</h2><p>因为还在工作，无法保证进度，不定时更新。见谅。可关注我的<a href=\"www.tgcjin.xin\">个人博客</a>，除了托管在gitHub上，博客上也会有一份备份。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"wwww.freertos.org\">freeRTOS官网</a></li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"headerlink\" title=\"license\"></a>license</h2><p>再次声明，虽然很多地方增加了自己的理解和为了方便理解使用更加形象的描述，但是所有内容仍然非原创，全部从官方英文站点翻译整理而来，而此翻译文档遵循以下协议：</p>\n<div align=\"center\"><a rel=\"external\" href=\"http://creativecommons.org/licenses/by/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/4.0/80x15.png\"></a><br>本作品采用<a rel=\"external\" href=\"http://creativecommons.org/licenses/by/4.0/\" target=\"_blank\">知识共享署名 4.0 国际许可协议</a>进行许可。</div>\n","excerpt":"","more":"<p><center><h1> freeRTOS中文文档 V0.0.1 <h1/><center/></p>\n<h2 id=\"文档由来\"><a href=\"#文档由来\" class=\"headerlink\" title=\"文档由来\"></a>文档由来</h2><p>因为最近在学习freeRTOS，官方没有中文站点，另外由于服务器原因，<a href=\"\">freeRTOS.net</a>这个中文站点已经很久没法访问了。因此索性边学边翻译，方便自己学习的同时，为国内的小伙伴们做些点点贡献。因水平有限，其中难免会出现翻译不准确的地方，欢迎斧正。</p>\n<h2 id=\"文档地址\"><a href=\"#文档地址\" class=\"headerlink\" title=\"文档地址\"></a>文档地址</h2><p><a href=\"http://www.xn--4gqa63c686ta68iba.ren/freeRTOS/\">freeRTOS中文文档</a></p>\n<h2 id=\"进度记录\"><a href=\"#进度记录\" class=\"headerlink\" title=\"进度记录\"></a>进度记录</h2><ul>\n<li>2016.09.09 进阶部分完成</li>\n<li>2016.08.29 软件定时器，完成入门部分</li>\n<li>2016.08.28 通信机制和事件组</li>\n<li>2016.08.26 任务与协程</li>\n<li>2016.08.25 freeRTOS简介</li>\n<li>2016.08.25 创建</li>\n</ul>\n<h2 id=\"项目托管\"><a href=\"#项目托管\" class=\"headerlink\" title=\"项目托管\"></a>项目托管</h2><p><a href=\"https://github.com/tangguocheng/freeRTOS_Document\">GitHub</a></p>\n<p><a href=\"http://www.tgcjin.xin/freeRTOS/\">个人博客</a></p>\n<h2 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h2><p>因为原版英文中有很多专业性的描述，并且这个翻译也是在一边学一边记录的过程下产生的，有些理解的不透彻的地方，我会直接贴出英文原文，方便后期再仔细斟酌如何翻译，即使如此，文中仍然可能(甚至是肯定的)会出现一些片面的、不准确的翻译。因此，这个中文文档只能作为一个参考，英文能力好的，还是推荐阅读英文原版。</p>\n<h2 id=\"进度安排\"><a href=\"#进度安排\" class=\"headerlink\" title=\"进度安排\"></a>进度安排</h2><p>因为还在工作，无法保证进度，不定时更新。见谅。可关注我的<a href=\"www.tgcjin.xin\">个人博客</a>，除了托管在gitHub上，博客上也会有一份备份。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"wwww.freertos.org\">freeRTOS官网</a></li>\n</ul>\n<h2 id=\"license\"><a href=\"#license\" class=\"headerlink\" title=\"license\"></a>license</h2><p>再次声明，虽然很多地方增加了自己的理解和为了方便理解使用更加形象的描述，但是所有内容仍然非原创，全部从官方英文站点翻译整理而来，而此翻译文档遵循以下协议：</p>\n<div align=\"center\"><a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/4.0/80x15.png\" /></a><br />本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>进行许可。</div>\n"},{"title":"UART","toc":true,"date":"2016-08-05T10:12:15.000Z","_content":"通用异步收发器(UART)是嵌入式应用中最为常见的一中\"总线协议\"，之所以将UART归为总线协议中的一种，是因为广义上来讲，它规定了通信双方需要遵循的数据速率、通信格式等规则。即使它很简单，但是因为应用广泛，所以还是很值得去了解UART的相关特点以及实际应用中的一些注意点。\n\n## 发送与接收\nUART将字节数据已一个个独立的位按照连续的方式发出，接收方已同样的方式接收并组成原字节数据，发送方与接收方都包含一个移位寄存器(shift register)用来将数据\"串行化\"或\"反串行化。根据通信方式，UART可以分为单工、半双工、双工通信三类。\n\n## 数据构成\nUART发送或接收的数据结构：起始位 + 数据位 + 校验位 + 停止位，其中除校验位可选外，其它都是必须项。\n\n### 空闲模式\n当总线出于空闲模式时，发送端需要保持高电平，这是电报的历史遗留(保持高电平用以指示通讯线或收发器没有遭到破坏)。**这在利用GPIO软件模拟UART的时候尤其需要注意，如果忽略会导致通信无法实现**\n\n### 起始位\n每次通信总是已一个逻辑\"0\"的bit开始，称为起始位。因为在空闲模式总线处于逻辑\"1\"，当起始位出现时，会产生一个下降沿，容易用来产生唤醒终端，通知接收方即使处理接下来发送的数据。\n\n### 数据位\n数据位从5到9位不等，根据实际应用决定，大部分选择8位数据位，即一个字节。\n\n### 校验位\n这是可选项，分为奇校验、偶校验、空格校验、标记校验等。奇校验保证数据位与校验位中的\"1\"的总数为奇数，偶校验则相反。至于空格校验则是校验位为\"0\",标记校验为\"1\"。\n\n### 停止位\n与起始位作用相反，标识通信结尾，为逻辑\"1\"。\n\n","source":"_posts/UART.md","raw":"---\ntitle: UART\ntoc: true\ndate: 2016-08-05 10:12:15\ncategories: 总线协议\ntags: UART\n---\n通用异步收发器(UART)是嵌入式应用中最为常见的一中\"总线协议\"，之所以将UART归为总线协议中的一种，是因为广义上来讲，它规定了通信双方需要遵循的数据速率、通信格式等规则。即使它很简单，但是因为应用广泛，所以还是很值得去了解UART的相关特点以及实际应用中的一些注意点。\n\n## 发送与接收\nUART将字节数据已一个个独立的位按照连续的方式发出，接收方已同样的方式接收并组成原字节数据，发送方与接收方都包含一个移位寄存器(shift register)用来将数据\"串行化\"或\"反串行化。根据通信方式，UART可以分为单工、半双工、双工通信三类。\n\n## 数据构成\nUART发送或接收的数据结构：起始位 + 数据位 + 校验位 + 停止位，其中除校验位可选外，其它都是必须项。\n\n### 空闲模式\n当总线出于空闲模式时，发送端需要保持高电平，这是电报的历史遗留(保持高电平用以指示通讯线或收发器没有遭到破坏)。**这在利用GPIO软件模拟UART的时候尤其需要注意，如果忽略会导致通信无法实现**\n\n### 起始位\n每次通信总是已一个逻辑\"0\"的bit开始，称为起始位。因为在空闲模式总线处于逻辑\"1\"，当起始位出现时，会产生一个下降沿，容易用来产生唤醒终端，通知接收方即使处理接下来发送的数据。\n\n### 数据位\n数据位从5到9位不等，根据实际应用决定，大部分选择8位数据位，即一个字节。\n\n### 校验位\n这是可选项，分为奇校验、偶校验、空格校验、标记校验等。奇校验保证数据位与校验位中的\"1\"的总数为奇数，偶校验则相反。至于空格校验则是校验位为\"0\",标记校验为\"1\"。\n\n### 停止位\n与起始位作用相反，标识通信结尾，为逻辑\"1\"。\n\n","slug":"UART","published":1,"updated":"2016-08-16T08:18:15.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9aoi001k70g5tgecmusc","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>通用异步收发器(UART)是嵌入式应用中最为常见的一中”总线协议”，之所以将UART归为总线协议中的一种，是因为广义上来讲，它规定了通信双方需要遵循的数据速率、通信格式等规则。即使它很简单，但是因为应用广泛，所以还是很值得去了解UART的相关特点以及实际应用中的一些注意点。</p>\n<h2 id=\"发送与接收\"><a href=\"#发送与接收\" class=\"headerlink\" title=\"发送与接收\"></a>发送与接收</h2><p>UART将字节数据已一个个独立的位按照连续的方式发出，接收方已同样的方式接收并组成原字节数据，发送方与接收方都包含一个移位寄存器(shift register)用来将数据”串行化”或”反串行化。根据通信方式，UART可以分为单工、半双工、双工通信三类。</p>\n<h2 id=\"数据构成\"><a href=\"#数据构成\" class=\"headerlink\" title=\"数据构成\"></a>数据构成</h2><p>UART发送或接收的数据结构：起始位 + 数据位 + 校验位 + 停止位，其中除校验位可选外，其它都是必须项。</p>\n<h3 id=\"空闲模式\"><a href=\"#空闲模式\" class=\"headerlink\" title=\"空闲模式\"></a>空闲模式</h3><p>当总线出于空闲模式时，发送端需要保持高电平，这是电报的历史遗留(保持高电平用以指示通讯线或收发器没有遭到破坏)。<strong>这在利用GPIO软件模拟UART的时候尤其需要注意，如果忽略会导致通信无法实现</strong></p>\n<h3 id=\"起始位\"><a href=\"#起始位\" class=\"headerlink\" title=\"起始位\"></a>起始位</h3><p>每次通信总是已一个逻辑”0”的bit开始，称为起始位。因为在空闲模式总线处于逻辑”1”，当起始位出现时，会产生一个下降沿，容易用来产生唤醒终端，通知接收方即使处理接下来发送的数据。</p>\n<h3 id=\"数据位\"><a href=\"#数据位\" class=\"headerlink\" title=\"数据位\"></a>数据位</h3><p>数据位从5到9位不等，根据实际应用决定，大部分选择8位数据位，即一个字节。</p>\n<h3 id=\"校验位\"><a href=\"#校验位\" class=\"headerlink\" title=\"校验位\"></a>校验位</h3><p>这是可选项，分为奇校验、偶校验、空格校验、标记校验等。奇校验保证数据位与校验位中的”1”的总数为奇数，偶校验则相反。至于空格校验则是校验位为”0”,标记校验为”1”。</p>\n<h3 id=\"停止位\"><a href=\"#停止位\" class=\"headerlink\" title=\"停止位\"></a>停止位</h3><p>与起始位作用相反，标识通信结尾，为逻辑”1”。</p>\n","excerpt":"","more":"<p>通用异步收发器(UART)是嵌入式应用中最为常见的一中”总线协议”，之所以将UART归为总线协议中的一种，是因为广义上来讲，它规定了通信双方需要遵循的数据速率、通信格式等规则。即使它很简单，但是因为应用广泛，所以还是很值得去了解UART的相关特点以及实际应用中的一些注意点。</p>\n<h2 id=\"发送与接收\"><a href=\"#发送与接收\" class=\"headerlink\" title=\"发送与接收\"></a>发送与接收</h2><p>UART将字节数据已一个个独立的位按照连续的方式发出，接收方已同样的方式接收并组成原字节数据，发送方与接收方都包含一个移位寄存器(shift register)用来将数据”串行化”或”反串行化。根据通信方式，UART可以分为单工、半双工、双工通信三类。</p>\n<h2 id=\"数据构成\"><a href=\"#数据构成\" class=\"headerlink\" title=\"数据构成\"></a>数据构成</h2><p>UART发送或接收的数据结构：起始位 + 数据位 + 校验位 + 停止位，其中除校验位可选外，其它都是必须项。</p>\n<h3 id=\"空闲模式\"><a href=\"#空闲模式\" class=\"headerlink\" title=\"空闲模式\"></a>空闲模式</h3><p>当总线出于空闲模式时，发送端需要保持高电平，这是电报的历史遗留(保持高电平用以指示通讯线或收发器没有遭到破坏)。<strong>这在利用GPIO软件模拟UART的时候尤其需要注意，如果忽略会导致通信无法实现</strong></p>\n<h3 id=\"起始位\"><a href=\"#起始位\" class=\"headerlink\" title=\"起始位\"></a>起始位</h3><p>每次通信总是已一个逻辑”0”的bit开始，称为起始位。因为在空闲模式总线处于逻辑”1”，当起始位出现时，会产生一个下降沿，容易用来产生唤醒终端，通知接收方即使处理接下来发送的数据。</p>\n<h3 id=\"数据位\"><a href=\"#数据位\" class=\"headerlink\" title=\"数据位\"></a>数据位</h3><p>数据位从5到9位不等，根据实际应用决定，大部分选择8位数据位，即一个字节。</p>\n<h3 id=\"校验位\"><a href=\"#校验位\" class=\"headerlink\" title=\"校验位\"></a>校验位</h3><p>这是可选项，分为奇校验、偶校验、空格校验、标记校验等。奇校验保证数据位与校验位中的”1”的总数为奇数，偶校验则相反。至于空格校验则是校验位为”0”,标记校验为”1”。</p>\n<h3 id=\"停止位\"><a href=\"#停止位\" class=\"headerlink\" title=\"停止位\"></a>停止位</h3><p>与起始位作用相反，标识通信结尾，为逻辑”1”。</p>\n"},{"title":"如何合理命名你的代码","date":"2016-07-28T15:01:20.000Z","toc":true,"_content":"文中内容参考自Bob Nystrom的blog。[原文链接](http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/)\n<!--more-->\n> A name has two goals:\n\t- It needs to be clear: you need to know what the name refers to.\n\t- It needs to be precise: you need to know what it does not refer to.\n\n## 遵循最**简洁、精确**的命名原则\n### 省略那些从变量类型上就可以得知的信息\n这个规则主要用在使用静态类型的语言上，用户(程序员)通常知道一个变量的类型，那么如果此时再在变量的命名中添加关于变量类型的信息无疑是冗余的(*不是很赞同，如果是嵌入式开发者，尤其是从事单片机应用开发的程序员，现如今使用的大部分IDE或代码编辑工具对变量的自动补全、提示都支持的不够友好，例如keil。在处理一些变量的时候，知道变量的类型会让程序员知道这个变量占用的内存大小、存放位置，从而更好的去使用它。*)\n```cpp\n// Bad:\nString nameString;\nDockableModelessWindow dockableModelessWindow;\n\n// Better:\nString name;\nDockableModelessWindow window;\n```\n### 省略那些容易产生歧义的信息\n这点在我以往的命名中是个普遍存在的毛病，例如，声明一个用于存储文件路径的变量，我会命名为`string currentUsedFilePath`,虽然在一定程度上达到了变量名的自解释的作用，但是会让其他阅读你的程序的人产生误解，到底是current Used File`s Path，还是current Used FilePath(@_@);\n```cpp\n// Bad:\nfinalBattleMostDangerousBossMonster;\nweaklingFirstEncounterMonster;\n\n// Better:\nboss;\nfirstMonster;\n```\n### 省略那些在当前的上下文中可以得到的信息\n这点很好理解，比如你的项目中只用到LCD来完成显示相关信息，用来刷新显示的函数直接命名`display`和你命名`LCDDisplay`是一个效果的，但是后者显得会有些冗余，同样，类的成员命名也是一个道理；\n```cpp\n// Bad:\nclass AnnualHolidaySale {\n  int _annualSaleRebate;\n  void promoteHolidaySale() { ... }\n}\n\n// Better:\nclass AnnualHolidaySale {\n  int _rebate;\n  void promote() { ... }\n}\n```\n### 抛弃那些意义不大的信息\n一个原则：试想，如果去掉这部分信息，这个命名的意义变化了吗？如果没有，果断去掉，例如声明一个变量 `int tempVariable;`,去掉variable吧！\n```cpp\n// bad \nclass WaffleObject {\n  void garnish(List<Strawberry> strawberries) { ... }\n}\n// good one\nclass Waffle {\n  void garnish(List<Strawberry> strawberries) { ... }\n}\n```","source":"_posts/howToNameYourCode.md","raw":"---\ntitle: 如何合理命名你的代码\ndate: 2016-07-28 15:01:20\ntoc: true\ncategories: C\ntags: C 软件\n---\n文中内容参考自Bob Nystrom的blog。[原文链接](http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/)\n<!--more-->\n> A name has two goals:\n\t- It needs to be clear: you need to know what the name refers to.\n\t- It needs to be precise: you need to know what it does not refer to.\n\n## 遵循最**简洁、精确**的命名原则\n### 省略那些从变量类型上就可以得知的信息\n这个规则主要用在使用静态类型的语言上，用户(程序员)通常知道一个变量的类型，那么如果此时再在变量的命名中添加关于变量类型的信息无疑是冗余的(*不是很赞同，如果是嵌入式开发者，尤其是从事单片机应用开发的程序员，现如今使用的大部分IDE或代码编辑工具对变量的自动补全、提示都支持的不够友好，例如keil。在处理一些变量的时候，知道变量的类型会让程序员知道这个变量占用的内存大小、存放位置，从而更好的去使用它。*)\n```cpp\n// Bad:\nString nameString;\nDockableModelessWindow dockableModelessWindow;\n\n// Better:\nString name;\nDockableModelessWindow window;\n```\n### 省略那些容易产生歧义的信息\n这点在我以往的命名中是个普遍存在的毛病，例如，声明一个用于存储文件路径的变量，我会命名为`string currentUsedFilePath`,虽然在一定程度上达到了变量名的自解释的作用，但是会让其他阅读你的程序的人产生误解，到底是current Used File`s Path，还是current Used FilePath(@_@);\n```cpp\n// Bad:\nfinalBattleMostDangerousBossMonster;\nweaklingFirstEncounterMonster;\n\n// Better:\nboss;\nfirstMonster;\n```\n### 省略那些在当前的上下文中可以得到的信息\n这点很好理解，比如你的项目中只用到LCD来完成显示相关信息，用来刷新显示的函数直接命名`display`和你命名`LCDDisplay`是一个效果的，但是后者显得会有些冗余，同样，类的成员命名也是一个道理；\n```cpp\n// Bad:\nclass AnnualHolidaySale {\n  int _annualSaleRebate;\n  void promoteHolidaySale() { ... }\n}\n\n// Better:\nclass AnnualHolidaySale {\n  int _rebate;\n  void promote() { ... }\n}\n```\n### 抛弃那些意义不大的信息\n一个原则：试想，如果去掉这部分信息，这个命名的意义变化了吗？如果没有，果断去掉，例如声明一个变量 `int tempVariable;`,去掉variable吧！\n```cpp\n// bad \nclass WaffleObject {\n  void garnish(List<Strawberry> strawberries) { ... }\n}\n// good one\nclass Waffle {\n  void garnish(List<Strawberry> strawberries) { ... }\n}\n```","slug":"howToNameYourCode","published":1,"updated":"2016-09-14T03:06:54.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9aok001m70g52wpe6oio","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>文中内容参考自Bob Nystrom的blog。<a href=\"http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/\" target=\"_blank\" rel=\"external\">原文链接</a><br><a id=\"more\"></a></p>\n<blockquote>\n<p>A name has two goals:</p>\n<pre><code>- It needs to be clear: you need to know what the name refers to.\n- It needs to be precise: you need to know what it does not refer to.\n</code></pre></blockquote>\n<h2 id=\"遵循最简洁、精确的命名原则\"><a href=\"#遵循最简洁、精确的命名原则\" class=\"headerlink\" title=\"遵循最简洁、精确的命名原则\"></a>遵循最<strong>简洁、精确</strong>的命名原则</h2><h3 id=\"省略那些从变量类型上就可以得知的信息\"><a href=\"#省略那些从变量类型上就可以得知的信息\" class=\"headerlink\" title=\"省略那些从变量类型上就可以得知的信息\"></a>省略那些从变量类型上就可以得知的信息</h3><p>这个规则主要用在使用静态类型的语言上，用户(程序员)通常知道一个变量的类型，那么如果此时再在变量的命名中添加关于变量类型的信息无疑是冗余的(<em>不是很赞同，如果是嵌入式开发者，尤其是从事单片机应用开发的程序员，现如今使用的大部分IDE或代码编辑工具对变量的自动补全、提示都支持的不够友好，例如keil。在处理一些变量的时候，知道变量的类型会让程序员知道这个变量占用的内存大小、存放位置，从而更好的去使用它。</em>)<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad:</span></div><div class=\"line\">String nameString;</div><div class=\"line\">DockableModelessWindow dockableModelessWindow;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Better:</span></div><div class=\"line\">String name;</div><div class=\"line\">DockableModelessWindow window;</div></pre></td></tr></table></figure></p>\n<h3 id=\"省略那些容易产生歧义的信息\"><a href=\"#省略那些容易产生歧义的信息\" class=\"headerlink\" title=\"省略那些容易产生歧义的信息\"></a>省略那些容易产生歧义的信息</h3><p>这点在我以往的命名中是个普遍存在的毛病，例如，声明一个用于存储文件路径的变量，我会命名为<code>string currentUsedFilePath</code>,虽然在一定程度上达到了变量名的自解释的作用，但是会让其他阅读你的程序的人产生误解，到底是current Used File`s Path，还是current Used FilePath(@_@);<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad:</span></div><div class=\"line\">finalBattleMostDangerousBossMonster;</div><div class=\"line\">weaklingFirstEncounterMonster;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Better:</span></div><div class=\"line\">boss;</div><div class=\"line\">firstMonster;</div></pre></td></tr></table></figure></p>\n<h3 id=\"省略那些在当前的上下文中可以得到的信息\"><a href=\"#省略那些在当前的上下文中可以得到的信息\" class=\"headerlink\" title=\"省略那些在当前的上下文中可以得到的信息\"></a>省略那些在当前的上下文中可以得到的信息</h3><p>这点很好理解，比如你的项目中只用到LCD来完成显示相关信息，用来刷新显示的函数直接命名<code>display</code>和你命名<code>LCDDisplay</code>是一个效果的，但是后者显得会有些冗余，同样，类的成员命名也是一个道理；<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad:</span></div><div class=\"line\"><span class=\"keyword\">class</span> AnnualHolidaySale &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> <span class=\"number\">_</span>annualSaleRebate;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">promoteHolidaySale</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Better:</span></div><div class=\"line\"><span class=\"keyword\">class</span> AnnualHolidaySale &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> <span class=\"number\">_</span>rebate;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">promote</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"抛弃那些意义不大的信息\"><a href=\"#抛弃那些意义不大的信息\" class=\"headerlink\" title=\"抛弃那些意义不大的信息\"></a>抛弃那些意义不大的信息</h3><p>一个原则：试想，如果去掉这部分信息，这个命名的意义变化了吗？如果没有，果断去掉，例如声明一个变量 <code>int tempVariable;</code>,去掉variable吧！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad </span></div><div class=\"line\"><span class=\"keyword\">class</span> WaffleObject &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">garnish</span><span class=\"params\">(List&lt;Strawberry&gt; strawberries)</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// good one</span></div><div class=\"line\"><span class=\"keyword\">class</span> Waffle &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">garnish</span><span class=\"params\">(List&lt;Strawberry&gt; strawberries)</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>文中内容参考自Bob Nystrom的blog。<a href=\"http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/\">原文链接</a><br>","more":"</p>\n<blockquote>\n<p>A name has two goals:</p>\n<pre><code>- It needs to be clear: you need to know what the name refers to.\n- It needs to be precise: you need to know what it does not refer to.\n</code></pre></blockquote>\n<h2 id=\"遵循最简洁、精确的命名原则\"><a href=\"#遵循最简洁、精确的命名原则\" class=\"headerlink\" title=\"遵循最简洁、精确的命名原则\"></a>遵循最<strong>简洁、精确</strong>的命名原则</h2><h3 id=\"省略那些从变量类型上就可以得知的信息\"><a href=\"#省略那些从变量类型上就可以得知的信息\" class=\"headerlink\" title=\"省略那些从变量类型上就可以得知的信息\"></a>省略那些从变量类型上就可以得知的信息</h3><p>这个规则主要用在使用静态类型的语言上，用户(程序员)通常知道一个变量的类型，那么如果此时再在变量的命名中添加关于变量类型的信息无疑是冗余的(<em>不是很赞同，如果是嵌入式开发者，尤其是从事单片机应用开发的程序员，现如今使用的大部分IDE或代码编辑工具对变量的自动补全、提示都支持的不够友好，例如keil。在处理一些变量的时候，知道变量的类型会让程序员知道这个变量占用的内存大小、存放位置，从而更好的去使用它。</em>)<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad:</span></div><div class=\"line\">String nameString;</div><div class=\"line\">DockableModelessWindow dockableModelessWindow;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Better:</span></div><div class=\"line\">String name;</div><div class=\"line\">DockableModelessWindow window;</div></pre></td></tr></table></figure></p>\n<h3 id=\"省略那些容易产生歧义的信息\"><a href=\"#省略那些容易产生歧义的信息\" class=\"headerlink\" title=\"省略那些容易产生歧义的信息\"></a>省略那些容易产生歧义的信息</h3><p>这点在我以往的命名中是个普遍存在的毛病，例如，声明一个用于存储文件路径的变量，我会命名为<code>string currentUsedFilePath</code>,虽然在一定程度上达到了变量名的自解释的作用，但是会让其他阅读你的程序的人产生误解，到底是current Used File`s Path，还是current Used FilePath(@_@);<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad:</span></div><div class=\"line\">finalBattleMostDangerousBossMonster;</div><div class=\"line\">weaklingFirstEncounterMonster;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Better:</span></div><div class=\"line\">boss;</div><div class=\"line\">firstMonster;</div></pre></td></tr></table></figure></p>\n<h3 id=\"省略那些在当前的上下文中可以得到的信息\"><a href=\"#省略那些在当前的上下文中可以得到的信息\" class=\"headerlink\" title=\"省略那些在当前的上下文中可以得到的信息\"></a>省略那些在当前的上下文中可以得到的信息</h3><p>这点很好理解，比如你的项目中只用到LCD来完成显示相关信息，用来刷新显示的函数直接命名<code>display</code>和你命名<code>LCDDisplay</code>是一个效果的，但是后者显得会有些冗余，同样，类的成员命名也是一个道理；<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Bad:</span></div><div class=\"line\"><span class=\"keyword\">class</span> AnnualHolidaySale &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> <span class=\"number\">_</span>annualSaleRebate;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">promoteHolidaySale</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Better:</span></div><div class=\"line\"><span class=\"keyword\">class</span> AnnualHolidaySale &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> <span class=\"number\">_</span>rebate;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">promote</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"抛弃那些意义不大的信息\"><a href=\"#抛弃那些意义不大的信息\" class=\"headerlink\" title=\"抛弃那些意义不大的信息\"></a>抛弃那些意义不大的信息</h3><p>一个原则：试想，如果去掉这部分信息，这个命名的意义变化了吗？如果没有，果断去掉，例如声明一个变量 <code>int tempVariable;</code>,去掉variable吧！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bad </span></div><div class=\"line\"><span class=\"keyword\">class</span> WaffleObject &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">garnish</span><span class=\"params\">(List&lt;Strawberry&gt; strawberries)</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// good one</span></div><div class=\"line\"><span class=\"keyword\">class</span> Waffle &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">garnish</span><span class=\"params\">(List&lt;Strawberry&gt; strawberries)</span> </span>&#123; ... &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"开始嵌入式linux学习","date":"2016-09-23T09:05:55.000Z","toc":null,"_content":"\n从事单片机开发算起来也有快三年了，从慢慢摸索起步，到正儿八经的做项目，接国家课题，在单片机上花了很多功夫。期间做过简单的智能排气扇，也做过高大上的从下位机到上位机全部自己包办的国家级项目“楼宇安防系统”，单片机也从51到430再到ARM，我想我应该算是一合格的单片机开发者了吧。\n\n一直是裸机开发，对操作系统那块一直没有深入学习，只研究过freeRTOS这个实时系统，而且还没有用在实际开发中。最近很想玩玩操作系统，而且我希望以后进入物联网行业，对于物联网来说，我觉得跑系统是在是太有必要了，所以，打算从今儿开始，花一个月(应该不短吧)学习嵌入式linux，从裸机开发过渡到操作系统下的嵌入式开发上。\n\n一个月以后，回头再看今天写下的话，希望我已经是个可以从事嵌入式linux开发的程序猿了^_^","source":"_posts/startEmbeded.md","raw":"---\ntitle: 开始嵌入式linux学习\ndate: 2016-09-23 09:05:55\ntags:\ntoc:\ncategories:\n---\n\n从事单片机开发算起来也有快三年了，从慢慢摸索起步，到正儿八经的做项目，接国家课题，在单片机上花了很多功夫。期间做过简单的智能排气扇，也做过高大上的从下位机到上位机全部自己包办的国家级项目“楼宇安防系统”，单片机也从51到430再到ARM，我想我应该算是一合格的单片机开发者了吧。\n\n一直是裸机开发，对操作系统那块一直没有深入学习，只研究过freeRTOS这个实时系统，而且还没有用在实际开发中。最近很想玩玩操作系统，而且我希望以后进入物联网行业，对于物联网来说，我觉得跑系统是在是太有必要了，所以，打算从今儿开始，花一个月(应该不短吧)学习嵌入式linux，从裸机开发过渡到操作系统下的嵌入式开发上。\n\n一个月以后，回头再看今天写下的话，希望我已经是个可以从事嵌入式linux开发的程序猿了^_^","slug":"startEmbeded","published":1,"updated":"2016-09-29T07:59:38.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9aoo001q70g5pcu00mm1","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>从事单片机开发算起来也有快三年了，从慢慢摸索起步，到正儿八经的做项目，接国家课题，在单片机上花了很多功夫。期间做过简单的智能排气扇，也做过高大上的从下位机到上位机全部自己包办的国家级项目“楼宇安防系统”，单片机也从51到430再到ARM，我想我应该算是一合格的单片机开发者了吧。</p>\n<p>一直是裸机开发，对操作系统那块一直没有深入学习，只研究过freeRTOS这个实时系统，而且还没有用在实际开发中。最近很想玩玩操作系统，而且我希望以后进入物联网行业，对于物联网来说，我觉得跑系统是在是太有必要了，所以，打算从今儿开始，花一个月(应该不短吧)学习嵌入式linux，从裸机开发过渡到操作系统下的嵌入式开发上。</p>\n<p>一个月以后，回头再看今天写下的话，希望我已经是个可以从事嵌入式linux开发的程序猿了^_^</p>\n","excerpt":"","more":"<p>从事单片机开发算起来也有快三年了，从慢慢摸索起步，到正儿八经的做项目，接国家课题，在单片机上花了很多功夫。期间做过简单的智能排气扇，也做过高大上的从下位机到上位机全部自己包办的国家级项目“楼宇安防系统”，单片机也从51到430再到ARM，我想我应该算是一合格的单片机开发者了吧。</p>\n<p>一直是裸机开发，对操作系统那块一直没有深入学习，只研究过freeRTOS这个实时系统，而且还没有用在实际开发中。最近很想玩玩操作系统，而且我希望以后进入物联网行业，对于物联网来说，我觉得跑系统是在是太有必要了，所以，打算从今儿开始，花一个月(应该不短吧)学习嵌入式linux，从裸机开发过渡到操作系统下的嵌入式开发上。</p>\n<p>一个月以后，回头再看今天写下的话，希望我已经是个可以从事嵌入式linux开发的程序猿了^_^</p>\n"},{"title":"简易bootloader设计思路","date":"2016-07-06T14:42:23.000Z","toc":true,"_content":"作为表计产品，限制于使用环境及产品制造特性（如超声波焊），通常在表计生产完成尤其是送到客户手中后，想要再升级固件程序，如果没有bootloader的支持，难度与代价都很大。因此，为现有平台所有系列的MCU添加bootloader程序是个刚性的需求。最近需要实现V9821的在线升级功能，研究了两天初步有了思路，接下来就是实现了，先记录下初步的思路。\n\n<!-- more -->\n\n实现bootloader的前提条件有：\n\n- IAP功能\n- 代码区足够大或存在外部flash\n\n对于51单片机，最大支持64Kb的程序代码，其中包括中断向量、启动代码、用户代码、bootloader代码，因此需要合理分配flash空间。对于vango的V98xx系列单片机，程序存储区地址映射如下图:\n\n<center>![v9821_FLASH](http://o9kzgz0kz.bkt.clouddn.com/V9811_FLASH.jpg)</center>\n\nFlash存储器的**008000h--01FFFFh**的内容根据代码段选择寄存器`CBANK,SFR 0xA0`的配置，以32KB为单位，选择行的映射到程序存储器**0x8000-0xFFFF**区域。其中`common area`为公共代码区，使用时不需要切换`Code Bank`，默认代码段为`Bank1`。\n\n使用时刻根据实际情况考虑是否使用<code>bank switch</code>技术，因为我用于验证的用户代码不大，加上bootloader程序也远达不到64Kb的代码量，因此不分`bank`。\n\n## Flash存储器空间分配\n- 0x0000-0x03FF: 中断向量表\n- 0x0400-0x05FF: 512字节的出厂参数，单片机正常工作所必须的参数，不用于用户代码。\n- 0x0600-0xD5FF: 用户代码\n- 0xD600-0xD7FF: 中断映射代码\n- 0xD800-0xD8FF: 启动代码\n- 0xD900-0xFFFF: bootloader代码\n\n> 其中启动代码、bootloader均位于不可IAP区。**0x000-0x03FF为不可IAP区域，硬件不支持**\n\n\n## 软件设计思路\n\n1. 上电复位：执行startup，跳转到bootloader代码；\n2. 在bootloader中首先检查升级指令是否存在<sup>[1]</sup>，如果不存在跳转到用户代码，反之执行升级 。\n3. 用户代码中也可被升级指令切换至bootloader程序；\n4. 等待数据（等待时长可设），超时复位到用户代码；\n5. 接收升级数据并校验<sup>[2]</sup>。\n6. 写入update<sup>[3]</sup>。\n7. 全部接收完成并校验通过，擦除用户代码，写入升级数据<sup>[4]</sup>。\n\n## note\n\n1. 可使用xdata区的固定位置的全局变量或者相关IO标志。\n2. 使用hex文件格式的校验方式：校验和 = 0x100 - 累加和\n3. 如果代码不超过32KB，直接写入update区。如果超过32KB，使用外部存储或者直接擦除用户代码，写入升级数据。\n4. 写入的时候以16个字节为一组写入。","source":"_posts/simple-bootloader-for51.md","raw":"---\ntitle: 简易bootloader设计思路\ndate: 2016-07-06 14:42:23\ntoc: true\ncategories: bootloader\ntags: 嵌入式 单片机\n---\n作为表计产品，限制于使用环境及产品制造特性（如超声波焊），通常在表计生产完成尤其是送到客户手中后，想要再升级固件程序，如果没有bootloader的支持，难度与代价都很大。因此，为现有平台所有系列的MCU添加bootloader程序是个刚性的需求。最近需要实现V9821的在线升级功能，研究了两天初步有了思路，接下来就是实现了，先记录下初步的思路。\n\n<!-- more -->\n\n实现bootloader的前提条件有：\n\n- IAP功能\n- 代码区足够大或存在外部flash\n\n对于51单片机，最大支持64Kb的程序代码，其中包括中断向量、启动代码、用户代码、bootloader代码，因此需要合理分配flash空间。对于vango的V98xx系列单片机，程序存储区地址映射如下图:\n\n<center>![v9821_FLASH](http://o9kzgz0kz.bkt.clouddn.com/V9811_FLASH.jpg)</center>\n\nFlash存储器的**008000h--01FFFFh**的内容根据代码段选择寄存器`CBANK,SFR 0xA0`的配置，以32KB为单位，选择行的映射到程序存储器**0x8000-0xFFFF**区域。其中`common area`为公共代码区，使用时不需要切换`Code Bank`，默认代码段为`Bank1`。\n\n使用时刻根据实际情况考虑是否使用<code>bank switch</code>技术，因为我用于验证的用户代码不大，加上bootloader程序也远达不到64Kb的代码量，因此不分`bank`。\n\n## Flash存储器空间分配\n- 0x0000-0x03FF: 中断向量表\n- 0x0400-0x05FF: 512字节的出厂参数，单片机正常工作所必须的参数，不用于用户代码。\n- 0x0600-0xD5FF: 用户代码\n- 0xD600-0xD7FF: 中断映射代码\n- 0xD800-0xD8FF: 启动代码\n- 0xD900-0xFFFF: bootloader代码\n\n> 其中启动代码、bootloader均位于不可IAP区。**0x000-0x03FF为不可IAP区域，硬件不支持**\n\n\n## 软件设计思路\n\n1. 上电复位：执行startup，跳转到bootloader代码；\n2. 在bootloader中首先检查升级指令是否存在<sup>[1]</sup>，如果不存在跳转到用户代码，反之执行升级 。\n3. 用户代码中也可被升级指令切换至bootloader程序；\n4. 等待数据（等待时长可设），超时复位到用户代码；\n5. 接收升级数据并校验<sup>[2]</sup>。\n6. 写入update<sup>[3]</sup>。\n7. 全部接收完成并校验通过，擦除用户代码，写入升级数据<sup>[4]</sup>。\n\n## note\n\n1. 可使用xdata区的固定位置的全局变量或者相关IO标志。\n2. 使用hex文件格式的校验方式：校验和 = 0x100 - 累加和\n3. 如果代码不超过32KB，直接写入update区。如果超过32KB，使用外部存储或者直接擦除用户代码，写入升级数据。\n4. 写入的时候以16个字节为一组写入。","slug":"simple-bootloader-for51","published":1,"updated":"2016-08-01T05:43:25.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9aos001t70g57kgidhql","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>作为表计产品，限制于使用环境及产品制造特性（如超声波焊），通常在表计生产完成尤其是送到客户手中后，想要再升级固件程序，如果没有bootloader的支持，难度与代价都很大。因此，为现有平台所有系列的MCU添加bootloader程序是个刚性的需求。最近需要实现V9821的在线升级功能，研究了两天初步有了思路，接下来就是实现了，先记录下初步的思路。</p>\n<a id=\"more\"></a>\n<p>实现bootloader的前提条件有：</p>\n<ul>\n<li>IAP功能</li>\n<li>代码区足够大或存在外部flash</li>\n</ul>\n<p>对于51单片机，最大支持64Kb的程序代码，其中包括中断向量、启动代码、用户代码、bootloader代码，因此需要合理分配flash空间。对于vango的V98xx系列单片机，程序存储区地址映射如下图:</p>\n<center><img src=\"http://o9kzgz0kz.bkt.clouddn.com/V9811_FLASH.jpg\" alt=\"v9821_FLASH\"></center>\n\n<p>Flash存储器的<strong>008000h–01FFFFh</strong>的内容根据代码段选择寄存器<code>CBANK,SFR 0xA0</code>的配置，以32KB为单位，选择行的映射到程序存储器<strong>0x8000-0xFFFF</strong>区域。其中<code>common area</code>为公共代码区，使用时不需要切换<code>Code Bank</code>，默认代码段为<code>Bank1</code>。</p>\n<p>使用时刻根据实际情况考虑是否使用<code>bank switch</code>技术，因为我用于验证的用户代码不大，加上bootloader程序也远达不到64Kb的代码量，因此不分<code>bank</code>。</p>\n<h2 id=\"Flash存储器空间分配\"><a href=\"#Flash存储器空间分配\" class=\"headerlink\" title=\"Flash存储器空间分配\"></a>Flash存储器空间分配</h2><ul>\n<li>0x0000-0x03FF: 中断向量表</li>\n<li>0x0400-0x05FF: 512字节的出厂参数，单片机正常工作所必须的参数，不用于用户代码。</li>\n<li>0x0600-0xD5FF: 用户代码</li>\n<li>0xD600-0xD7FF: 中断映射代码</li>\n<li>0xD800-0xD8FF: 启动代码</li>\n<li>0xD900-0xFFFF: bootloader代码</li>\n</ul>\n<blockquote>\n<p>其中启动代码、bootloader均位于不可IAP区。<strong>0x000-0x03FF为不可IAP区域，硬件不支持</strong></p>\n</blockquote>\n<h2 id=\"软件设计思路\"><a href=\"#软件设计思路\" class=\"headerlink\" title=\"软件设计思路\"></a>软件设计思路</h2><ol>\n<li>上电复位：执行startup，跳转到bootloader代码；</li>\n<li>在bootloader中首先检查升级指令是否存在<sup>[1]</sup>，如果不存在跳转到用户代码，反之执行升级 。</li>\n<li>用户代码中也可被升级指令切换至bootloader程序；</li>\n<li>等待数据（等待时长可设），超时复位到用户代码；</li>\n<li>接收升级数据并校验<sup>[2]</sup>。</li>\n<li>写入update<sup>[3]</sup>。</li>\n<li>全部接收完成并校验通过，擦除用户代码，写入升级数据<sup>[4]</sup>。</li>\n</ol>\n<h2 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note\"></a>note</h2><ol>\n<li>可使用xdata区的固定位置的全局变量或者相关IO标志。</li>\n<li>使用hex文件格式的校验方式：校验和 = 0x100 - 累加和</li>\n<li>如果代码不超过32KB，直接写入update区。如果超过32KB，使用外部存储或者直接擦除用户代码，写入升级数据。</li>\n<li>写入的时候以16个字节为一组写入。</li>\n</ol>\n","excerpt":"<p>作为表计产品，限制于使用环境及产品制造特性（如超声波焊），通常在表计生产完成尤其是送到客户手中后，想要再升级固件程序，如果没有bootloader的支持，难度与代价都很大。因此，为现有平台所有系列的MCU添加bootloader程序是个刚性的需求。最近需要实现V9821的在线升级功能，研究了两天初步有了思路，接下来就是实现了，先记录下初步的思路。</p>","more":"<p>实现bootloader的前提条件有：</p>\n<ul>\n<li>IAP功能</li>\n<li>代码区足够大或存在外部flash</li>\n</ul>\n<p>对于51单片机，最大支持64Kb的程序代码，其中包括中断向量、启动代码、用户代码、bootloader代码，因此需要合理分配flash空间。对于vango的V98xx系列单片机，程序存储区地址映射如下图:</p>\n<center><img src=\"http://o9kzgz0kz.bkt.clouddn.com/V9811_FLASH.jpg\" alt=\"v9821_FLASH\"></center>\n\n<p>Flash存储器的<strong>008000h–01FFFFh</strong>的内容根据代码段选择寄存器<code>CBANK,SFR 0xA0</code>的配置，以32KB为单位，选择行的映射到程序存储器<strong>0x8000-0xFFFF</strong>区域。其中<code>common area</code>为公共代码区，使用时不需要切换<code>Code Bank</code>，默认代码段为<code>Bank1</code>。</p>\n<p>使用时刻根据实际情况考虑是否使用<code>bank switch</code>技术，因为我用于验证的用户代码不大，加上bootloader程序也远达不到64Kb的代码量，因此不分<code>bank</code>。</p>\n<h2 id=\"Flash存储器空间分配\"><a href=\"#Flash存储器空间分配\" class=\"headerlink\" title=\"Flash存储器空间分配\"></a>Flash存储器空间分配</h2><ul>\n<li>0x0000-0x03FF: 中断向量表</li>\n<li>0x0400-0x05FF: 512字节的出厂参数，单片机正常工作所必须的参数，不用于用户代码。</li>\n<li>0x0600-0xD5FF: 用户代码</li>\n<li>0xD600-0xD7FF: 中断映射代码</li>\n<li>0xD800-0xD8FF: 启动代码</li>\n<li>0xD900-0xFFFF: bootloader代码</li>\n</ul>\n<blockquote>\n<p>其中启动代码、bootloader均位于不可IAP区。<strong>0x000-0x03FF为不可IAP区域，硬件不支持</strong></p>\n</blockquote>\n<h2 id=\"软件设计思路\"><a href=\"#软件设计思路\" class=\"headerlink\" title=\"软件设计思路\"></a>软件设计思路</h2><ol>\n<li>上电复位：执行startup，跳转到bootloader代码；</li>\n<li>在bootloader中首先检查升级指令是否存在<sup>[1]</sup>，如果不存在跳转到用户代码，反之执行升级 。</li>\n<li>用户代码中也可被升级指令切换至bootloader程序；</li>\n<li>等待数据（等待时长可设），超时复位到用户代码；</li>\n<li>接收升级数据并校验<sup>[2]</sup>。</li>\n<li>写入update<sup>[3]</sup>。</li>\n<li>全部接收完成并校验通过，擦除用户代码，写入升级数据<sup>[4]</sup>。</li>\n</ol>\n<h2 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note\"></a>note</h2><ol>\n<li>可使用xdata区的固定位置的全局变量或者相关IO标志。</li>\n<li>使用hex文件格式的校验方式：校验和 = 0x100 - 累加和</li>\n<li>如果代码不超过32KB，直接写入update区。如果超过32KB，使用外部存储或者直接擦除用户代码，写入升级数据。</li>\n<li>写入的时候以16个字节为一组写入。</li>\n</ol>"},{"title":"升级助手上位机（使用C#编写）","date":"2016-07-26T16:33:21.000Z","toc":true,"_content":"bootloader写完之后，使用C#写了一个配套的升级助手。不得不说C#真的是一个很优秀的语言，而**visual studio**也完全可以称之为最强IDE，没有之一！配合[MSDN](https://msdn.microsoft.com/zh-cn/dn308572.aspx)，花了一个星期熟悉C#,然后两周不到完成了51升级助手的开发。\n\n## 主界面\n<center>![51升级助手](http://o9kzgz0kz.bkt.clouddn.com/51bootloader.jpg)</center>\n\n> 特点:\n1. 支持多种不同的通信协议（主要用于升级前的握手）\n\t- 用户自定义协议\n\t- IEC62056-21 C模式\n\t- DL/T645-07\n2. 配合51bootloader完成用户代码的更新\n\t- 支持原生Intel HEX-80格式\n\t- 支持设定用户代码段地址范围\n\t- 支持自动重发\n\t- 自动剔除全0xFF数据，减少发送数据量\n\t\n> 使用到的功能模块:\n1.串口通信(使用C#官方serialPort类库);\n2.文件读写(使用C#官方File类库);\n3.设置文件(使用xml保存);\n4.定时器(用于通信时序控制);\n\n## 整体思路\n首先上位机升级助手打开本地`hex`文件，对hex文件进行格式化，方便后面的数据传输。然后下位机在接收到升级指令后会判断是否符合升级条件，如果符合，则跳转到`bootloader`程序中准备接收升级数据，否则忽略升级指令，并返回响应帧通知上位机。\n在升级的过程中，双方遵循同一个校验算法，下位机校验数据通过，通过`IAP`写入`flash`，否则请求重发。\n下位机检测到处理到用户代码段的最后一帧数据，发送升级完成指令，下位机接收校验通过，通过长跳转指令调到用户代码，完成程序升级。\n因为下位机`bootloader`采用查询的方式通信，为了提高可靠信，及降低出错时的重传代价，一次传输的代码字节限制在16个字节，所以需要格式化`hex-80`文件\n```cpp\nprivate bool handleHexFile(string filePath)\n{\n    string[] Hex=System.IO.File.ReadAllLines(filePath);\n    string[] formatHex= System.IO.File.ReadAllLines(Application.StartupPath + \"\\\\tempHexFile.txt\");\n    uint dateAddr = 0;\n    uint dateLen = 0;\n    foreach (string hexLine in Hex)\n    {\n        if (!string.IsNullOrEmpty(hexLine))\n        {\n            if (hexLine.Substring(0, 1) == \":\")          // hex-80文件以冒号\":\"开头\n            {\n                dateLen = Convert.ToUInt32(hexLine.Substring(1,2).Trim(),16);\n                dateAddr = Convert.ToUInt32(hexLine.Substring(3, 4).Trim(),16);\n                if (dateLen == 0)\n                {\n                    continue;\n                }\n                uint modLine = dateAddr / 16;\n                uint modByte = dateAddr % 16 + 1;\n                uint modLen = dateLen;\n                string[] tempStr=null;\n                tempStr = formatHex[modLine].Trim().Split(' ');\n                \n                for (int i = 0; i < modLen*2; i+=2)\n                {\n                    tempStr[modByte] = hexLine.Substring(9 + i, 2).Trim();\n                    if (modByte>=16)\n                    {\n                        string temp = null;\n                        for (int n = 0; n < tempStr.Length; n++)\n                        {\n                            temp += (tempStr[n].TrimStart() + ' ');\n                        }\n                        formatHex[modLine] = temp;\n                       \n                        modByte = 0;\n                        modLine++;\n                        tempStr = formatHex[modLine].Trim().Split(' ');\n                    }\n                    modByte++;\n                }\n                string temp2 = null;\n                for (int n = 0; n < tempStr.Length; n++)\n                {\n                    temp2 += (tempStr[n].TrimStart() + ' ');\n                }\n                formatHex[modLine] = temp2;\n\n            }\n            else\n            {\n                tbInformation.AppendText(\"empty\");\n                return false;\n            }\n        }    \n    }\n    updateFile = formatHex;\n    System.IO.File.WriteAllLines(Application.StartupPath + \"\\\\HexFile.txt\", formatHex);\n    return true;\n}\n```\n除此之外，根据通信协议完成通讯部分的代码设计，一个可用的升级助手基本完成。","source":"_posts/updateAssistant.md","raw":"---\ntitle: 升级助手上位机（使用C#编写）\ndate: 2016-07-26 16:33:21\ntoc: true\ncategories: C#\ntags: C# 上位机 串口\n---\nbootloader写完之后，使用C#写了一个配套的升级助手。不得不说C#真的是一个很优秀的语言，而**visual studio**也完全可以称之为最强IDE，没有之一！配合[MSDN](https://msdn.microsoft.com/zh-cn/dn308572.aspx)，花了一个星期熟悉C#,然后两周不到完成了51升级助手的开发。\n\n## 主界面\n<center>![51升级助手](http://o9kzgz0kz.bkt.clouddn.com/51bootloader.jpg)</center>\n\n> 特点:\n1. 支持多种不同的通信协议（主要用于升级前的握手）\n\t- 用户自定义协议\n\t- IEC62056-21 C模式\n\t- DL/T645-07\n2. 配合51bootloader完成用户代码的更新\n\t- 支持原生Intel HEX-80格式\n\t- 支持设定用户代码段地址范围\n\t- 支持自动重发\n\t- 自动剔除全0xFF数据，减少发送数据量\n\t\n> 使用到的功能模块:\n1.串口通信(使用C#官方serialPort类库);\n2.文件读写(使用C#官方File类库);\n3.设置文件(使用xml保存);\n4.定时器(用于通信时序控制);\n\n## 整体思路\n首先上位机升级助手打开本地`hex`文件，对hex文件进行格式化，方便后面的数据传输。然后下位机在接收到升级指令后会判断是否符合升级条件，如果符合，则跳转到`bootloader`程序中准备接收升级数据，否则忽略升级指令，并返回响应帧通知上位机。\n在升级的过程中，双方遵循同一个校验算法，下位机校验数据通过，通过`IAP`写入`flash`，否则请求重发。\n下位机检测到处理到用户代码段的最后一帧数据，发送升级完成指令，下位机接收校验通过，通过长跳转指令调到用户代码，完成程序升级。\n因为下位机`bootloader`采用查询的方式通信，为了提高可靠信，及降低出错时的重传代价，一次传输的代码字节限制在16个字节，所以需要格式化`hex-80`文件\n```cpp\nprivate bool handleHexFile(string filePath)\n{\n    string[] Hex=System.IO.File.ReadAllLines(filePath);\n    string[] formatHex= System.IO.File.ReadAllLines(Application.StartupPath + \"\\\\tempHexFile.txt\");\n    uint dateAddr = 0;\n    uint dateLen = 0;\n    foreach (string hexLine in Hex)\n    {\n        if (!string.IsNullOrEmpty(hexLine))\n        {\n            if (hexLine.Substring(0, 1) == \":\")          // hex-80文件以冒号\":\"开头\n            {\n                dateLen = Convert.ToUInt32(hexLine.Substring(1,2).Trim(),16);\n                dateAddr = Convert.ToUInt32(hexLine.Substring(3, 4).Trim(),16);\n                if (dateLen == 0)\n                {\n                    continue;\n                }\n                uint modLine = dateAddr / 16;\n                uint modByte = dateAddr % 16 + 1;\n                uint modLen = dateLen;\n                string[] tempStr=null;\n                tempStr = formatHex[modLine].Trim().Split(' ');\n                \n                for (int i = 0; i < modLen*2; i+=2)\n                {\n                    tempStr[modByte] = hexLine.Substring(9 + i, 2).Trim();\n                    if (modByte>=16)\n                    {\n                        string temp = null;\n                        for (int n = 0; n < tempStr.Length; n++)\n                        {\n                            temp += (tempStr[n].TrimStart() + ' ');\n                        }\n                        formatHex[modLine] = temp;\n                       \n                        modByte = 0;\n                        modLine++;\n                        tempStr = formatHex[modLine].Trim().Split(' ');\n                    }\n                    modByte++;\n                }\n                string temp2 = null;\n                for (int n = 0; n < tempStr.Length; n++)\n                {\n                    temp2 += (tempStr[n].TrimStart() + ' ');\n                }\n                formatHex[modLine] = temp2;\n\n            }\n            else\n            {\n                tbInformation.AppendText(\"empty\");\n                return false;\n            }\n        }    \n    }\n    updateFile = formatHex;\n    System.IO.File.WriteAllLines(Application.StartupPath + \"\\\\HexFile.txt\", formatHex);\n    return true;\n}\n```\n除此之外，根据通信协议完成通讯部分的代码设计，一个可用的升级助手基本完成。","slug":"updateAssistant","published":1,"updated":"2016-09-14T03:07:50.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0aj9aow001x70g5ry2htf8v","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>bootloader写完之后，使用C#写了一个配套的升级助手。不得不说C#真的是一个很优秀的语言，而<strong>visual studio</strong>也完全可以称之为最强IDE，没有之一！配合<a href=\"https://msdn.microsoft.com/zh-cn/dn308572.aspx\" target=\"_blank\" rel=\"external\">MSDN</a>，花了一个星期熟悉C#,然后两周不到完成了51升级助手的开发。</p>\n<h2 id=\"主界面\"><a href=\"#主界面\" class=\"headerlink\" title=\"主界面\"></a>主界面</h2><center><img src=\"http://o9kzgz0kz.bkt.clouddn.com/51bootloader.jpg\" alt=\"51升级助手\"></center>\n\n<blockquote>\n<p>特点:</p>\n<ol>\n<li>支持多种不同的通信协议（主要用于升级前的握手）<ul>\n<li>用户自定义协议</li>\n<li>IEC62056-21 C模式</li>\n<li>DL/T645-07</li>\n</ul>\n</li>\n<li>配合51bootloader完成用户代码的更新<ul>\n<li>支持原生Intel HEX-80格式</li>\n<li>支持设定用户代码段地址范围</li>\n<li>支持自动重发</li>\n<li>自动剔除全0xFF数据，减少发送数据量</li>\n</ul>\n</li>\n</ol>\n<p>使用到的功能模块:<br>1.串口通信(使用C#官方serialPort类库);<br>2.文件读写(使用C#官方File类库);<br>3.设置文件(使用xml保存);<br>4.定时器(用于通信时序控制);</p>\n</blockquote>\n<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><p>首先上位机升级助手打开本地<code>hex</code>文件，对hex文件进行格式化，方便后面的数据传输。然后下位机在接收到升级指令后会判断是否符合升级条件，如果符合，则跳转到<code>bootloader</code>程序中准备接收升级数据，否则忽略升级指令，并返回响应帧通知上位机。<br>在升级的过程中，双方遵循同一个校验算法，下位机校验数据通过，通过<code>IAP</code>写入<code>flash</code>，否则请求重发。<br>下位机检测到处理到用户代码段的最后一帧数据，发送升级完成指令，下位机接收校验通过，通过长跳转指令调到用户代码，完成程序升级。<br>因为下位机<code>bootloader</code>采用查询的方式通信，为了提高可靠信，及降低出错时的重传代价，一次传输的代码字节限制在16个字节，所以需要格式化<code>hex-80</code>文件<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> <span class=\"title\">handleHexFile</span><span class=\"params\">(<span class=\"built_in\">string</span> filePath)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">string</span>[] Hex=System.IO.File.ReadAllLines(filePath);</div><div class=\"line\">    <span class=\"built_in\">string</span>[] formatHex= System.IO.File.ReadAllLines(Application.StartupPath + <span class=\"string\">\"\\\\tempHexFile.txt\"</span>);</div><div class=\"line\">    uint dateAddr = <span class=\"number\">0</span>;</div><div class=\"line\">    uint dateLen = <span class=\"number\">0</span>;</div><div class=\"line\">    foreach (<span class=\"built_in\">string</span> hexLine in Hex)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(hexLine))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (hexLine.Substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>) == <span class=\"string\">\":\"</span>)          <span class=\"comment\">// hex-80文件以冒号\":\"开头</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                dateLen = Convert.ToUInt32(hexLine.Substring(<span class=\"number\">1</span>,<span class=\"number\">2</span>).Trim(),<span class=\"number\">16</span>);</div><div class=\"line\">                dateAddr = Convert.ToUInt32(hexLine.Substring(<span class=\"number\">3</span>, <span class=\"number\">4</span>).Trim(),<span class=\"number\">16</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (dateLen == <span class=\"number\">0</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                uint modLine = dateAddr / <span class=\"number\">16</span>;</div><div class=\"line\">                uint modByte = dateAddr % <span class=\"number\">16</span> + <span class=\"number\">1</span>;</div><div class=\"line\">                uint modLen = dateLen;</div><div class=\"line\">                <span class=\"built_in\">string</span>[] tempStr=null;</div><div class=\"line\">                tempStr = formatHex[modLine].Trim().Split(<span class=\"string\">' '</span>);</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; modLen*<span class=\"number\">2</span>; i+=<span class=\"number\">2</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    tempStr[modByte] = hexLine.Substring(<span class=\"number\">9</span> + i, <span class=\"number\">2</span>).Trim();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (modByte&gt;=<span class=\"number\">16</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"built_in\">string</span> temp = null;</div><div class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n = <span class=\"number\">0</span>; n &lt; tempStr.Length; n++)</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            temp += (tempStr[n].TrimStart() + <span class=\"string\">' '</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        formatHex[modLine] = temp;</div><div class=\"line\">                       </div><div class=\"line\">                        modByte = <span class=\"number\">0</span>;</div><div class=\"line\">                        modLine++;</div><div class=\"line\">                        tempStr = formatHex[modLine].Trim().Split(<span class=\"string\">' '</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    modByte++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"built_in\">string</span> temp2 = null;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n = <span class=\"number\">0</span>; n &lt; tempStr.Length; n++)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    temp2 += (tempStr[n].TrimStart() + <span class=\"string\">' '</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                formatHex[modLine] = temp2;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                tbInformation.AppendText(<span class=\"string\">\"empty\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;    </div><div class=\"line\">    &#125;</div><div class=\"line\">    updateFile = formatHex;</div><div class=\"line\">    System.IO.File.WriteAllLines(Application.StartupPath + <span class=\"string\">\"\\\\HexFile.txt\"</span>, formatHex);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>除此之外，根据通信协议完成通讯部分的代码设计，一个可用的升级助手基本完成。</p>\n","excerpt":"","more":"<p>bootloader写完之后，使用C#写了一个配套的升级助手。不得不说C#真的是一个很优秀的语言，而<strong>visual studio</strong>也完全可以称之为最强IDE，没有之一！配合<a href=\"https://msdn.microsoft.com/zh-cn/dn308572.aspx\">MSDN</a>，花了一个星期熟悉C#,然后两周不到完成了51升级助手的开发。</p>\n<h2 id=\"主界面\"><a href=\"#主界面\" class=\"headerlink\" title=\"主界面\"></a>主界面</h2><center><img src=\"http://o9kzgz0kz.bkt.clouddn.com/51bootloader.jpg\" alt=\"51升级助手\"></center>\n\n<blockquote>\n<p>特点:</p>\n<ol>\n<li>支持多种不同的通信协议（主要用于升级前的握手）<ul>\n<li>用户自定义协议</li>\n<li>IEC62056-21 C模式</li>\n<li>DL/T645-07</li>\n</ul>\n</li>\n<li>配合51bootloader完成用户代码的更新<ul>\n<li>支持原生Intel HEX-80格式</li>\n<li>支持设定用户代码段地址范围</li>\n<li>支持自动重发</li>\n<li>自动剔除全0xFF数据，减少发送数据量</li>\n</ul>\n</li>\n</ol>\n<p>使用到的功能模块:<br>1.串口通信(使用C#官方serialPort类库);<br>2.文件读写(使用C#官方File类库);<br>3.设置文件(使用xml保存);<br>4.定时器(用于通信时序控制);</p>\n</blockquote>\n<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><p>首先上位机升级助手打开本地<code>hex</code>文件，对hex文件进行格式化，方便后面的数据传输。然后下位机在接收到升级指令后会判断是否符合升级条件，如果符合，则跳转到<code>bootloader</code>程序中准备接收升级数据，否则忽略升级指令，并返回响应帧通知上位机。<br>在升级的过程中，双方遵循同一个校验算法，下位机校验数据通过，通过<code>IAP</code>写入<code>flash</code>，否则请求重发。<br>下位机检测到处理到用户代码段的最后一帧数据，发送升级完成指令，下位机接收校验通过，通过长跳转指令调到用户代码，完成程序升级。<br>因为下位机<code>bootloader</code>采用查询的方式通信，为了提高可靠信，及降低出错时的重传代价，一次传输的代码字节限制在16个字节，所以需要格式化<code>hex-80</code>文件<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> <span class=\"title\">handleHexFile</span><span class=\"params\">(<span class=\"built_in\">string</span> filePath)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">string</span>[] Hex=System.IO.File.ReadAllLines(filePath);</div><div class=\"line\">    <span class=\"built_in\">string</span>[] formatHex= System.IO.File.ReadAllLines(Application.StartupPath + <span class=\"string\">\"\\\\tempHexFile.txt\"</span>);</div><div class=\"line\">    uint dateAddr = <span class=\"number\">0</span>;</div><div class=\"line\">    uint dateLen = <span class=\"number\">0</span>;</div><div class=\"line\">    foreach (<span class=\"built_in\">string</span> hexLine in Hex)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(hexLine))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (hexLine.Substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>) == <span class=\"string\">\":\"</span>)          <span class=\"comment\">// hex-80文件以冒号\":\"开头</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                dateLen = Convert.ToUInt32(hexLine.Substring(<span class=\"number\">1</span>,<span class=\"number\">2</span>).Trim(),<span class=\"number\">16</span>);</div><div class=\"line\">                dateAddr = Convert.ToUInt32(hexLine.Substring(<span class=\"number\">3</span>, <span class=\"number\">4</span>).Trim(),<span class=\"number\">16</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (dateLen == <span class=\"number\">0</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                uint modLine = dateAddr / <span class=\"number\">16</span>;</div><div class=\"line\">                uint modByte = dateAddr % <span class=\"number\">16</span> + <span class=\"number\">1</span>;</div><div class=\"line\">                uint modLen = dateLen;</div><div class=\"line\">                <span class=\"built_in\">string</span>[] tempStr=null;</div><div class=\"line\">                tempStr = formatHex[modLine].Trim().Split(<span class=\"string\">' '</span>);</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; modLen*<span class=\"number\">2</span>; i+=<span class=\"number\">2</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    tempStr[modByte] = hexLine.Substring(<span class=\"number\">9</span> + i, <span class=\"number\">2</span>).Trim();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (modByte&gt;=<span class=\"number\">16</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"built_in\">string</span> temp = null;</div><div class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n = <span class=\"number\">0</span>; n &lt; tempStr.Length; n++)</div><div class=\"line\">                        &#123;</div><div class=\"line\">                            temp += (tempStr[n].TrimStart() + <span class=\"string\">' '</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        formatHex[modLine] = temp;</div><div class=\"line\">                       </div><div class=\"line\">                        modByte = <span class=\"number\">0</span>;</div><div class=\"line\">                        modLine++;</div><div class=\"line\">                        tempStr = formatHex[modLine].Trim().Split(<span class=\"string\">' '</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    modByte++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"built_in\">string</span> temp2 = null;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n = <span class=\"number\">0</span>; n &lt; tempStr.Length; n++)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    temp2 += (tempStr[n].TrimStart() + <span class=\"string\">' '</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                formatHex[modLine] = temp2;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                tbInformation.AppendText(<span class=\"string\">\"empty\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;    </div><div class=\"line\">    &#125;</div><div class=\"line\">    updateFile = formatHex;</div><div class=\"line\">    System.IO.File.WriteAllLines(Application.StartupPath + <span class=\"string\">\"\\\\HexFile.txt\"</span>, formatHex);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>除此之外，根据通信协议完成通讯部分的代码设计，一个可用的升级助手基本完成。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0aj9amz000270g5wwsz08ms","category_id":"cj0aj9ana000670g56bngqms5","_id":"cj0aj9anj000e70g5lvca34jf"},{"post_id":"cj0aj9an4000470g5vzvott22","category_id":"cj0aj9ang000b70g5ar51z7hm","_id":"cj0aj9anr000l70g599tu1d35"},{"post_id":"cj0aj9anf000a70g5scqpm698","category_id":"cj0aj9anm000h70g5g5jl0djb","_id":"cj0aj9anx000r70g5xmtmgj5g"},{"post_id":"cj0aj9anh000d70g513ff81j9","category_id":"cj0aj9ans000n70g5snksd52z","_id":"cj0aj9ao2000x70g5r4sx305o"},{"post_id":"cj0aj9ank000f70g5q2282sw7","category_id":"cj0aj9ans000n70g5snksd52z","_id":"cj0aj9ao7001370g5g8e1vue4"},{"post_id":"cj0aj9ann000j70g5uyhka6fc","category_id":"cj0aj9ao3000y70g5tvh28fbw","_id":"cj0aj9aoc001970g5lqj4mrbc"},{"post_id":"cj0aj9aob001870g5aj96rrbe","category_id":"cj0aj9ang000b70g5ar51z7hm","_id":"cj0aj9aog001f70g5gwabcow1"},{"post_id":"cj0aj9anp000k70g5lxzaqvto","category_id":"cj0aj9ans000n70g5snksd52z","_id":"cj0aj9aoh001j70g51jptbnk9"},{"post_id":"cj0aj9any000u70g5zj3b71tm","category_id":"cj0aj9aoe001b70g5vv9jx3tq","_id":"cj0aj9aol001n70g56jwqio99"},{"post_id":"cj0aj9aoi001k70g5tgecmusc","category_id":"cj0aj9ans000n70g5snksd52z","_id":"cj0aj9aor001s70g5zvtdzgsk"},{"post_id":"cj0aj9ao1000w70g5r3c09xyu","category_id":"cj0aj9aoe001b70g5vv9jx3tq","_id":"cj0aj9aow001v70g5q4q73dbm"},{"post_id":"cj0aj9aok001m70g52wpe6oio","category_id":"cj0aj9ao3000y70g5tvh28fbw","_id":"cj0aj9aoy001z70g5kg1v3p8u"},{"post_id":"cj0aj9ao4001070g5s3dnaosu","category_id":"cj0aj9aoe001b70g5vv9jx3tq","_id":"cj0aj9aoz002170g527nm34o8"},{"post_id":"cj0aj9aow001x70g5ry2htf8v","category_id":"cj0aj9anm000h70g5g5jl0djb","_id":"cj0aj9ap1002470g5kswsv7vu"},{"post_id":"cj0aj9ao6001270g57g4v8bn4","category_id":"cj0aj9aoe001b70g5vv9jx3tq","_id":"cj0aj9ap2002670g5gyghb6c4"},{"post_id":"cj0aj9ao7001470g5jt38ne69","category_id":"cj0aj9aoe001b70g5vv9jx3tq","_id":"cj0aj9ap4002970g5fchggxiy"},{"post_id":"cj0aj9aoc001a70g5gisxv664","category_id":"cj0aj9ap1002570g5m7m3l2m3","_id":"cj0aj9ap6002d70g5obwuedyj"},{"post_id":"cj0aj9aof001d70g5qaa0fpwd","category_id":"cj0aj9ap5002a70g50rpk306x","_id":"cj0aj9ap8002h70g5lckpejm0"},{"post_id":"cj0aj9aos001t70g57kgidhql","category_id":"cj0aj9ap1002570g5m7m3l2m3","_id":"cj0aj9apa002k70g50l0h2iuc"}],"PostTag":[{"post_id":"cj0aj9amz000270g5wwsz08ms","tag_id":"cj0aj9an7000570g5qfn4qov0","_id":"cj0aj9anh000c70g5upfxuyym"},{"post_id":"cj0aj9an4000470g5vzvott22","tag_id":"cj0aj9anf000970g50sfcrdql","_id":"cj0aj9anm000i70g5e49r7ebd"},{"post_id":"cj0aj9anb000770g5v3bcfd5y","tag_id":"cj0aj9anl000g70g5e9uzud7y","_id":"cj0aj9anv000p70g598gtx9uy"},{"post_id":"cj0aj9anf000a70g5scqpm698","tag_id":"cj0aj9ans000m70g58120tilf","_id":"cj0aj9ao1000v70g5gqw860tx"},{"post_id":"cj0aj9anh000d70g513ff81j9","tag_id":"cj0aj9anx000s70g5ov4rl6mp","_id":"cj0aj9ao5001170g5wl5mzy6d"},{"post_id":"cj0aj9ank000f70g5q2282sw7","tag_id":"cj0aj9ao3000z70g5fng4rz5a","_id":"cj0aj9aoa001770g58xcmfmjr"},{"post_id":"cj0aj9ann000j70g5uyhka6fc","tag_id":"cj0aj9ao9001670g5jov3r06a","_id":"cj0aj9aof001e70g5377ostmj"},{"post_id":"cj0aj9anw000q70g5p0f2xilg","tag_id":"cj0aj9aoe001c70g5ht1g0d3d","_id":"cj0aj9aoj001l70g5do70kh1v"},{"post_id":"cj0aj9any000u70g5zj3b71tm","tag_id":"cj0aj9aoh001i70g52vzditbw","_id":"cj0aj9aor001r70g58eyurdx5"},{"post_id":"cj0aj9ao1000w70g5r3c09xyu","tag_id":"cj0aj9aoh001i70g52vzditbw","_id":"cj0aj9aoy001y70g5ytg4qunu"},{"post_id":"cj0aj9ao4001070g5s3dnaosu","tag_id":"cj0aj9aoh001i70g52vzditbw","_id":"cj0aj9ap0002370g5kmderud9"},{"post_id":"cj0aj9ao6001270g57g4v8bn4","tag_id":"cj0aj9aoh001i70g52vzditbw","_id":"cj0aj9ap3002870g5os4y96j9"},{"post_id":"cj0aj9ao7001470g5jt38ne69","tag_id":"cj0aj9aoh001i70g52vzditbw","_id":"cj0aj9ap6002c70g50oux80o0"},{"post_id":"cj0aj9aob001870g5aj96rrbe","tag_id":"cj0aj9ap5002b70g5m8gqb3zi","_id":"cj0aj9ap8002g70g5apf8i77e"},{"post_id":"cj0aj9aoc001a70g5gisxv664","tag_id":"cj0aj9ap7002f70g505pigkwa","_id":"cj0aj9apa002j70g5p3eyle77"},{"post_id":"cj0aj9aof001d70g5qaa0fpwd","tag_id":"cj0aj9ap9002i70g5xp6c62ye","_id":"cj0aj9apb002m70g5kpb3rnhv"},{"post_id":"cj0aj9aog001g70g5mh0oiau7","tag_id":"cj0aj9apa002l70g5xgbgf481","_id":"cj0aj9apc002o70g5gc40ykzr"},{"post_id":"cj0aj9aoi001k70g5tgecmusc","tag_id":"cj0aj9apc002n70g5fr7lfuk7","_id":"cj0aj9ape002q70g53hnho1jk"},{"post_id":"cj0aj9aok001m70g52wpe6oio","tag_id":"cj0aj9apd002p70g54dguvwo8","_id":"cj0aj9apg002s70g5co8bcnml"},{"post_id":"cj0aj9aos001t70g57kgidhql","tag_id":"cj0aj9ap7002f70g505pigkwa","_id":"cj0aj9api002u70g5mfkktv0r"},{"post_id":"cj0aj9aow001x70g5ry2htf8v","tag_id":"cj0aj9aph002t70g5f65mq0d5","_id":"cj0aj9apj002v70g55fuc9jq7"}],"Tag":[{"name":"2017","_id":"cj0aj9an7000570g5qfn4qov0"},{"name":"ASCII","_id":"cj0aj9anf000970g50sfcrdql"},{"name":"ARM","_id":"cj0aj9anl000g70g5e9uzud7y"},{"name":"C#学习笔记","_id":"cj0aj9ans000m70g58120tilf"},{"name":"总线协议","_id":"cj0aj9anx000s70g5ov4rl6mp"},{"name":"MBus DL/T645-2007 电能表通信协议","_id":"cj0aj9ao3000z70g5fng4rz5a"},{"name":"keil C","_id":"cj0aj9ao9001670g5jov3r06a"},{"name":"STM32","_id":"cj0aj9aoe001c70g5ht1g0d3d"},{"name":"STM8","_id":"cj0aj9aoh001i70g52vzditbw"},{"name":"数字电路","_id":"cj0aj9ap5002b70g5m8gqb3zi"},{"name":"嵌入式 单片机","_id":"cj0aj9ap7002f70g505pigkwa"},{"name":"按键识别","_id":"cj0aj9ap9002i70g5xp6c62ye"},{"name":"freeRTOS 中文文档","_id":"cj0aj9apa002l70g5xgbgf481"},{"name":"UART","_id":"cj0aj9apc002n70g5fr7lfuk7"},{"name":"C 软件","_id":"cj0aj9apd002p70g54dguvwo8"},{"name":"C# 上位机 串口","_id":"cj0aj9aph002t70g5f65mq0d5"}]}}